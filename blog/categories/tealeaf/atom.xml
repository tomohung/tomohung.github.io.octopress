<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tealeaf | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/tealeaf/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-04-07T14:06:05+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week4]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4/"/>
    <updated>2015-04-07T13:11:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4</id>
    <content type="html"><![CDATA[<h3>Three kinds of BDD</h3>

<p>In week 4 beginning, we got a brief intro for 3 kinds of BDD:</p>

<ul>
<li><p>meet in the middle</p>

<p>I think this should be the popular one for modern development. The front-end engineer build the pages from mockups, then back-end developer connect UI with controllers and models.</p></li>
<li><p>inside out</p>

<p>It develops from models to controllers till views and integrations. It&rsquo;s hard to decide what models you really need in the beginning.</p></li>
<li><p>outside in</p>

<p>It devlops from integrations to controllers and models. It start from a big vision, and close to what user&rsquo;s need. But for developer, it&rsquo;s hard to code from this big vision, especially for integration test in the development beginning.</p></li>
</ul>


<h3>Self Referential Associations</h3>

<p>We can use <strong>self referential association</strong> to let user track other users. For example:</p>

<pre><code># t.integer :follower_id, :leader_id
class Relationship &lt; ActiveRecord::Base
  belongs_to :follower, class_name: 'User'
  belongs_to :leader, class_name: 'User'
end
</code></pre>

<p>Then, model <code>User</code> can have these virtual attributes:</p>

<pre><code>  has_many :following_relationships, class_name: 'Relationship', foreign_key: :follower_id
  has_many :leading_relationships, class_name: 'Relationship', foreign_key: :leader_id
</code></pre>

<h3>Sending Emails</h3>

<p>Rails also offer <code>ActionMailer</code> for sending emails.</p>

<ul>
<li>create files in <code>app/mailers/app_mailer.rb</code></li>
</ul>


<pre><code>class AppMailer &lt; ActionMailer::Base

  def send_welcome_email(user)
    @user = user
    mail to: user.email, from: 'info@myflix.com', subject: 'Welcome to Myflix'
  end
end
</code></pre>

<ul>
<li><code>View</code> template in <code>app/views/app_mailers/send_welcome_email</code>:</li>
</ul>


<pre><code>%html(lang='en-US')
  %body
    %p Welcome to MyFlix, #{@user.full_name}
</code></pre>

<ul>
<li>Config for <code>config/environments/development.rb</code></li>
</ul>


<pre><code>config.action_mailer.delivery_method = :letter_opener
</code></pre>

<p>And</p>

<pre><code>group :development do
  gem 'letter-opener'
end
</code></pre>

<blockquote><p>This is only for <code>development</code> setting, we also need to set for <code>test</code> and <code>production</code> independent</p></blockquote>

<h3>Handling Sensitive Account Info</h3>

<p>It&rsquo;s dangerous to upload config setting file to github or other public storage, there is someone update AWS key to GitHub and got a unbelievable credit bill.</p>

<p>Use <code>ENV</code> to protect secret data, we can use gem <code>Figaro</code>.
<a href="https://github.com/laserlemon/figaro">Figara</a> is the simplest way to keep our key value safe.</p>

<p>There are two posts talking about this topic:</p>

<ol>
<li><a href="http://railsapps.github.io/rails-environment-variables.html">Rails Environment Variables</a></li>
<li><a href="https://devcenter.heroku.com/articles/config-vars">Configuration and config Vars</a></li>
</ol>


<h3>Test Email sending</h3>

<p>Remember to clear email deliveries before test:</p>

<pre><code>before { ActionMailer::Base.deliveries.clear }
</code></pre>

<p>Then we can validate email in the test by this</p>

<pre><code>post :create
expect(ActionMailer::Base.deliveries.last.to).to eq([user_attributes["email"]])
# expect(ActionMailer::Base.deliveries.last.body).to include(user_attributes["full_name"])
</code></pre>

<h3>Update database, use rake tasks</h3>

<p>An advice from TA Tomtomecek, I update existing data in model User, and he suggest me to use <a href="http://guides.rubyonrails.org/command_line.html#custom-rake-tasks">custom rake tasks</a> to do that. I&rsquo;ve not taste that yet, just leave a memo here to remember.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week3]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/17/reflection-to-tealeaf-course3-week3/"/>
    <updated>2015-03-17T09:41:26+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/17/reflection-to-tealeaf-course3-week3</id>
    <content type="html"><![CDATA[<p><a href="http://www.tomohung.com/blog/2015/03/11/reflection-to-tealeaf-course3-week2/">In week 2</a>, Tealeaf talked about how to test controller, and this week, I got a more comprehensive test consideration for controller and user interaction.</p>

<h3>For Controller Test</h3>

<ul>
<li>Everytime add a function feature, also need to add a test for it.</li>
<li>Everytime find a bug, also add a test for it.</li>
</ul>


<h3>DRY</h3>

<p>RSpec also offer two ways to DRY code.</p>

<h4>- Macro</h4>

<pre><code>$ mkdir spec/support
$ touch macros.rb
</code></pre>

<p>And we can move repeatedly code into here, for example, we usually need to set a login user:</p>

<pre><code>def set_current_user(user = nil)
  session[:user_id] = (user || Fabricate(:user)).id
end
</code></pre>

<p>and find user</p>

<pre><code>def current_user
  User.find(session[:user_id])
end
</code></pre>

<h4>- Shared Examples</h4>

<pre><code>$ touch spec/support/share_examples.rb
</code></pre>

<p>A test method may be called through different controllers:</p>

<pre><code>shared_examples 'requre_sign_in' do
  it 'redirects to the root page'
    action
    expect(response).to redirect_to root_path
  end
end
</code></pre>

<p>Be careful: <code>action</code> is a <strong>variable</strong>, then when using it:</p>

<pre><code>it_behaves_like 'require_sign_in' do
  let(:action) { get :index }
end
</code></pre>

<h3>Feature Specs</h3>

<p>There are two methods to test user interactions, one is <code>request spec</code> and this is deprecated by <strong>Capybara</strong>. The other one is <code>feature specs</code>, recommended by <strong>Capybara</strong>.</p>

<p><strong>Capybara</strong> offer functions that we can click link/button, fill text field&hellip;etc, to interactive with UI.</p>

<h4>- Install Capybara gem</h4>

<pre><code>group :test
  gem 'capybara'
end
</code></pre>

<p>Also add this line to test helper file</p>

<pre><code>requrire 'capybara/rails'
</code></pre>

<p>And</p>

<pre><code>$mkdir spec/features
$touch user_signs_in_spec.rb
</code></pre>

<h4>- A sample for user operation:</h4>

<pre><code>feature 'user interacts with the queue' do 

  scenario 'user adds and reorder videos in the queue' do
    category    = Fabricate(:category)
    monk        = Fabricate(:video, title: 'monk', category: category)
    futurama    = Fabricate(:video, title: 'futurama', category: category)
    south_park  = Fabricate(:video, title: 'south park', category: category)

    sign_in
    expect(page).to have_content 'You have signed in.'

    add_video_to_queue(monk)
    expect(page).to have_content(monk.title)

    visit video_path(monk)
    expect(page).not_to have_content('+ My Queue')

    add_video_to_queue(futurama)
    add_video_to_queue(south_park)

    set_video_order(monk, 3)
    set_video_order(futurama, 1)
    set_video_order(south_park, 2)

    expect_video_order(monk, 3)
    expect_video_order(futurama, 1)
    expect_video_order(south_park, 2)
  end
end

def add_video_to_queue(video)
  visit home_path
  find("a[href='/videos/#{video.id}']").click
  expect(page).to have_content(video.title)
  click_link '+ My Queue'
end

def set_video_order(video, order)
  within(:xpath, "//tr[contains(.,'#{video.title}')]") do
    fill_in 'queue_items[][position]', with: order
  end
end

def expect_video_order(video, order)
  expect(find(:xpath, "//tr[contains(.,'#{video.title}')]//input[@type='text']").value).to eq(order.to_s)
end
</code></pre>

<p>here I choose to use <code>:xpath</code>.</p>

<h4>- One level for scenario</h4>

<p>In above sample, I extract methods <code>add_video_to_queue</code>, <code>set_video_order</code>, and <code>expect_video_order</code>. This is we want to keep a principle <code>Abstract one level for scenario</code>. Encapsulating logic code and keep main code readable on the same abstract level can help reader to review.</p>

<h3>Rails Conventions</h3>

<h4>- Merge Params</h4>

<pre><code>= form_tag update_queue_path do
  ...
  %td= text_field_tag 'queue_items[][position]', queue_item.position
  =hidden_field_tag 'queue_items[][id]', queue_item.id

  =submit_tag 'Update'
</code></pre>

<p>Then we will get a hash value <code>params[queue_items] = {position: xxx, id: xxx}</code></p>

<h4>- select_tag</h4>

<pre><code>%td= select_tag 'queue_items[][rating]', options_for_video_reviews(queue_item.rating), include_blank: true
</code></pre>

<p>And <code>options_for_video_reviews</code>:</p>

<pre><code>def options_for_video_reviews(selected = nil)
  options_for_select((1..5).map { |num| [pluralize(num, 'Star'), num]}, selected)
end
</code></pre>

<p>Be careful that <code>[pluralize(num, 'Star'), num]</code> is a pair value.</p>

<h4>- ActiveRecord Transactions</h4>

<p>A sample from Rails Tutorial</p>

<pre><code>ActiveRecord::Base.transaction do
  david.withdrawal(100)
  mary.deposit(100)
end
</code></pre>

<p>If any one of <code>david.withdrawl</code> or <code>mary.deposit</code> raise an exception(<strong>Be careful: there must be a raising error to trigger transaction</strong>), all database record in this action will be rollback. It deal with batch action with database. So I have to care about what functions will raise an exception when fail. Ex. <code>update</code> return a fail, and <code>update!</code> raise an exception.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week2]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/11/reflection-to-tealeaf-course3-week2/"/>
    <updated>2015-03-11T11:21:17+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/11/reflection-to-tealeaf-course3-week2</id>
    <content type="html"><![CDATA[<p>There are 3 kinds of test: <code>Unit</code>, <code>Functional</code>, <code>Integration</code>. In <a href="http://www.tomohung.com/blog/2015/03/06/reflection-to-tealeaf-course3-week1/">week 1</a>, we test <strong>Model</strong>, this should belong to <code>Unit test</code> . And this week we test <strong>Controller</strong>, this should belong to <code>Functional test</code>. I guess it should be <code>Integration test</code> when we move into part of <strong>View</strong> test.</p>

<p>I have to heavily rely on solution videos, there are two main reasons:</p>

<ol>
<li><p>I&rsquo;m not familiar with <code>what to test</code>, because I&rsquo;m a starter for TDD. It&rsquo;s a big conversion <strong>from test laster to test driven</strong>.</p></li>
<li><p>I&rsquo;m not familiar with <code>RSpec</code>. There are some tricks for test controllers when using RSpec.</p></li>
</ol>


<p>For example, when we test `QueueItemsController#create&#8217;, there are 7 tests:</p>

<ul>
<li>it &lsquo;redirects to my queue page&rsquo;</li>
<li>it &lsquo;creates a queue item&rsquo;</li>
<li>it &lsquo;creates the queue item associated with video&rsquo;</li>
<li>it &lsquo;creates the queue item associated with current user&rsquo;</li>
<li>it &lsquo;puts the video as the last one in the queue&rsquo;</li>
<li>it &lsquo;does not add the video in the queue if already existed in the queue&rsquo;</li>
<li>it &lsquo;redirects to sign in page if unauthenticated&rsquo;</li>
</ul>


<p>A simple action needs to do such lots of tests!!</p>

<p>Or here is for <strong>Model</strong> methods: <code>search_by_title</code>:</p>

<ul>
<li>it &lsquo;returns empty array if no match&rsquo;</li>
<li>it &lsquo;returns an array if one video&rsquo;</li>
<li>it &lsquo;returns an array if partial match&rsquo;</li>
<li>it &lsquo;returns an array of all matches ordered by DESC&rsquo;</li>
<li>it &lsquo;returns an empty array for search an empty string&rsquo;</li>
</ul>


<p>To test every possible situations is not an easy work.</p>

<p>Brandon also metioned me that care about using <code>let</code> and <code>before</code>. Because of lots of tests in spec files, we may miss some pre-declare vars by using <code>let</code> or <code>before</code>. Sometimes, it may be better do not clean duplicated codes for code readability.</p>

<p>Second, extract methods into <strong>Model</strong>. ex:</p>

<pre><code class="ruby user.rb">  def queue_include?(video)
    queue_items.map(&amp;:video).include?(video)
  end
</code></pre>

<p>then, I can use this method everywhere in my app.</p>

<h3>Conclusion</h3>

<p>Still on the way to be more familiar to do TDD. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week1]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/06/reflection-to-tealeaf-course3-week1/"/>
    <updated>2015-03-06T08:40:32+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/06/reflection-to-tealeaf-course3-week1</id>
    <content type="html"><![CDATA[<p>In Course3 week1, Kevin give me a schema of what should developper do from beginning.</p>

<p>There are so many subjects I&rsquo;ve heard but not ever practicing in action, like: TDD, git flow(github flow), why test&hellip;etc.</p>

<p>I like the concept Red-Green-Refactor, it forced developper thinking about what you should do first. This may be argued by some experienced engineer, because they can do these works naturally.</p>

<p>But followed by Red-Green-Refactor, seeing green light really makes me feel comfortable. I can&rsquo;t stop thinking about how it&rsquo;d become easier if I could use this method when developping AI for TicTacToe. Testing game logic in TicTacToe manually costs me lots of time.</p>

<p>Git flow/ GitHub flow is also my first time to taste. I think this should be fun to start communicate with other programmers through pull request. Glad that Tealeaf built an environment to let us feel like we are really in work.</p>

<p>Matthew also metioned about this I should care about: <a href="http://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline">Why should files end with a newline</a>.
<br/></p>

<p>I also find a blog post talking about <a href="http://www.jamesshore.com/Blog/Red-Green-Refactor.html">Red-Green-Refactor</a>, the author split the process into 5 steps: <strong>Think, Red, Green, Refactor, Repeat</strong>, and called this <code>code design process</code>. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titan's Tic Tac Toe]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/03/titans-tic-tac-toe/"/>
    <updated>2015-03-03T09:11:10+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/03/titans-tic-tac-toe</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://i.minus.com/i2XJ0y9E48CHg.png">http://i.minus.com/i2XJ0y9E48CHg.png</a>&#8221;></p>

<h3>Prelude</h3>

<p>This is a blog entry for record my first personal project for Rails, and focus on what&rsquo;s are first time if starting a new project <code>From Zero To One</code>.</p>

<p><code>Titan's Tic Tac Toe</code> is my first personal app for Rails.</p>

<p>Website: <a href="https://young-castle-5534.herokuapp.com/">https://young-castle-5534.herokuapp.com/</a></p>

<p>GitHub repo: <a href="https://github.com/tomohung/tictactoe-rails">https://github.com/tomohung/tictactoe-rails</a></p>

<p>This project is activated by Tealeaf Course 2(Rapid Prototyping with Ruby on Rails), we are asked to do a personal project by ourself. In course 1(Introduction to Ruby and Web Development), we have an optional assignment to build a game <code>Tic Tac Toe</code> engine by Object-Oriented, that is, to give this game AI. I spent a lot of time to design logic, and I believe I have a good job for this. This is why I choose this subject for my personal project. And reuse my code is also a kind of <code>DRY</code> way.</p>

<!--more-->


<p><strong>Warning</strong></p>

<p>I have to admit that I make a big mistake, because I am using a class variable to control <strong>Game Board</strong> status. This work when only me to play with it, but after deployment it will become disaster when multiple player play together. Player share the same game status and sometimes it look weird.</p>

<p>I should use sessions or database to store game status, and extract methods from class GameBoard to controller. I won&rsquo;t fix this problem but writing this blog entry to record this.</p>

<p><strong>Do no use <code>class vars</code> and <code>global vars</code> in Rails.</strong></p>

<h3>Concepts</h3>

<p>Before implementation, I need to split works into pieces.</p>

<ol>
<li>Game enegine.</li>
<li>Game board implementation.</li>
<li>Ladder for record user&rsquo;s game result.</li>
<li>User&rsquo;s register system and Login/out.</li>
</ol>


<h3>Update Environment</h3>

<p>RVM and rbenv are two popular Ruby version manager. I choose RVM, but rbenv is also a good choice.
It makes me easy to switch different versions Ruby between different projects.
I use <code>Ruby version 2.2.0</code>, and <code>Rails 4.2.0</code> for this new project.</p>

<p>Then create a new Rails project
<code>
$ rails new project_name
</code></p>

<p>Specify version in GemFile</p>

<pre><code>gem 'rails', '4.2.0'
ruby "2.2.0"

gem 'bootstrap-sass', '~&gt; 3.3.3'
</code></pre>

<h3>Game Engine</h3>

<p>The game engine is already done in Course 1, so I just modified some codes to fit web process.
GitHub repo: <a href="https://github.com/tomohung/tictactoe-rails/blob/master/lib/oo_tic_tac_toe.rb">https://github.com/tomohung/tictactoe-rails/blob/master/lib/oo_tic_tac_toe.rb</a></p>

<h3>Game Board</h3>

<p>  I&rsquo;m a newbie for HTML &amp; CSS, so Bootstrap will be my best choice. It offer lots of template with high quality, and mobile first.</p>

<p>  I choose <a href="http://getbootstrap.com/examples/cover/">template-cover</a> for my project, it looks clean and suit for my application.</p>

<h4>Bootstrap</h4>

<ol>
<li> Download Bootstrap, unzip it, then find source code in <code>/docs/examples/cover</code>.</li>
<li> I got two files, <code>index.html</code> and <code>cover.css</code>.</li>
<li> combine <code>index.html</code> into Rails <code>views/layout/application.html.erb</code>.</li>
</ol>


<p>  It may looks like this:</p>

<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Tic Tac Toe&lt;/title&gt;
  &lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =&gt; true %&gt;
  &lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="site-wrapper"&gt;
    &lt;div class="site-wrapper-inner"&gt;
      &lt;div class="cover-container"&gt;
        &lt;%= render 'layouts/navigator' %&gt;
        &lt;%= render 'layouts/messages' %&gt;
        &lt;%= yield %&gt;
        &lt;%= render 'layouts/footer' %&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>  I use partial <code>layouts/navigator</code> and <code>layouts/footer</code> to clean the code.</p>

<h4>CSS for cover.css</h4>

<p>  The page looks not good, because CSS is not included. Copy <code>cover.css</code> to <code>/assets/stylesheets</code>. Rails will automatically include CSS files in this directory.</p>

<p>  So far is good, but something wrong when I want to use other bootstrap components.
  After google that, this is because I haven&rsquo;t import bootstrap!! I&rsquo;m using just cover.css for this template.</p>

<p>  Changing file name <code>assets/applications.css</code> to <code>asstes/application.scss</code>, and add this code</p>

<pre><code>  @import "bootstrap-sprockets";
  @import "bootstrap";
</code></pre>

<p>  <code>bootstrap-sprockets</code> has to be imported otherwise <strong>icon</strong> can&rsquo;t be displayed.</p>

<p>  Well, bootstrap components works, but ruin all my template.</p>

<p>  After trial and error, I merge <code>cover.css</code> code into <code>application.scss</code>, and put behind <code>@import "bootstrap"</code>. Rails may load other css files in <code>assets</code> directory, then application.scss import bootstrap, overwrite those class attributes.</p>

<p>  After these setting, now my cover template works well with Bootstrap. I aslo test on my iPhone, it shows pretty good, Bootstrap is awesome!!</p>

<h4>CSS for GameBoard</h4>

<p>  The hardest part for me is to build a game board. I search from web and get some solution, but there&rsquo;s no better solution to draw a symbol <code>X</code>, I decide to display it by another style circle. One more thing, I add the feature when mouse <code>hover</code> on choosen square, it will render a temparary fake circle. This makes game much friendly. Here is the css file:</p>

<pre><code class="css">.doughnut { 
  display: inline-block;
  border: 10px solid #f00;
  border-radius: 50px;
  height:60px;
  width:60px;
}

.host_doughnut { 
  display: inline-block;
  border: 5px solid #fff;
  border-radius: 20px;
  height:60px;
  width:60px;
}

.unpicked {
  display: inline-block;
  height:60px;
  width:60px;
  border: 2px dashed #444;
}

.unpicked:hover {
  border: 10px solid #f66;
  border-radius: 50px;
  height:60px;
  width:60px;
}
</code></pre>

<h4>Ajax</h4>

<p>  Everytime player choose the square, the whole page will reload again. This is not good for a modern web app. Using Ajax to improve it.</p>

<p>  The keyword is add a ID for picked squre.</p>

<pre><code>  &lt;div id = 'pick_&lt;%= number %&gt;'&gt;
</code></pre>

<p>  in <code>GameController</code>, we use <code>respond_to</code> to trigger js:</p>

<pre><code class="ruby">  respond_to do |format|
    format.html do
      redirect_to game_path
    end
    format.js do          
      host_pick
      winner = @board.game_is_over?
      if winner
        flash[:notice] = 'OH NO!! You are DEAD!' if winner == @host
        render :js =&gt; "window.location = '/game/over'"
      end
    end
  end
</code></pre>

<blockquote><p>Note: I use <code>render :js =&gt; "window.location = '/game/over'"</code> to render page /game/over if game is over.</p></blockquote>

<p>  and <code>game.create.js</code> file looks like:</p>

<pre><code class="ruby">  &lt;% (1..9).each do |number| %&gt;
    &lt;% if @player_picked_numbers.include? number %&gt;
      $('#pick_&lt;%= number %&gt;').html("&lt;div class='doughnut'&gt;&lt;/div&gt;");
    &lt;% elsif @host_picked_numbers.include? number %&gt;
      $('#pick_&lt;%= number %&gt;').html("&lt;div class='host_doughnut'&gt;&lt;/div&gt;")
    &lt;% end %&gt;
  &lt;% end %&gt;
</code></pre>

<p>  Ajax make this game vivid!!</p>

<h3>User&rsquo;s Register</h3>

<p>Since I need to store game record, I have to add User&rsquo;s Register, this is not a difficult stuff if you had gone through course 2. Here is a simple ERD:</p>

<ul>
<li>User: username, digest_password, timestamps, has_many :game_records</li>
<li>GameRecord: user_id, game_result, attack_times</li>
</ul>


<p>User and GameRecord is a one-to-many assocaition.</p>

<p>Create routes, model, controller, and views follow what we learned in course 2.</p>

<h3>Login/out</h3>

<p>  Create a SessionController to manager user login/logout.
  Use session[:user_id] to store data in cookie.</p>

<ul>
<li>def <code>new</code> to render login page.</li>
<li>def <code>create</code> for login.</li>
<li>def <code>destroy</code> for logout.</li>
</ul>


<blockquote><p>Don&rsquo;t forget to add feature: auto login after user register.</p></blockquote>

<h3>Ladder</h3>

<p>I will show three kinds of game result: Keeper, Winner, Loser.
And I need tab navigation here, still copy from Bootstrap:</p>

<p>&#8220;`</p>

<ul class="nav nav-tabs">
    <% params[:tab] = 'WIN' if !params[:tab] %>
    <li class="<%= 'active' if params[:tab] == 'TIE' %>&#8221;><a href="#TIE" data-toggle="tab">Keepers</a></li>
    <li class="<%= 'active' if params[:tab] == 'WIN' %>&#8221;><a href="#WIN" data-toggle="tab">Heroes</a></li>
    <li class="<%= 'active' if params[:tab] == 'LOSE' %>&#8221;><a href="#LOSE" data-toggle="tab">Loser</a></li>
</ul>




<div class="tab-content">
  <%= render 'column_title' %>  
  <div class="<%= if (params[:tab] == 'TIE' || !params[:tab]) then 'tab-pane active'  else 'tab-pane' end%>&#8221; id=&#8221;TIE&#8221;>
    <%= render @game_records.where(status: 'TIE') %>
  </div>
  <div class="<%= if params[:tab] == 'WIN' then 'tab-pane active'  else 'tab-pane' end%>&#8221; id=&#8221;WIN&#8221;>
    <%= render @game_records.where(status: 'WIN') %>
  </div>
  <div class="<%= if params[:tab] == 'LOSE' then 'tab-pane active'  else 'tab-pane' end%>&#8221; id=&#8221;LOSE&#8221;>
    <%= render @game_records.where(status: 'LOSE') %>
  </div>
</div>


<pre><code>
Tabs do not work? This is because I haven't include javascript for Bootstrap. 

Add this line in `/assets/javascripts/application.js`
</code></pre>

<p>//= require bootstrap-sprockets
&#8220;`</p>

<p>Well, it works now!!</p>

<p>Then, I found Kevin(Tealeaf Instructor) also write a blog for <a href="http://www.gotealeaf.com/blog/integrating-rails-and-bootstrap-part-1">integrating rails and bootstrap</a>.</p>

<h3>Deploy to Heroku</h3>

<p>Finally, functions all work and ready to deploy to <a href="heroku.com">Heroku</a>. And follow by Heroku instruction, push code, then&hellip;<code>Fail</code>.</p>

<p>Check the log and find something wrong about <code>gem pg</code>. pg is <code>Postgres</code> used by Heroku. Rails default setting is using <code>sqlite3</code>, so I need to do some work in Gemfile:</p>

<pre><code>group :production do
  gem 'pg'
  gem 'rails_12factor'
end
</code></pre>

<p>Add this code to Gemfile for config :production using Postgres. Run <code>bundle install</code> and git push again, it should work!!</p>

<h3>Conclusion</h3>

<p>In Course 2, we have lots assignments from a prepared template. If I don&rsquo;t start a new project, I will never knew there are lots of minor things I should know. After this project, I have chance to be more familiar with Ruby language, Rails routes, CRUD&hellip;etc.</p>

<h3>Compliment from others</h3>

<p>Record these just for encourage myself to keep going on.</p>

<p>Albert Agram (TA):</p>

<blockquote><p>Hey Tomo, nicely done! I played a few rounds and am impressed. Good job :)
<br/></p></blockquote>

<p>Chris Lee (Tealeaf Instructor):</p>

<blockquote><p>This is incredibly awesome!
<br/>
This type of app doesn&rsquo;t lend itself well to Rails, because it&rsquo;s not
really &ldquo;page oriented&rdquo;. Rails tends to be a better fit for apps like
social networks, or things like that where you have CRUD actions on some
resources.
<br/></p></blockquote>

<p>Brandon Conway (TA):</p>

<blockquote><p>This game is awesome! I really like the ladder implementation.
<br/></p></blockquote>

<p>Eugene Chang:</p>

<blockquote><p>This is a really nice app! After seeing it, I had to constantly resist the temptation of spending more time trying to make my UI look better. Great job!</p></blockquote>
]]></content>
  </entry>
  
</feed>
