<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tealeaf | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/tealeaf/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-02-10T22:24:47+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson2]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/"/>
    <updated>2015-02-10T16:39:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2</id>
    <content type="html"><![CDATA[<p><a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">Last week</a>, I know Models and Database side of Rails.</p>

<p>This week Tealeaf reveals the <code>Controller</code> and <code>View</code> part of MVC, I would like to summarize this lesson into two parts: <code>Don't Repeat Yourself</code> and <code>Conventions over Configuration</code>.</p>

<!--more-->


<h3>Don&rsquo;t Repeat Yourself</h3>

<ul>
<li><p>before_action</p>

<p>Like Sinatra, before_action works at Controller, help us to remove repeatedly codes, like</p>

<pre><code>  before_action: :set_post, only: [:show, :edit, :update]
</code></pre>

<pre><code>  def set_post
    @post = Post.find(param[:id])
  end
</code></pre>

<p>then, method <code>set_post</code> works at three actions : show, edit, update by once.</p></li>
<li><p>form partial</p>

<p>Rails offer <code>form partial</code> to help us eliminate repeatedly <code>HTML codes</code>, by Rails convention, if there is a file called <code>/app/views/posts/_post.erb</code>, I can just write code:</p>

<pre><code>  &lt;%= render @post %&gt;
</code></pre>

<p>if @post is a class Post&rsquo;s instance, then Rails will automatically match to the file <code>_post.erb</code>, then render this file.</p>

<p>There is another amazing way to show collection of instances. If I have a collection instance <code>@posts</code> by class Post, then I have write</p>

<pre><code>  &lt;%= render @posts %&gt;
</code></pre>

<p>Rails will also automatically match the file <code>_post.erb</code> to iterate to render <code>@posts</code>. What a clean way to write such codes!</p></li>
<li><p>Helpers for view: fix url and datetime</p>

<p>We also can put some logic in Views into <code>/helpers</code>, like <code>application_helper.rb</code>. Put a lot of logic in Views is a dirty way when reviewing, and Rails have helpers to make us a clean way to do this. <code>Form Helper</code> is another good implement to help us. I&rsquo;ll metion later.</p></li>
<li><p>validations</p>

<p>Rails offer a simple to validate data in Model, like this</p>

<pre><code class="ruby post.rb">validates :title, presence: true, length: {minimum: 5}
</code></pre></li>
</ul>


<h3>Conventions over Configuration</h3>

<ul>
<li><p>CRUD
For most popular actions on web, there are 4 actions: Create, Retrieve, Update, Delete.
Rails offer a RESTful setting to make implemention these actions much simple.</p>

<p>For example, in <code>routes.rb</code>:</p>

<pre><code>  resources :posts
</code></pre>

<p>help us to build 7 actions corespond with VERBs and URIs.</p>

<pre><code>get '/posts/', to: "posts#index", as: "posts"
get '/posts/:id', to: "posts#show", as: "post"
get '/posts/new', to: "posts#new", as: "new_post"
post '/posts/', to: "posts#create",
get '/posts/:id', to: "posts#edit", as: "edit_post"
patch '/posts/:id', to: "posts#update"
delete '/posts/:id', to: "posts#destroy"
</code></pre>

<p>I also can use key word <code>except:</code> or <code>only:</code> to assign which routes will be created:</p>

<pre><code>  resources :posts, except: [:destory]
  resources :comments, only: [:create]
</code></pre></li>
<li><p>nested routes
Rails also offer a way to create nested path like <code>/posts/:id/comments</code></p>

<pre><code>  resources :posts, except: [:destory] do
    resources :comments, only: [:create]
  end
</code></pre>

<p>And this will create route for <code>comments#create</code> by nested route</p>

<pre><code>  post '/posts/:post_id/comments', to: "comments#create", as: "post_comments"
</code></pre></li>
<li><p>model backed form</p>

<p>Using <code>Model backed form</code> can associated with instance, then Rails do a lot of task behind the form.</p>

<pre><code>&lt;%= form_for [@post, @comment] do |f| %&gt;  
  &lt;%= render 'shared/error_messages', instance: @comment %&gt;
  &lt;%= f.label :body, 'Leave a Comment:'%&gt;
  &lt;%= f.text_area :body , rows: 5, class: 'span4'%&gt;
  &lt;br&gt;
  &lt;%= f.submit class: 'btn btn-defualt'%&gt;
&lt;% end %&gt;
</code></pre>

<p><code>[@post, @comment]</code> is a Rails convention for creating matching routes for <code>posts/coments</code>. And this form help us to create HTML element depends on what current action is. There are different actions in <strong>edit</strong> and <strong>new</strong> actions. <code>label</code> will update information if it&rsquo;s at edit action, and form action will generate a hidden attribute to store info that current actions VERB. This are all Rails conventions.</p></li>
<li><p>category_ids for checkboxes</p>

<p>Rails offer a helper to create checkboxes, like this</p>

<pre><code>&lt;%= form_for @post do |f| %&gt;
  &lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name do |cb| %&gt;
    &lt;%= cb.label(class: 'checkbox inline') {cb.check_box(class: 'checkbox') + cb.text}%&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>

<p>And there is a virtual attribute for <code>category_ids</code>, it&rsquo;s generated because we set posts and categories&rsquo;s associations in Post Models:</p>

<pre><code>class Post &lt; ActiveRecord::Base
  belongs_to :creator, foreign_key: :user_id, class_name: "User"
  has_many :comments
  has_many :post_categories
  has_many :categories, through: :post_categories
end
</code></pre>

<p>and <code>category_ids</code> store multiple values to match <code>collection_check_boxes</code>. Rails another magic show.</p></li>
<li><p>auto association by mass-assignment</p>

<p>We can write</p>

<pre><code>  @comment = @post.comments.new(param.require(:comment).permit!)
</code></pre>

<p>Rails will auto assign post_id to @comment.</p></li>
</ul>


<h3>Others</h3>

<ul>
<li><p>Strong parameters</p>

<p>After Rails 4, Rails lock params by default, we need to get params by this way</p>

<pre><code>params.require(:post).permit(:title, :url, :description, category_ids:[])
</code></pre>

<p>If we have to get a collection values, remember to add <code>[]</code></p></li>
<li><p>render vs redirect_to</p>

<p><code>render</code> is for render HTML, and <code>redirect_to</code> is for make a new request. Although we see the page is changed, but it&rsquo;s totally different behind these two ways.</p></li>
</ul>


<h3>Conclusion</h3>

<p>  I can&rsquo;t imagine how can I figure out such mass Rails knowledge by myself in two weeks. Here is my learning processes: <code>watch video -&gt; 'I knew it!' -&gt; do assignment -&gt; 'What? How to do that?' -&gt; watch solution -&gt; 'Ah! I got it!' -&gt; complete assignment</code>. And these things happen again and again.</p>

<p>  Watching option videos and reviewing disscusions also help me to dig out what I missed.</p>

<p>  I should do the official guide again, and I think this time will be a totally different feeling compared with two weeks ago.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf Course2 Lesson2 Quiz]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/08/tealeaf-course2-lesson2-quiz/"/>
    <updated>2015-02-08T14:13:48+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/08/tealeaf-course2-lesson2-quiz</id>
    <content type="html"><![CDATA[<blockquote><h4>1. Name all the 7 (or 8) routes exposed by the resources keyword in the routes.rb file. Also name the 4 named routes, and how the request is routed to the controller/action.</h4></blockquote>

<p>  For example by table <code>posts</code>:</p>

<table>
<thead>
<tr>
<th>Prefix   </th>
<th>Verb   </th>
<th>URI   </th>
<th>Controller#Action   </th>
</tr>
</thead>
<tbody>
<tr>
<td>posts   </td>
<td>GET   </td>
<td>/posts   </td>
<td>posts#index   </td>
</tr>
<tr>
<td>new_post   </td>
<td>GET   </td>
<td>/posts/new   </td>
<td>post#new   </td>
</tr>
<tr>
<td>   </td>
<td>POST   </td>
<td>/posts   </td>
<td>post#create   </td>
</tr>
<tr>
<td>post   </td>
<td>GET   </td>
<td>/posts/:id   </td>
<td>post#show   </td>
</tr>
<tr>
<td>edit_post   </td>
<td>GET   </td>
<td>/posts/:id   </td>
<td>post#edit   </td>
</tr>
<tr>
<td>   </td>
<td>PUT/PATCH   </td>
<td>/posts/:id   </td>
<td>post#update   </td>
</tr>
<tr>
<td>   </td>
<td>DELETE   </td>
<td>/posts/:id   </td>
<td>post#destroy   </td>
</tr>
</tbody>
</table>


<!--more-->


<blockquote><h4>2. What is REST and how does it relate to the resources routes?</h4></blockquote>

<p>  REST is abbreviation for <code>Representational State Transfer</code>. It use a VERB and a URI to operate some action for web application. And it&rsquo;s corespond to 4 HTTP VERB: GET, POST, PUT, DELETE with 7 actions: index, show, new, create, edit, update, destroy.</p>

<blockquote><h4>3. What&rsquo;s the major difference between model backed and non-model backed form helpers?</h4></blockquote>

<p>  <code>Model backed form</code> from helpers like <code>form_for</code>, it can automatically association with objects in table, and it can dynamic generate coresponding element for different actions(ex. edit and new).</p>

<p>  <code>Non-model backed form</code> from helpers like <code>form_tag</code>, it operate elements without relationship of tables in database.</p>

<blockquote><h4>4. How does form_for know how to build the <form> element?</h4></blockquote>

<p>  form_for based on given object, like this:
<code>
  &lt;%= form_for @posts do |f| %&gt;
    &lt;%= f.label :title %&gt;
    &lt;%= f.text_field :title %&gt;
    &lt;%= f.submit %&gt;
  &lt;% end %&gt;
</code>
  There&rsquo;s a hidden attribute in form to record that what&rsquo;s action for this request. Rails regconize this hidden attribute to build <form> element. It will automatically create submit button by what action is called.</p>

<blockquote><h4>5. What&rsquo;s the general pattern we use in the actions that handle submission of model-backed forms (ie, the create and update actions)?</h4></blockquote>

<p>For creating a post: <code>POST /posts</code>
<code>
def create
  @post = Post.new(params.require(:post).permit!)
  if @post.save
    redirect_to posts_path
  else
    render :new
  end
end  
</code></p>

<p>  For updating a post: <code>PUT /posts/:id</code>
<code>
def update
  @post = Post.new(params.require(:post).permit!)
  if @post.save
    redirect_to post_path(@post)
  else
    render :edit
  end
end  
</code></p>

<blockquote><h4>6. How exactly do Rails validations get triggered? Where are the errors saved? How do we show the validation messages on the user interface?</h4></blockquote>

<p>  Rails validations get triggered in Model(ActiveRecord::Base), and errors are saved in Model.
  We can use Model&rsquo;s method to show error messages like this:
<code>
  instance.errors.full_messages
</code>
  which instance is Model&rsquo;s instance.</p>

<blockquote><h4>7. What are Rails helpers?</h4></blockquote>

<p>  Rails helpers is a way to implement DRY principle in <code>View</code>, it abstract redundant <strong>logic codes</strong> in Views into helpers.
This make code in View more cleaner without too much logic in it.</p>

<blockquote><h4>8. What are Rails partials?</h4></blockquote>

<p>  Rails partials is a way to implement DRY principle in <code>View</code>, it abstract redundant <strong>HTML codes</strong> in Views into partial forms.</p>

<blockquote><h4>9. When do we use partials vs helpers?</h4></blockquote>

<p>  Partials is to eliminate repeatedly HTML codes in Views, and helpers is to eliminate repeatedly logic codes in Views.</p>

<blockquote><h4>10. When do we use non-model backed forms?</h4></blockquote>

<p>  Some input or showing requirements do not need to be associated with tables in database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newbie for Rails Migration]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/02/newbie-for-rails-migration/"/>
    <updated>2015-02-02T21:46:35+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/02/newbie-for-rails-migration</id>
    <content type="html"><![CDATA[<p>As a newbie for Rails, It&rsquo;s normal to do something stupid.</p>

<h2>Modified migration files after <code>rake db:migrate</code></h2>

<p>It&rsquo;s useless!! Be carful that every migration filename including a timestamp, after running <code>rake db:migrate</code> will re-generate schema.rb. Data in schema.rb will show that the lastest timestamp, if there is no any new migration files newer than this timestamp, <code>rake db:migrate</code> will do nothing. Yes! it&rsquo;s nothing!!</p>

<pre><code class="text normally you should see">==  CreateArticles: migrating ==================================================
-- create_table(:articles)
   -&gt; 0.0019s
==  CreateArticles: migrated (0.0020s) =========================================
</code></pre>

<pre><code class="text schema.rb has been updated, rake db:migrate do nothing">$ rake db:migrate
$ rake db:migrate
</code></pre>

<!--more-->


<p>That&rsquo;s why I got stuck on it for a long time, because I make such a stupid mistake.</p>

<p>So, how about using <code>rake db:drop</code> or <code>rake db:rollback</code>. This is also a not smart choice, because you should consider that there may be some other co-workers are working on the same project. If they also run their migration on their computer, then you modified yourself migration files, or do some database operation like <code>rake db:rollback</code>. These actions will lead to some data error for database.</p>

<h2>Create another new migration file for modified database</h2>

<p>Using <code>rake generate migration do_some_change</code> for chaning database layer. Using another file to show the modified history is much clear. Avoid ambiguous and mess up all update contect in migration files is super important.</p>

<pre><code class="text Add column for posts table">class AddColumnToPosts &lt; ActiveRecord::Migration
  def change
    add_column :posts, :user_id, :interger
  end
end
</code></pre>

<h2>Only use <code>rails generate migration</code></h2>

<p>Don&rsquo;t use <code>rails generate</code> for models or controllers etc. It contains a lot of rails magic. Although most of guide tour (including official guide) use this way. But it&rsquo;s easy to misunderstanding what is wrong for operating database layer and ActiveRecord layer. Take care of this!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course 2 Lesson 1]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/"/>
    <updated>2015-02-02T16:05:05+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1</id>
    <content type="html"><![CDATA[<p>Finally, Rails is coming.</p>

<p>Before join Tealeaf, I&rsquo;ve tried few times to follow some rails guide books. I just can type some magic codes to build simplest web app but didn&rsquo;t know why at all, because I even didn&rsquo;t know what ruby is.</p>

<p>This time, passing through course 1, I knew what the ruby is, then following <a href="http://guides.rubyonrails.org/getting_started.html">official tour guide</a>, it&rsquo;s much clear than other books I&rsquo;ve seen. But I still got stuck on creating many-to-many relationship, because I made a stupid mistake here: <em>I modified migration file after running <code>rake db:migrate</code></em>.</p>

<p>Then I dived into solution videos, and Chirs said that:</p>

<blockquote><p>Don&rsquo;t use <code>rails generate</code> except <code>migration</code></p></blockquote>

<p>I do love this way, because:</p>

<ol>
<li><p>I never saw other&rsquo;s show this way to build migration, they always use <code>rails generate model</code> to create model and migration. And the problem is, I thought this is the only way to create models and migrations!! And I just thought this is Rails magic, I don&rsquo;t need to think too much.</p></li>
<li><p>When I got stuck because I didn&rsquo;t know I can&rsquo;t modified migration files after running <code>rake db:migrate</code>. Make sure migration setting is all done before running <code>rake db:migrate</code> is very important. And this is just for ActiveRecord layer, database is another layer. It&rsquo;s much easier to understand how could be a disaster to modified/delete migration files working with database layer.</p></li>
</ol>


<p>I make <a href="http://www.tomohung.com/blog/2015/02/02/newbie-for-rails-migration/">a post to record my big step for Rails</a>.</p>

<p>I also try to detect tealeaf discus panel, becuase I think it&rsquo;s better to <code>show who kudos this post</code>. Sometimes I just want to give a kudos for people reply my post without saying something more, but it&rsquo;s wierd for others to read this post, because they can&rsquo;t see kudos I already gave the post. Anyway, here is my ERD for discuss panel.</p>

<p><img class="<a" src="href="http://i.minus.com/ibfrZjiBfElndg.jpg">http://i.minus.com/ibfrZjiBfElndg.jpg</a>&#8221;></p>

<p>I&rsquo;m super satisfied that this week I found my mistake when using migrations, and I think there must be other mistake for controller&rsquo;s and view&rsquo;s. Moving to next lesson!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf Course2 Lesson1 Quiz]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/30/tealeaf-course2-lesson1-quiz/"/>
    <updated>2015-01-30T16:13:42+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/30/tealeaf-course2-lesson1-quiz</id>
    <content type="html"><![CDATA[<p>Answer these quizzes, then updated after watching solution.</p>

<h2>1. Why do they call it a relational database?</h2>

<p>  Relational database can store the relationship between data and data. For example, a table store customer&rsquo;s info, and a table store consuming record, these two table can be associated with another table, to establish the customer&rsquo;s consuming history. There are relationships between data and data in relational database. ex. sqlite, MySQL, PostgreSQL ect.</p>

<blockquote><p>the tables within the database are associated with each other. This association can be created with primary/foreign keys and various syntax.</p></blockquote>

<h2>2. What is SQL?</h2>

<p>  SQL(Structured Query Language), it&rsquo;s domain specific language to manipulate database.</p>

<!--more-->


<h2>3. There are two predominant views into a relational database. What are they, and how are they different?</h2>

<p>  There are two associations concepts in relational database:</p>

<ul>
<li><p>1:M
<strong>One to Many</strong> makes target object can associate with many other objects, like one customer can have many consuming records, we can track the customer&rsquo;s consuming history with this association or we can track the record is generated by which customer.</p></li>
<li><p>M:M
<strong>Many to Many</strong> makes target objects can associate with many other objects, like posts can be assign to many categories, and category can assign to many poasts. We also can track target post or target category is assigned to which one.</p></li>
</ul>


<blockquote><p>The two predominant views are the data and schema views.
Data view displays like a spreadsheet, with the table columns at the top and rows of data per each object instance.
A schema view shows us the column names and the value type of each column.</p></blockquote>

<h2>4. In a table, what do we call the column that serves as the main identifier for a row of data? We&rsquo;re looking for the general database term, not the column name.</h2>

<p>  Attributes. Column indicate that what the row values mean.</p>

<blockquote><p>We call this the &ldquo;primary key&rdquo;.</p></blockquote>

<h2>5. What is a foreign key, and how is it used?</h2>

<p>  Every row data in a table is included a <strong>primary key</strong>. If we want to associated with other table, we need this primary key to store which row data we wanna to be connected with this one. The store primary key value&rsquo;s column is called <strong>foreign key</strong>.</p>

<blockquote><p>A foreign key is the identifier that connects an association with the models involved. The foreign key is always on the &ldquo;many&rdquo; side and is always in an integer type.</p></blockquote>

<h2>6. At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.</h2>

<p>  ActiveRecord is mapping the data operation in tables. It substitutes SQL operation and using migration files to define &amp; operate table column.</p>

<blockquote><p>ActiveRecord is a way to access the database. A database table is related to a class. An object of that class is created as a row in the table. This object can have different attribute values shown as the columns in the table. We can create, retrieve, update, and delete the object instances by altering the database table.</p></blockquote>

<h2>7. If there&rsquo;s an ActiveRecord model called &ldquo;CrazyMonkey&rdquo;, what should the table name be?</h2>

<p>  If I&rsquo;m confused with this, I can use <code>rails console</code> mode, to run</p>

<pre><code>"CrazyMonkey".tableize
</code></pre>

<p>  and the answer should be <code>crazy_monkeys</code>.</p>

<h2>8. If I&rsquo;m building a 1:M association between Project and Issue, what will the model associations and foreign key be?</h2>

<p>  in model files
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Project ActiveRecord::Base
</span><span class='line'>  has_many :issues
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;class Issue ActiveRecord::Base
</span><span class='line'>  belongs_to :project
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>  in migration files
<code>
class CreateIssue ActiveRecord:Migration
  def change
    create_table :issues do |t|
      t.integer :project_id
    end
  end
</code></p>

<h2>9. Given this code</h2>

<pre><code>class Zoo &lt; ActiveRecord::Base
  has_many :animals
end
</code></pre>

<ul>
<li>What do you expect the other model to be and what does database schema look like?</li>
</ul>


<p>  There should be antoher class named &ldquo;Animal&rdquo;, and it belongs to Zoo. Animal should at least have name, and a foriegn key to set to zoo id.</p>

<pre><code>class Animal &lt; ActiveRecord::Base
  belongs_to :zoo
end
</code></pre>

<pre><code>class CreateAnimal ActiveRecord:Migration
  def change
    create_table :animals do |t|
      t.integer :zoo_id
    end
  end
</code></pre>

<ul>
<li>What are the methods that are now available to a zoo to call related to animals?</li>
</ul>


<pre><code class="``">  zoo.animals
</code></pre>

<ul>
<li>How do I create an animal called &ldquo;jumpster&rdquo; in a zoo called &ldquo;San Diego Zoo&rdquo;?</li>
</ul>


<p>  If in <code>rails console</code> mode:</p>

<pre><code class="``">  $ zoo = Zoo.create(name: "San Diego Zoo")
  $ animal = Animal.create(name: "jumpster")
  $ zoo.animals &lt;&lt; animal  
</code></pre>

<h2>10. What is mass assignment? What&rsquo;s the non-mass assignment way of setting values?</h2>

<p>With mass assignment, we can do</p>

<p><code>assumption fields: [title, body]</code>
<code>
@post = Post.new(params[:post])
</code></p>

<p>without mass assignment, we need to do this
<code>
@post = Post.new
post.title = "post title"
post.body = "post body"
</code></p>

<h2>11. What does this code do? <code>Animal.first</code></h2>

<p>Query the first data in table <code>Animal</code>.</p>

<blockquote><p>This will return the first row of data for the first Animal instance object in the animals table.</p></blockquote>

<h2>12. If I have a table called &ldquo;animals&rdquo; with columns called &ldquo;name&rdquo;, and a model called <code>Animal</code>, how do I instantiate an animal object with name set to &ldquo;Joe&rdquo;. Which methods makes sure it saves to the database?</h2>

<p>This will make sure it saves to database
<code>
Animal.create(name: "Joe")
</code></p>

<p>And this will work too
<code>
animal = Animal.new(name: "Joe")
animal.save
</code></p>

<h2>13. How does a M:M association work at the database level?</h2>

<p>  There is a join table between two relational tables, and it needs these two tables row data primary key to be its foreign key. For example, there is a join table called post_categories, and it stores two foriegn key named: post_id and category_id.</p>

<blockquote><p>On the database level of a M:M association, we use a join table to support it. Both of the primary models will each have a 1:M association with the join table.
By using the has_many :through technique, we are able to create an indirect M:M association with the two primary models.</p></blockquote>

<h2>14. What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?</h2>

<ul>
<li><p>has_and_belongs_to_many
Chris metioned that this method is deprecated. If you don&rsquo;t need to operate the join table, this method is easy to set up association between two tables. And it&rsquo;s doing a more implicit way.</p></li>
<li><p>has_many through:
You have to define has_many relation with join table, also define has_many through: realtion to both target table and join table. This explicit the way to connect target table and join table. It&rsquo;s much easier to understand all realtionship between tables.</p></li>
</ul>


<blockquote><p>has_many :through requires an explicit join model and a join table, but it is more flexible and we can add additional attributes to the join table.
has_and_belongs_to_many doesn&rsquo;t require a join model or a join table, but it is less flexible and we cannot add additional attributes to the join table.</p></blockquote>

<h2>15. Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?</h2>

<pre><code class="ruby User.rb">class User &lt; ActiveRecord::Base
  has_many :user_groups
  has_many :groups, through: user_groups
end
</code></pre>

<pre><code class="ruby Group.rb">class Group &lt; ActiveRecord::Base
  has_many :user_groups
  has_many :users, through: :user_groups
end
</code></pre>

<pre><code class="ruby UserGroup.rb">class UserGroup &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :group
end
</code></pre>

<pre><code class="ruby create_user_groups.rb">class CreateUserGroups &lt; ActiveRecord::Migration
  def change
    create_table :post_categories do |t|
      t.integer :user_id
      t.integer :group_id
    end
  end
end
</code></pre>
]]></content>
  </entry>
  
</feed>
