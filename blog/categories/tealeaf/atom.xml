<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tealeaf | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/tealeaf/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-05-06T11:53:23+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week6 (2/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6-2-slash-2/"/>
    <updated>2015-05-06T09:50:50+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6-2-slash-2</id>
    <content type="html"><![CDATA[<p>These week we have two main part: <a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> for uploading images as an admin, <a href="http://stripe.com">Stripe</a> for payments</p>

<p>The first part about CarrierWave for uploading images as an Admin is <a href="http://tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6/">here</a>.</p>

<h1>Stripe for Payments</h1>

<p>Two articles about payments:</p>

<ul>
<li><a href="https://signalvnoise.com/posts/753-ask-37signals-how-do-you-process-credit-cards">How Do You Process Credit Card</a> by Jason Fried</li>
</ul>


<blockquote><p>The one thing we’re often surprised by is how many accounts have charge issues so it’s important to really think about the error handling and customer experience issues related to declined cards.</p></blockquote>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard">Payment Card Industry Data Security Standard by wiki</a></li>
</ul>


<h3>Stripe &amp; Figaro</h3>

<pre><code>gem 'stripe'
gem 'figaro'
</code></pre>

<p><code>$ figaro install</code></p>

<p>Use Figaro to set Environment variables, Do Not hard code it!!</p>

<pre><code>#config/application.yaml
test:
  STRIPE_SECRET_KEY: sk_test_xxxxxxxxx
  STRIPE_PUBLISHABLE_KEY: pk_test_xxxxxxxxxx

development:
  STRIPE_SECRET_KEY: sk_test_xxxxxxx
  STRIPE_PUBLISHABLE_KEY: pk_test_xxxxxxx

production:
  STRIPE_SECRET_KEY: sk_live_xxxxxx
  STRIPE_PUBLISHABLE_KEY: pk_live_xxxxxxxx
</code></pre>

<p>I also add this file <code>config/initailizers/figaro.rb</code></p>

<pre><code>Figaro.require_keys("STRIPE_SECRET_KEY", "STRIPE_PUBLISHABLE_KEY")
</code></pre>

<p>It&rsquo;s convenient to check if you forget to set Environment variables on deploy machine(ex. Circle CI or Heroku).</p>

<p>Figaro also provide a way to set Heroku ENV.</p>

<p><code>$ figaro heroku:set -e production</code></p>

<h3>Stripe Custom Form</h3>

<ol>
<li>Setting form view</li>
</ol>


<p>&#8220;`</p>

<script type="text/javascript" src="https://js.stripe.com/v2/"></script>




<script type="text/javascript">
Stripe.setPublishableKey("#{ENV['STRIPE_PUBLISHABLE_KEY']}");
</script>


<p>= javascript_include_tag &lsquo;payment&rsquo;</p>

<pre><code>
&gt; When deploy to Heroku, I got this error `Failed to load resource: the server responded with a status of 404 (Not Found)`

&gt; This is becuase assets pipeline, add this to the file
</code></pre>

<p>Rails.application.config.assets.precompile += [&lsquo;payment.js&rsquo;]
&#8220;`</p>

<p>Key Points:</p>

<ul>
<li>use <code>for</code> and <code>id</code> to connect label and input</li>
<li><code>data-stripe = "number"</code> and <code>data-stripe="cvc"</code></li>
<li><code>data: { stripe: "exp-yaer"}</code> and <code>data: { stripe: "exp-month"}</code></li>
</ul>


<p>Attributes of <code>data-stripe</code> is for Stripe to know credit infomation.</p>

<p>Then in our custom form:</p>

<pre><code class="haml">%section.register.container
  .row
    .col-sm-10.col-sm-offset-1
      = bootstrap_form_for @user, layout: :horizontal, html: {id: 'payment-form'} do |f|
        %header
          %h1 Register
        %fieldset
          = f.email_field :email, label: "Email Address"
          = f.password_field :password
          = f.text_field :full_name, label: 'Full Name'
          = hidden_field_tag :token, @invitation_token
        %fieldset.credit_card
          %span.payment-errors
          .form-group
            %label.control-label.col-sm-2(for="credit_card_number") Credit Card Number
            .col-sm-6
              %input.form-control(type="text" data-stripe="number" id="credit_card_number")
          .form-group
            %label.control-label.col-sm-2(for="security_code") Security Code
            .col-sm-6
              %input.form-control(type="text" data-stripe="cvc" id="security_code")
          .form-group
            %label.control-label.col-sm-2 Expiration
            .col-sm-3
              = select_month(Date.today, {add_month_numbers: true},  class: 'form-control', data: { stripe: "exp-month"})
            .col-sm-2
              = select_year(Date.today.year, {start_year: Date.today.year, end_year: Date.today.year + 4}, class: 'form-control', data: { stripe: "exp-year"} )
        %fieldset.actions.control-group.col-sm-offset-2
          .controls
            %input(type="submit" value="Sign Up" class="btn btn-default")
</code></pre>

<h3>Setting in Controller Action</h3>

<pre><code># Set your secret key: remember to change this to your live secret key in production
# See your keys here https://dashboard.stripe.com/account/apikeys
Stripe.api_key = "sk_test_yNosIrCvrAuVttjO60dxy7zy"

# Get the credit card details submitted by the form
token = params[:stripeToken]

# Create the charge on Stripe's servers - this will charge the user's card
begin
  charge = Stripe::Charge.create(
    :amount =&gt; 1000, # amount in cents, again
    :currency =&gt; "usd",
    :source =&gt; token,
    :description =&gt; "Example charge"
  )
rescue Stripe::CardError =&gt; e
  # The card has been declined
end
</code></pre>

<p>Now we click submit button, charge will be deliever to Stripe.</p>

<blockquote><p>Notice again, don&rsquo;t foget to set ENV on Circle CI or Heroku if you deploy code to there.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week6 (1/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6/"/>
    <updated>2015-05-06T08:57:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6</id>
    <content type="html"><![CDATA[<p>These week we have two main part: <a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> for uploading images as an admin, <a href="http://stripe.com">Stripe</a> for payments</p>

<h1>CarrierWave for uploading images as an Admin</h1>

<h3>Admin</h3>

<p>In order to controll user is a admin or not, the best practice is to build a admin its own self routes and controllers.</p>

<p>In <code>routes.rb</code></p>

<pre><code>namespace :admin do
  resources :todos, only: [:index, :destroy]
end
</code></pre>

<p>Then <code>rake routes</code>, we got</p>

<pre><code>admin_todos  admin/todos  admin/todos#index
</code></pre>

<p>Build the controller file in the path: <code>/controllers/admin/todos_controller.rb</code></p>

<pre><code>class Admin::TodosController &lt; ApplicationController
end
</code></pre>

<blockquote><p>It&rsquo;s aother rails convention for the path <code>/controllers/admin/</code> and class name <code>Admin::</code>.</p></blockquote>

<p>Then add <code>admin</code> column to migration</p>

<p><code>$ rails g migration add_admin_to_users</code></p>

<pre><code>add_column :users, :admin, :boolean
</code></pre>

<p>Rails will create a method for all boolean attributes: <code>admin?</code></p>

<h3>Secure Access for different roles</h3>

<p>Next, we can create a <code>AdminController</code> for all other controllers belongs to Admin.</p>

<pre><code>class AdminController &lt; ApplicationController
  before_filter :ensure_admin

  def ensure_admin
    if !current_user.admin?
      #do something
    end
  end
end
</code></pre>

<p>Then other controllers belong to Admin could be like this:</p>

<pre><code>class Admin::TodoController &lt; AdminController
  def index
    @todo = Todo.all
  end
end
</code></pre>

<h3>CarrierWave upload images to AWS S3</h3>

<p>Install gem</p>

<pre><code>gem 'carrierwave'
gem 'mini_magick'
</code></pre>

<p>Add column to stored migration, for example: videos</p>

<p><code>$rails migration add_large_cover_to_videos</code></p>

<pre><code>add_column :videos, :large_cover, :string
</code></pre>

<p>In <code>models/video.rb</code></p>

<pre><code>mount_uploader :large_cover, LargeCoverUploader
</code></pre>

<p>Create <code>app/uploaders/large_cover_uploader.rb</code>, and use <code>mini_magick to resize image</code></p>

<pre><code>class LargeCoverUploader &lt; CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick
  process :resize_to_fill =&gt; [665, 375]
end
</code></pre>

<p>Finally, set CarrierWave for AWS S3, in <code>initializers/carrier_wave.rb</code></p>

<pre><code>CarrierWave.configure do |config|
  config.fog_provider = 'fog/aws'                        # required
  config.fog_credentials = {
    provider:              'AWS',                        # required
    aws_access_key_id:     'xxx',                        # required
    aws_secret_access_key: 'yyy',                        # required
    region:                'eu-west-1',                  # optional, defaults to 'us-east-1'
    host:                  's3.example.com',             # optional, defaults to nil
    endpoint:              'https://s3.example.com:8080' # optional, defaults to nil
  }
  config.fog_directory  = 'name_of_directory'                          # required
  config.fog_public     = false                                        # optional, defaults to true
  config.fog_attributes = { 'Cache-Control' =&gt; "max-age=#{365.day.to_i}" } # optional, defaults to {}
end
</code></pre>

<p>Unfortunately, my AWS account has been suspended, so I change the code to store at local</p>

<pre><code>CarrierWave.configure do |config|
  if Rails.env.staging? || Rails.env.production?
    config.storage = :file
    config.enable_processing = true
  else
    config.storage = :file
    config.enable_processing = Rails.env.development?
  end
end
</code></pre>

<p>This code also show that if you want to deal with different environment for <code>product</code> or <code>development</code></p>

<blockquote><p>Usually, only upload small size files direct through web page, we can use other AWS S3 client to upload big file.</p></blockquote>

<p>Another tip here, don&rsquo;t forget to add new attributes to <code>params.require</code>, otherwise upload will be failed.</p>

<pre><code>params.require(:video).permit(:title, :description, :category_id, :large_cover, :small_cover, :video_url)
</code></pre>

<h3>RSpec Feature Test</h3>

<p>Key Points:</p>

<ul>
<li>attach_file</li>
<li>have_selector</li>
</ul>


<pre><code>feature 'Admin adds new video' do
  scenario 'Admin successfully adds a new video' do
    admin = Fabricate(:admin)
    dramas = Fabricate(:category, title: 'Dramas')

    sign_in(admin)
    visit new_admin_video_path

    fill_in 'Title', with: 'Monk'
    select 'Dramas', from: 'Category'
    fill_in 'Description', with: 'SF detective'
    attach_file 'Large cover', 'spec/support/uploads/monk_large.jpg'
    attach_file 'Small cover', 'spec/support/uploads/monk.jpg'
    fill_in 'Video URL', with: 'http://www.example.com/video.mp4'
    click_button 'Add Video'

    sign_out
    sign_in

    visit video_path(Video.first)
    expect(page).to have_selector("img[src='/uploads/monk_large.jpg']")
    expect(page).to have_selector("a[href='http://www.example.com/video.mp4']")
  end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week5 (2/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5-2-slash-2/"/>
    <updated>2015-04-09T15:58:27+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5-2-slash-2</id>
    <content type="html"><![CDATA[<h3>Continuous Integration(CI) and Continous Delivery(CD)</h3>

<p>This part is super exciting so I decide to make it a individual post.</p>

<p>Continuous Integration(CI) and Continous Delivery(CD) are two of most important part in automation development. There are plenty of innovation tools, but I think the work flow is the key to understand.</p>

<ol>
<li>Pull the latest code from GitHub.</li>
<li>Create a new feature branch and develop.</li>
<li>Finish development and put to a feature named branch on GitHub.</li>
<li>Create a PR from this branch to <code>staging</code> branch.</li>
<li>Wait CI test for staging branch.</li>
<li>CI automatically deploy from staging branch to <code>staging server</code>.</li>
<li>Manual test on staging server.</li>
<li>Create PR from staging to <code>master</code> branch.</li>
<li>trigger CI for master branch and automatically deploy to <code>production server</code>.</li>
</ol>


<h3>Setting CI and CD</h3>

<p>Here we use <a href="https://circleci.com">Circle CI</a> for CI and CD. There is also well known service called <a href="https://travis-ci.org/">Travis CI</a>.</p>

<ul>
<li>Create a <code>staging</code> branch.</li>
<li>Follow Circle CI project setting.</li>
<li>You may need Heroku API key and SSH.</li>
<li>[Key] Create a <code>circle.yml</code> in the root of project, adjust <code>production_app_name</code> and <code>staging_app_name</code>.</li>
</ul>


<pre><code>machine:
  ruby:
    version: 2.1.5
deployment:
  production:
    branch: master
    commands:
      - heroku maintenance:on --app production_app_name
      - heroku pg:backups capture --app production_app_name
      - git push git@heroku.com:production_app_name.git $CIRCLE_SHA1:refs/heads/master
      - heroku run rake db:migrate --app production_app_name
      - heroku maintenance:off --app production_app_name
  staging:
    branch: staging
    commands:
      - heroku maintenance:on --app staging_app_name
      - git push git@heroku.com:staging_app_name.git $CIRCLE_SHA1:refs/heads/master
      - heroku run rake db:migrate --app staging_app_name
      - heroku maintenance:off --app staging_app_name
</code></pre>

<p>I got an error when running Circle test: [counldn&rsquo;t find file &lsquo;bootstrap&rsquo;]</p>

<p>Solution: Rename file <code>stylesheets/application.css</code> to <code>stylesheets/application.css.scss</code>. And add Line to the file:</p>

<pre><code>@import 'bootstrap-sprockents'
@import 'bootstrap'
</code></pre>

<p>and remove line <code>*= require bootstrap</code>.</p>

<h3>Embeded Badget</h3>

<p>I aslo try to use badget in my homepage.</p>

<pre><code>%img(src="https://circleci.com/gh/tomohung/myflix.png?circle-token=a7c782deb0d0022335fa1f095e268bb44eb4cab8")
</code></pre>

<p>Then I can see this passing test badget.</p>

<p><img class="<a" src="href="https://circleci.com/gh/tomohung/myflix.png?circle-token=a7c782deb0d0022335fa1f095e268bb44eb4cab8">https://circleci.com/gh/tomohung/myflix.png?circle-token=a7c782deb0d0022335fa1f095e268bb44eb4cab8</a>&#8221;></p>

<h3>Slack ingegration with Github and Circle CI</h3>

<p>I failed to use <a href="http://ccmenu.org/">CCMenu</a> to have a notification. But I use <a href="https://slack.com/">Slack</a> to integrate GitHub and Circle CI, and that&rsquo;s why I said it&rsquo;s exciting!!</p>

<p>After setting done, the only thing I need to do is <code>git push origin staging</code> or <code>git push origin master</code>. I&rsquo;ll get notifications in Slack when Github got a push event, and Circle CI run the test and deployment in the same time. Surely I will also get a Circle CI result notification if test and deployment finished.</p>

<p>This is what a programmer should do!! Don&rsquo;t Repeat Yourself!! Bravo!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week5 (1/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5/"/>
    <updated>2015-04-09T14:39:06+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5</id>
    <content type="html"><![CDATA[<h3>Feature test for sending email</h3>

<p>Following by <a href="http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4/">previous week</a>, this week we have a feature test for sending email.</p>

<p>Install gem,</p>

<pre><code>$ gem 'capybara-email'
</code></pre>

<p>And added this line to <code>spec_helper.rb</code></p>

<pre><code>require 'capybara/email/rspec'
</code></pre>

<p>Then</p>

<pre><code>require 'spec_helper'

feature 'User resets password' do
  scenario 'user successfully resets the password' do
    clear_emails

    user = Fabricate(:user)
    visit sign_in_path
    click_link 'Forgot Password?'

    fill_in 'Email Address', with: user.email
    click_button 'Send Email'

    open_email(user.email)
    current_email.click_link("Reset Password")

    fill_in 'New Password', with: 'new_password'
    click_button 'Reset Password'

    fill_in 'Email Address', with: user.email
    fill_in 'Password', with: 'new_password'
    click_button 'Sign in'
    expect(page).to have_content("Welcome, #{user.full_name}")
  end
end
</code></pre>

<p>Especially notice for <code>open_email</code>, <code>current_email</code> functions are offered by <code>capybara-email</code> gem.</p>

<h3>Invite Friend and Registeration</h3>

<p>We also have a work on inviting friends through email, the key point here is how to use a secure <code>token</code> to tracking data.</p>

<ul>
<li>create an invitations data, including inviter, recipient email, name, and <code>token</code>.</li>
<li><p>when user get the email, following the link provided to server, page will direct to the register page with existing data stored with this token.</p>

<p>And set the routes for path</p></li>
</ul>


<pre><code>get 'register/:token', to: 'users#new_with_invitation_token'
</code></pre>

<ul>
<li>we can have a hidden data in the register form for new#users to use.</li>
</ul>


<pre><code>= hidden_field_tag :token, @invitation_token
</code></pre>

<p>we don&rsquo;t use form_for element, becuase this hidden attribute does not belong to backend modeled form.</p>

<h3>Concerns</h3>

<p>To Dry our code, we can use <code>concern</code> with <code>module</code>. Here is a <a href="https://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">post by DHH</a> why we should do this.</p>

<p>We can merge the same function feature into concern file. For example: <code>Tokenable</code></p>

<pre><code>#/lib/tokenable.rb
module Tokenable
  extend ActiveSupport::Concern
  included do
    before_create :generate_token
  end

  private
  def generate_token
    self.token = SecureRandom.urlsafe_base64
  end
end
</code></pre>

<p>Then add to model file</p>

<pre><code>require 'tokenable'

class User &lt; ActiveRecord::Base
  include Tokenable
  ...
end
</code></pre>

<p>I prefer to specify require file name, or we can use <a href="http://stackoverflow.com/questions/19098663/auto-loading-lib-files-in-rails-4">auto loading library files</a>.</p>

<h3>Email Service Providers</h3>

<p>Since we have test email sending on ENV:development and EVN:test, now we have test it in the real world. That&rsquo;s why we need a real email service provider. Google has it but with many restriction, Tealeaf recommend <code>Mailgun</code> or <code>Postmark</code>. Here we have a taste for `Mailgun&#8217;.</p>

<p>To setting <code>config/environments/production.rb</code>, add these lines:</p>

<pre><code>config.action_mailer.default_url_options = { :host =&gt; "tomo-myflix.herokuapp.com" }
  config.action_mailer.smtp_settings = {
    :port           =&gt; ENV['MAILGUN_SMTP_PORT'],
    :address        =&gt; ENV['MAILGUN_SMTP_SERVER'],
    :user_name      =&gt; ENV['MAILGUN_SMTP_LOGIN'],
    :password       =&gt; ENV['MAILGUN_SMTP_PASSWORD'],
    :domain         =&gt; 'tomo-myflix.herokuapp.com',
    :authentication =&gt; :plain,
  }
  config.action_mailer.delivery_method = :smtp
</code></pre>

<p><code>tomo-myflix.herokuapp.com</code> is my app name on Heroku. And ENV about Mailgun are maintained by Heroku.</p>

<p>I aslo can use this command to check <code>Heroku configurations</code>.</p>

<pre><code>$ heroku config
</code></pre>

<p>Then push it to heroku and test for a real email address, it works!!</p>

<h3>Background Jobs</h3>

<p>Sometimes, some actions do not need to be synchrous, like sending email, we don&rsquo;t need to wait email sending action completed. That&rsquo;s why we need to use a background job to do sending email to speed up the flow.</p>

<p><code>Sidekiq</code> and <code>Resque</code> are some of this concept product. And Tealeaf recommend to use <a href="https://github.com/mperham/sidekiq/wiki">Sidekiq</a>.</p>

<p>Install gem Sidekiq</p>

<pre><code>gem 'sidekiq'
</code></pre>

<p>Only a tiny change for using it by delay method</p>

<pre><code>AppMailer.delay.notify_on_new_todo(current_user, @todo) # new 
AppMailer.notify_on_new_todo(current_user, @todo).deliver #older one
</code></pre>

<p>Add this line in <code>spec/spec_helper.rb</code></p>

<pre><code>require 'sidekiq/testing/inline'
</code></pre>

<p>Here we setup sidekiq, but we still need start <code>Redis</code> server:</p>

<pre><code>$ brew install redis
$ redis-server /usr/local/etc/redis.conf
</code></pre>

<p>And this start sidekiq with another terminal:</p>

<pre><code>$ bundle exec sidekiq
</code></pre>

<p>So far, this makes <code>local</code> works fine with <code>sidekiq</code> for background jobs. If we want to use background jobs in ENV:production, Heroku take charges if dyno is more than 1, or try <a href="https://coderwall.com/p/fprnhg/free-background-jobs-on-heroku">this way to simulate</a></p>

<p>I have not implemented this yet, but I&rsquo;ll try it later.</p>

<p>There is also <a href="https://devcenter.heroku.com/articles/procfile#deploying-to-heroku">an article talking about Procfile and Foreman</a>.</p>

<p>If sidekiq version >= 3.0, you might also run this line
<code>
heroku config:set REDIS_PROVIDER=REDISTOGO_URL
</code></p>

<h3>Monitor Production Error</h3>

<p>Here we have a try for <a href="https://getsentry.com/welcome/">Sentry</a>.</p>

<p>Tracking errors is also a key for automation deployment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week4]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4/"/>
    <updated>2015-04-07T13:11:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4</id>
    <content type="html"><![CDATA[<h3>Three kinds of BDD</h3>

<p>In week 4 beginning, we got a brief intro for 3 kinds of BDD:</p>

<ul>
<li><p>meet in the middle</p>

<p>I think this should be the popular one for modern development. The front-end engineer build the pages from mockups, then back-end developer connect UI with controllers and models.</p></li>
<li><p>inside out</p>

<p>It develops from models to controllers till views and integrations. It&rsquo;s hard to decide what models you really need in the beginning.</p></li>
<li><p>outside in</p>

<p>It devlops from integrations to controllers and models. It start from a big vision, and close to what user&rsquo;s need. But for developer, it&rsquo;s hard to code from this big vision, especially for integration test in the development beginning.</p></li>
</ul>


<h3>Self Referential Associations</h3>

<p>We can use <strong>self referential association</strong> to let user track other users. For example:</p>

<pre><code># t.integer :follower_id, :leader_id
class Relationship &lt; ActiveRecord::Base
  belongs_to :follower, class_name: 'User'
  belongs_to :leader, class_name: 'User'
end
</code></pre>

<p>Then, model <code>User</code> can have these virtual attributes:</p>

<pre><code>  has_many :following_relationships, class_name: 'Relationship', foreign_key: :follower_id
  has_many :leading_relationships, class_name: 'Relationship', foreign_key: :leader_id
</code></pre>

<h3>Sending Emails</h3>

<p>Rails also offer <code>ActionMailer</code> for sending emails.</p>

<ul>
<li>create files in <code>app/mailers/app_mailer.rb</code></li>
</ul>


<pre><code>class AppMailer &lt; ActionMailer::Base

  def send_welcome_email(user)
    @user = user
    mail to: user.email, from: 'info@myflix.com', subject: 'Welcome to Myflix'
  end
end
</code></pre>

<ul>
<li><code>View</code> template in <code>app/views/app_mailers/send_welcome_email</code>:</li>
</ul>


<pre><code>%html(lang='en-US')
  %body
    %p Welcome to MyFlix, #{@user.full_name}
</code></pre>

<ul>
<li>Config for <code>config/environments/development.rb</code></li>
</ul>


<pre><code>config.action_mailer.delivery_method = :letter_opener
</code></pre>

<p>And</p>

<pre><code>group :development do
  gem 'letter-opener'
end
</code></pre>

<blockquote><p>This is only for <code>development</code> setting, we also need to set for <code>test</code> and <code>production</code> independent</p></blockquote>

<h3>Handling Sensitive Account Info</h3>

<p>It&rsquo;s dangerous to upload config setting file to github or other public storage, there is someone update AWS key to GitHub and got a unbelievable credit bill.</p>

<p>Use <code>ENV</code> to protect secret data, we can use gem <code>Figaro</code>.
<a href="https://github.com/laserlemon/figaro">Figara</a> is the simplest way to keep our key value safe.</p>

<p>There are two posts talking about this topic:</p>

<ol>
<li><a href="http://railsapps.github.io/rails-environment-variables.html">Rails Environment Variables</a></li>
<li><a href="https://devcenter.heroku.com/articles/config-vars">Configuration and config Vars</a></li>
</ol>


<blockquote><p>Update: Tealeaf also have a post about <a href="http://www.gotealeaf.com/blog/managing-environment-configuration-variables-in-rails">Managing Environment Configuration Variables in Rails</a></p></blockquote>

<h3>Test Email sending</h3>

<p>Remember to clear email deliveries before test:</p>

<pre><code>before { ActionMailer::Base.deliveries.clear }
</code></pre>

<p>Then we can validate email in the test by this</p>

<pre><code>post :create
expect(ActionMailer::Base.deliveries.last.to).to eq([user_attributes["email"]])
# expect(ActionMailer::Base.deliveries.last.body).to include(user_attributes["full_name"])
</code></pre>

<h3>Update database, use rake tasks</h3>

<p>An advice from TA Tomtomecek, I update existing data in model User, and he suggest me to use <a href="http://guides.rubyonrails.org/command_line.html#custom-rake-tasks">custom rake tasks</a> to do that. I&rsquo;ve not taste that yet, just leave a memo here to remember.</p>
]]></content>
  </entry>
  
</feed>
