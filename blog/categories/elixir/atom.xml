<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elixir | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2016-08-17T21:51:55+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With Phoenix - 4. Phoenix File/Folder]]></title>
    <link href="http://www.tomohung.com/blog/2016/08/17/getting-started-with-phoenix-4-phoenix-file-slash-folder/"/>
    <updated>2016-08-17T21:29:15+08:00</updated>
    <id>http://www.tomohung.com/blog/2016/08/17/getting-started-with-phoenix-4-phoenix-file-slash-folder</id>
    <content type="html"><![CDATA[<p>在上一篇文章順利的看到首頁了，現在先等等，看一下剛剛我們利用<code>mix phoenix.new</code>所建立出來的資料夾結構</p>

<table>
<thead>
<tr>
<th>File/Folder   </th>
<th> Purpose  </th>
</tr>
</thead>
<tbody>
<tr>
<td> config/  </td>
<td> 就是設定檔，包含config.exs和各個環境變數要用的設定檔，如dev.exs就是預設開發用的設定檔  </td>
</tr>
<tr>
<td> deps/  </td>
<td> 利用mix安裝的套件都會放在這  </td>
</tr>
<tr>
<td> lib/  </td>
<td> routes檔案也是放在這裡。如果修改config/或是lib/下的檔案，server都必需重新啟動，貼心的是Phoenix會提示你  </td>
</tr>
<tr>
<td> test/  </td>
<td> 好測試，不寫嗎  </td>
</tr>
<tr>
<td> web/  </td>
<td> 類似Rails中的app/資料夾，內容都是放在這裡  </td>
</tr>
<tr>
<td> web/channels  </td>
<td> Phoenix的招牌WebSocket實作，不過目前我們還用不到它  </td>
</tr>
<tr>
<td> web/controllers  </td>
<td> 所有流程的中心點，MVC中的C  </td>
</tr>
<tr>
<td> web/models  </td>
<td> model是單純的資料結構，可以和Ecto合併使用</td>
</tr>
<tr>
<td> web/static  </td>
<td> 存放assets  </td>
</tr>
<tr>
<td> web/templates  </td>
<td> html內容存放，這邊使用的是html.eex格式，也就是embed elixir format，可以像erb一樣把elixir變數代進去使用  </td>
</tr>
<tr>
<td> web/views  </td>
<td> 在Phoenix的定義下，view是module，而template只是module下的function。我自己是把它理解成在view module下可以放顯示頁面邏輯的方法，類似Rails中的Helper </td>
</tr>
<tr>
<td> brunch-config.js  </td>
<td> Phoenix預設使用Brunch做為前端管理套件  </td>
</tr>
<tr>
<td> mix.exs  </td>
<td> 就像是Rails中的Gemfile  </td>
</tr>
<tr>
<td> mix.lock  </td>
<td> 就像是Rails中的Gemfile.lock  </td>
</tr>
<tr>
<td> package.json  </td>
<td> npm管理套件設定檔  </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Phoenix - 3. Create a New Phoenix Project]]></title>
    <link href="http://www.tomohung.com/blog/2016/08/17/getting-started-with-phoenix-3-create-a-new-phoenix-project/"/>
    <updated>2016-08-17T20:59:48+08:00</updated>
    <id>http://www.tomohung.com/blog/2016/08/17/getting-started-with-phoenix-3-create-a-new-phoenix-project</id>
    <content type="html"><![CDATA[<h3>Create a new Phoenix project</h3>

<h4>Install Phoenix</h4>

<p>可以參考<a href="http://www.phoenixframework.org/docs/installation">Phoenix官網安裝方法</a>
另外我們要使用MySQL，所以也要記得安裝，網路上教學文章很多，這裡就跳過</p>

<h4>Create the Blog application</h4>

<p>打開終端機執行以下程式</p>

<pre><code>$ mix phoenix.new blog --datebase mysql
</code></pre>

<p><code>--database mysql</code>是為了將預設資料庫PostgreSQL指定成MySQL。
而blog是我們專案的名稱</p>

<p>接下來會提示是否安裝相依套件
Fetch and Install dependencies? [Yn]</p>

<p>選擇Y之後，程式應該會自動執行這兩行</p>

<pre><code>$ mix deps.get
$ npm install
</code></pre>

<p>如果npm install沒安裝的話，前端套件會沒有，你看到的就是一個醜醜的網站，因為Phoenix已經預設幫你用了Bootstrap的css檔案，和一點點客製化的內容。</p>

<p>想要有完整的Bootstrap功能，包含Javascript，可以參考我另一篇文章<a href="">Phoenix with Bootstrap</a></p>

<p>接下來進入專案並且執行server</p>

<pre><code>$ cd blog
$ mix phoenix.server
</code></pre>

<p>Server運行起來後，打開瀏覽器輸入<code>localhost:4000</code>，你應該可以看到Phoenix的觀迎首頁</p>

<p><img class="<a" src="href="https://files.readme.io/dgQq2PC8SiyitRnHtf7A_welcome-to-phoenix.png">https://files.readme.io/dgQq2PC8SiyitRnHtf7A_welcome-to-phoenix.png</a>&#8221;></p>

<p>另外雖然還沒用到，但可以先建立資料庫</p>

<pre><code>$ mix ecto.create
</code></pre>

<p>如果出現錯誤的話，很有可能是帳號密碼錯了，可以到<code>config/dev.exs</code>修改</p>

<pre><code># Configure your database
config :blog, Blog.Repo,
  adapter: Ecto.Adapters.MySQL,
  username: "root",
  password: "",
  database: "blog_dev",
  hostname: "localhost",
  pool_size: 10
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Phoenix - 2. What Is Phoenix]]></title>
    <link href="http://www.tomohung.com/blog/2016/08/16/getting-started-with-phoenix-2-what-is-phoenix/"/>
    <updated>2016-08-16T21:33:57+08:00</updated>
    <id>http://www.tomohung.com/blog/2016/08/16/getting-started-with-phoenix-2-what-is-phoenix</id>
    <content type="html"><![CDATA[<h1>What is Phoenix?</h1>

<p>Phoenix是一套基於Elixir語言的網頁應用開發框架，主體為MVC架構，很多的概念其實都有從Rails借來的影子，所以如果你本身有Rails的基礎，要入門Phoenix其實不需要太多的時間。</p>

<p>Phoenix要強調的是，Rails所提供的高效開發，在Phoenix上你也能同樣體驗到，並且它能提供更好的表現。其它像是Channel（其實就是Rails 5所主打的ActionCable）</p>

<p>這篇剛好最近Phoenix的作者Chris McCord所發表<a href="https://dockyard.com/blog/2016/08/09/phoenix-channels-vs-rails-action-cable">Phoenix Channel和Rails ActionCable的比較(link)</a></p>

<p>另外這個同樣是McCord<a href="https://gist.github.com/omnibs/e5e72b31e6bd25caf39a">比較好幾個Framework Throughput的表現(link)</a></p>

<p>而在Rails的開發哲學中，最重要的兩項</p>

<ul>
<li><p>Don&rsquo;t Repeat Yourself
這點在以functional programming為基礎上的Elixir，我認為可以更容易的將方法抽象出來成為module，另外Elixir所提供的Concurrency，大幅降低要寫多執行程式的困難度</p></li>
<li><p>Convention Over Configuration
攝取大量Rails養份的Phoenix同樣遵循MVC架構，Restful Route設計，一些方便的generator，但又不像Rails那麼的Magic。譬如在Rails中的Controller Action，預設直接render對應到該action名稱的html檔案，但是在Phoenix中你必需明確的寫出要執行render的動作。</p></li>
</ul>


<p>另外在Rails中常常單數複數在不同的情況下，Rails會幫你自動轉換，譬如說你有一張Table是people，就能假設有一個model是person。但有時候單複數轉換其實會讓人覺得困擾，所以在Phoenix中你只需要多打幾個字，明確的指定名稱，就能避免這些問題。</p>

<p>在我個人少許Phoenix開發的經驗中，甚至某些情況下我會覺得Phoenix開發速度甚至是比Rails快，因為compile會提醒你語法錯誤，未使用的變數名稱，typo等，這些在Rails上都必需等到實際執行才發注意到的問題。
不過也必需承認以Ruby的生態圈來說，應該還是會興盛好一陣子，所以以學習資源或是工作機會來說，Rails是毫無疑問的大勝</p>

<p>不過我仍然相信在學習Phoenix的過程中會得到一些在Rails上看不到的樂趣，讓我們繼續走下去:-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Phoenix - 1. Guide Assumptions]]></title>
    <link href="http://www.tomohung.com/blog/2016/08/16/getting-started-with-phoenix-1-guide-assumptions/"/>
    <updated>2016-08-16T21:16:55+08:00</updated>
    <id>http://www.tomohung.com/blog/2016/08/16/getting-started-with-phoenix-1-guide-assumptions</id>
    <content type="html"><![CDATA[<p>這份說明是參考Rails官網的Getting Started with Rails，以相同的架構和實作內容，來介紹Phoenix這個框架。如果你本身己經有了Rails的基礎，那麼你應該能跟著這個說明一起實作，體驗到Phoenix/Elixir與Rails/Ruby一些不同或相同的地方，希望你能在過程中得到些樂趣。</p>

<p>你需要先在電腦安裝以下元件:</p>

<ul>
<li>Elixir 1.3 或者以上（本文寫作時最新版本）</li>
<li>Erlang</li>
<li>Phoenix 1.2 或者以上（本文寫作時最新版本）</li>
<li>node.js</li>
<li>PostgreSQL（官方預設資料庫）, 但後面的範例我們還是使用Rails開發者比較熟悉的MySQL</li>
</ul>


<p>安裝方法可以參考<a href="http://www.phoenixframework.org/docs/installation">Phoenix官網</a></p>

<p>Phoenix是基於Elixir的網頁應用開發框架，所以對於Elixir有基本的認識會比較容易上手，我個人的經驗是官網的說明看完即可，OTP部份可以先暫時跳過（雖然這應該是Elixir/Erlang的菁華）。</p>

<p><a href="http://elixir-lang.org/getting-started/introduction.html">Elixir官網介紹</a></p>

<p>這一系列的文章除了架構上引用Rails官網的Getting started with Rails之外，實作的內容同時也參考了</p>

<ul>
<li><a href="http://www.phoenixframework.org/">Phoenix Official website</a></li>
<li><a href="https://pragprog.com/book/phoenix/programming-phoenix">Programming Phoenix</a></li>
</ul>


<p>如果真的要進行Phoenix的開發，Programming Phoenix這本書應該可以縮短很多學習時間，我個人非常推薦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phoenix With Bootstrap]]></title>
    <link href="http://www.tomohung.com/blog/2016/06/24/phoenix-with-bootstrap/"/>
    <updated>2016-06-24T21:50:28+08:00</updated>
    <id>http://www.tomohung.com/blog/2016/06/24/phoenix-with-bootstrap</id>
    <content type="html"><![CDATA[<p>最近終於真正開始用Phoenix來開發，對於一個前端近乎白痴的人來說，起手式當然要來個匯入Bootstrap才行。</p>

<p>原本以為Phoenix內建就有引入Bootstrap，但使用後才發現原來它只匯入了css，javascript和icon都必需另外處理。找了網路上相關的文章好像都弄的有一點複雜，但經過試誤法後其實蠻簡單的，記錄一下。</p>

<hr />

<p>建立新專案</p>

<pre><code>$ mix phoenix.new bootstrap_example
$ mix deps.get
$ mix phoenix.server
</code></pre>

<p>打開網頁到<code>localhost:4000</code>看看結果，很好，預設的首頁出來了。</p>

<p>再來就是測試javascript相關的原件</p>

<p>修改<code>web/template/page/index.html.eex</code></p>

<p>貼上Bootstrap官網的範例,順便把內容加上icon可以一起測試</p>

<p>&#8220;`</p>

<div>
  <!-- Nav tabs -->
  <ul class="nav nav-tabs" role="tablist">
    <li role="presentation" class="active"><a href="#home" aria-controls="home" role="tab" data-toggle="tab">Home</a></li>
    <li role="presentation"><a href="#profile" aria-controls="profile" role="tab" data-toggle="tab">Profile</a></li>
    <li role="presentation"><a href="#messages" aria-controls="messages" role="tab" data-toggle="tab">Messages</a></li>
  </ul>

  <!-- Tab panes -->
  <div class="tab-content">
    <div role="tabpanel" class="tab-pane active" id="home"><span class="glyphicon glyphicon-home"></span></div>
      <div role="tabpanel" class="tab-pane" id="profile"><span class="glyphicon glyphicon-th-list"></span></div>
      <div role="tabpanel" class="tab-pane" id="messages"><span class="glyphicon glyphicon-file"></span></div>
  </div>

</div>


<pre><code>
Phoenix會自動幫我們更新內容
更新一下瀏覽器，會看到tab list，但是點了之後下方內容不會更新，因為javascript並沒有匯入。

其實Phoenix已經幫我們鋪好路了，來看看設定檔`brunch.config.js`
</code></pre>

<p>exports.config = {
  // See <a href="http://brunch.io/#documentation">http://brunch.io/#documentation</a> for docs.
  files: {
    javascripts: {
      joinTo: &ldquo;js/app.js&rdquo;,</p>

<pre><code>  //
  // To change the order of concatenation of files, explicitly mention here
  // https://github.com/brunch/brunch/tree/master/docs#concatenation
  //  order: {
  //    before: [
  //     "web/static/vendor/js/jquery-2.1.1.js",
  //     "web/static/vendor/js/bootstrap.min.js"
  //   ]
  // }
},
</code></pre>

<p>&hellip;&hellip;..
&#8220;`</p>

<p>把</p>

<pre><code>      order: {
        before: [
           "web/static/vendor/js/jquery-2.1.1.js",
           "web/static/vendor/js/bootstrap.min.js"
        ]
      }
</code></pre>

<p>解除掉,記得前一行的<code>joinTo: "js/app.js",</code>要加上逗號</p>

<p>好，這樣只是設定好要放的路徑，因為bootstrap.min.js相依jquery，所以要下載</p>

<p>既然我們已經用npm來管理套件了，用npm安裝最快囉</p>

<pre><code>$ npm install bootstrap
</code></pre>

<p>jQuery是相依套件npm會一起裝</p>

<p>copy jQuery library</p>

<pre><code>$ mkdir -p web/static/vendor/js/
$ cp  node_modules/jquery/dist/jquery.min.js web/static/vendor/js/jquery-2.1.1.js
</code></pre>

<p>copy Bootstrap library</p>

<pre><code>$ cp node_modules/bootstrap/dist/bootstrap.min.js web/static/vendor/js/bootstrap.min.js
</code></pre>

<p>順便連icon也一起處理</p>

<pre><code>$ mkdir web/static/assets/fonts
$ cp node_modules/bootstrap/dist/fonts/* web/static/assets/fonts/
</code></pre>

<p>大功告成！！！
回去瀏覽器看結果，切換不同的tab都會顯示不同的icon！！</p>

<p>Happy Phoenix!!</p>

<p>Demo: <a href="https://github.com/tomohung/phoenix_bootstrap_example">https://github.com/tomohung/phoenix_bootstrap_example</a></p>
]]></content>
  </entry>
  
</feed>
