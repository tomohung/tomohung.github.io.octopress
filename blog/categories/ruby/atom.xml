<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-05-06T20:01:42+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -6]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-6/"/>
    <updated>2015-05-03T22:06:44+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-6</id>
    <content type="html"><![CDATA[<h1>Chapter 6 - Use Symbols to Stand for Something</h1>

<p>String和Symbol很類似，都可以用來代表程式中的某個事物，但字串還多了可以被用來處理得到額外資訊，如果我們單純只是想要用來代表程式中的某個事物，用Symbol就可以了。</p>

<p>－ 同一個symbol永遠指著同一個物件，如</p>

<pre><code>a = :sym 
b= a
c = :sym
</code></pre>

<p>a, b, c都是相同的物件</p>

<p>但如果是string</p>

<pre><code>a = "sym"
b = "sym"
</code></pre>

<p><code>a.equal? b</code> 會回傳false</p>

<ul>
<li>所有Ruby的物件都有一個<code>public_methods</code>的函數，會回傳一個Array of symbols</li>
</ul>


<hr />

<p>簡單總結這章，Symbol因為有著unique, immutable這兩個特性，在用來當作代表性詞時就很實用，尤其是在應用hash時。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -5]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-5/"/>
    <updated>2015-05-03T20:38:53+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-5</id>
    <content type="html"><![CDATA[<h1>Chapter 5 - Find the Right String with Regular Expressions</h1>

<h2>Match One Character</h2>

<ul>
<li><p><code>.</code>可以match任何單一字元(except new line)</p></li>
<li><p>如果想match <code>.</code>本身，可以用<code>\</code>，如<code>3\.14</code></p></li>
<li><p>再譬如<code>.r\.</code>，可以match <code>Mr.</code> or <code>Dr.</code></p></li>
</ul>


<h2>Sets, Range, Alternatives</h2>

<h3>Sets</h3>

<ul>
<li><p>例如<code>[0123456789]</code>可以match任何一個數字字元</p></li>
<li><p><code>[pPaA][Mm]</code>可以match <code>Am</code> or <code>pm</code>.</p></li>
</ul>


<h3>Range</h3>

<ul>
<li><p><code>[0-9a-f]</code>可以match任何一個16進位的字元</p></li>
<li><p><code>\d</code>可以match任何一個數字字元，<code>\d\d</code>可以match 連續2個數字字元</p></li>
<li><p><code>\w</code>可以match任何一個字元，包含數字、底線等</p></li>
<li><p><code>\s</code>可以match任何一個空白字元，包含space, tab, new line.</p></li>
</ul>


<h3>Alternatives</h3>

<ul>
<li><p><code>|</code>是替換符號</p></li>
<li><p><code>A\.M\.|AM|P\.M\.|PM</code> 可以match <code>A.M.</code> or <code>AM</code>, or <code>P.M.</code> or <code>PM</code></p></li>
<li><p>處理時間格式可以用 <code>\d\d:\d\d (AM|PM)</code></p></li>
</ul>


<h2>Asterist <code>*</code></h2>

<ul>
<li><p>*星號可以表示在星號前的字元有任意個，包含零個。</p></li>
<li><p><code>AB*</code>，可以match <code>AB</code>, <code>A</code>, or <code>ABBBB</code></p></li>
<li><p>所以可以用 <code>[0–9]*</code>，match任何長度的數字</p></li>
</ul>


<h2>Regular Expression in Ruby</h2>

<ul>
<li><p>Format regex by slash: <code>/\d\d:\d\d (AM|PM)/</code></p></li>
<li><p>use operator <code>=~</code></p></li>
<li><p>所以在irb中跑這段</p></li>
</ul>


<pre><code>/\d\d:\d\d (AM|PM)/ =~ '10:24 PM'
</code></pre>

<p>回傳<code>0</code>，這表示字串有符合，從index = 0的位置開始。</p>

<ul>
<li><p>如果沒有符合，回傳<code>nil</code></p></li>
<li><p>可以變成case insensitive，加上i，如：<code>/AM/i =~ 'am'</code></p></li>
<li><p>也可以當參數傳入gsub來用</p></li>
</ul>


<pre><code>time_string.gsub!( /\d\d:\d\d (AM|PM)/, '**:** **' )
</code></pre>

<h2>Beginning and Ending</h2>

<ul>
<li><p>如果想要match字串的開頭用指定的文字，可以加入<code>\A</code>，如<code>\AIn the Beginning</code>，可以match字串前面為<code>In the Beginning</code></p></li>
<li><p>反過來如果想要match字串結尾用指定的文字，可以在尾巴加入<code>\z</code></p></li>
<li><p>如果想要match字串中<code>任何一行的開頭</code>有滿足，可以在條件字串前面加上<code>^</code></p></li>
<li><p>如果想要match字串中<code>任何一行的結尾</code>有滿足，可以在條件字串尾巴加上<code>$</code></p></li>
<li><p>如果想要進階同時match開頭跟結尾</p></li>
</ul>


<pre><code>/^Once upon a time.*happily ever after\.$/
</code></pre>

<p>這樣會失敗，因為<code>.</code>配合<code>*</code>雖然可以取代中間的任意數量的字元，但<code>.</code>不包含new line</p>

<pre><code>/^Once upon a time.*happily ever after\.$/m
</code></pre>

<p>在結尾加上<code>m</code>可以關閉<code>.</code>這個特性。</p>

<ul>
<li><code>?</code>的作用和<code>*</code>類似</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -4]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/26/eloquent-ruby-4/"/>
    <updated>2015-04-26T21:25:50+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/26/eloquent-ruby-4</id>
    <content type="html"><![CDATA[<h1>Chapter 4 - Take Advantage of Ruby’s Smart Strings</h1>

<p>string也和array, hash一樣有豐富的函式庫</p>

<p><a href="http://ruby-doc.org/core-2.2.2/String.html">http://ruby-doc.org/core-2.2.2/String.html</a></p>

<p>本章的結論就有Ruby提供的string非常好用，但壞處就是你要熟讀它。</p>

<hr />

<ul>
<li>double quoted string <code>"</code>, 比<code>'</code>還多了點用途</li>
</ul>


<p>像是在字串中加入變數時<code>#{}</code>，我常忘了用<code>'</code>就沒有這個效果。</p>

<pre><code>"Hi, #{user.name}."
</code></pre>

<ul>
<li>遇到很煩的字串含有一堆單引號雙引號，可以用</li>
</ul>


<pre><code>%q{"Oh No", "I can't tell what's the difference between 's' and "s"."}
</code></pre>

<p>像上面的小寫q，也有對應用大寫Q的，效果就是像要加入變數時用：</p>

<pre><code>%Q{ "Hi, I'm #{user.name}."}
</code></pre>

<ul>
<li>可以隨意斷行</li>
</ul>


<pre><code>multi_line_string = '你抓
不到我
'

another_multi_line_string = %q{ 你抓
不到我 }
</code></pre>

<p>如果不想有new line，可以用back slash</p>

<pre><code>multi_line_with_no_new_line = '你抓\
不到我'
</code></pre>

<ul>
<li>超長文字可以這樣寫</li>
</ul>


<pre><code>really_long_string = &lt;&lt;EOF
這是開頭
...
這是結尾
EOF
</code></pre>

<ul>
<li>chop &amp; chomp</li>
</ul>


<p>長的很像的兩個函數，用法天差地遠</p>

<pre><code>"a string with new line\n".chomp
</code></pre>

<p>會回傳 <code>a string with new line</code>，尾巴的new line會截掉。注意如果結尾含有多個new line，它只會截掉一個。</p>

<pre><code>"a string".chop
</code></pre>

<p>會回傳&#8221;a strin&#8221;，回傳截掉最後一個字的結果。</p>

<ul>
<li>sub &amp; gsub</li>
</ul>


<p>替換字串內容</p>

<pre><code>puts 'good good'.sub( 'good', 'bad' )
puts 'good good'.gsub( 'good', 'bad' )
</code></pre>

<p>得到的結果是</p>

<pre><code>'bad good'
'bad bad'
</code></pre>

<ul>
<li>split 分割字串</li>
</ul>


<pre><code>"one two three four five".split
</code></pre>

<p>回傳一個矩陣</p>

<pre><code>["one", "two", "three", "four", "five"]
</code></pre>

<p>或是分割參數</p>

<pre><code>"one;two;three;four;five".split(";")
</code></pre>

<p>回傳結果同上</p>

<ul>
<li>index 搜尋字串位置</li>
</ul>


<pre><code>"actions speak louder than words".index("speak") # return 8
</code></pre>

<ul>
<li>each_char, each_byte, each_line</li>
</ul>


<p>分別用迴圈回傳字元，位元數，每一行</p>

<ul>
<li>Ruby string is mutable</li>
</ul>


<p>mutable雖然翻譯是可變異，但我覺得它的意義和指標有點類似</p>

<pre><code>street_name = 'taiwan street'
road_name = street_name
street_name.upcase!
</code></pre>

<p>結果road_name = ?</p>

<p>注意像帶有!的函數常會有mutate的作用，所以上述結果road_name = &lsquo;TAIWAN STREET&rsquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -3]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-3/"/>
    <updated>2015-04-24T16:33:18+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-3</id>
    <content type="html"><![CDATA[<h1>Chapter 3 - Take Advantage of Ruby’s Smart Collections</h1>

<p>直接結論，Ruby的Array跟Hash提供很多方便的函數可用，可以參考</p>

<p><a href="http://ruby-doc.org/core-2.2.0/Array.html">Array</a>
<a href="http://ruby-doc.org/core-2.2.0/Hash.html">Hash</a></p>

<p>以下才是正文開始</p>

<hr />

<ul>
<li>如果是要初始化一個給值的陣列，如</li>
</ul>


<pre><code>love_words = ["Nancy", "I", "love", "you"]
</code></pre>

<p>也可以這樣產生
<code>
love_words = %w{ Nancy I love you }
</code></p>

<p>－ Ruby沒有指標，但是也有個類似指標的用法</p>

<pre><code>def echo_all( *args )
  args.each { |arg| puts arg }
end
</code></pre>

<p>*暗示arg其實是個陣列值，可以遞進來做陣列處理。</p>

<ul>
<li>對於hash，可以這樣用</li>
</ul>


<pre><code>run( {speed: :fast, tools: :train} )
</code></pre>

<p>也可以不要大括號，這樣寫</p>

<pre><code>run( speed: :fast, tools: :train )
</code></pre>

<p>甚至</p>

<pre><code>run speed: :fast, tools: :train
</code></pre>

<p>不過在參數只傳遞一個hash時，這樣寫蠻清爽的，如果是像form_for中要傳html_options時還這樣寫，簡直是個閱讀災難，我被誤導了好久。</p>

<p>－ 雖然array和hash都有提供each這個method，不過hash在使用上有些不一樣的地方</p>

<p>只給定一個參數的話
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hash_value = { one: 1, two: 2, three: 3 }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;hash_value.each do |value|
</span><span class='line'>  #something for value
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>value其實是個矩陣，如[:one, 1], [:two, 2], [:three, 3]。</p>

<p>也可以給2個參數</p>

<pre><code>hash_value.each do |key, value|
  #something for value
end
</code></pre>

<p>key和value就分別對應到hash值上，這就不用多說了。</p>

<ul>
<li>另外有個<code>inject</code> method可以幫助加總所有元素</li>
</ul>


<pre><code>def average_word_length
  total = words.inject(0.0){ |result, word| word.size + result}
  total / word_count
end
</code></pre>

<p>－ 不要再each裡面操作delete的動作，如果需要的話可以用<code>array.delete_if</code> method。</p>

<p>－ 如果只是要檢查某個元素有沒有已經存在陣列中，可以考慮改用<code>Set</code>這個class，而不是用Array。
<a href="http://ruby-doc.org/stdlib-2.2.2/libdoc/set/rdoc/Set.html">http://ruby-doc.org/stdlib-2.2.2/libdoc/set/rdoc/Set.html</a></p>

<p>它在檢查效率上比較好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -2]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-2/"/>
    <updated>2015-04-24T15:37:46+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-2</id>
    <content type="html"><![CDATA[<h1>Chapter 2 - Choose the Right Control Structure</h1>

<p>說是Control Structure，我比較習慣說Control Flow，簡單就是說幾乎所有程式語言都有的流程控制語法，像是if, while, case等。</p>

<ul>
<li>Ruby比較特別的是有unless, until反向詞語，一開始用不大習慣，但後來寫著寫著，心裡慢慢習慣照著口語的語法說，現在反而比較喜歡這樣寫了，總之照Ruby的理念就是這些反向詞語的目的就是為了要減少在閱讀程式碼時，心裡還需要做轉換的浪費。</li>
</ul>


<pre><code>if not @read_only
</code></pre>

<p>看到not心裡還要先把@read_only的值反向</p>

<pre><code>unless @read_only
</code></pre>

<p>讀起來比較順口</p>

<ul>
<li>另一個蠻特別的點是，條件式可以放在最後面，也是為了配合口語語法</li>
</ul>


<pre><code>@title = new_title unless @read_only
</code></pre>

<ul>
<li><p>Ruby也有for迴圈，不過直接被捨棄不用（那當初幹嘛創造=___=），都用<code>each</code>。而且<code>for</code>也是用each實踐的，所以直接用each就好了。註：for語法不包含block，所以內中的變數scope是和for同一個，和each只存在於block中不一樣，each和for還是有些不同。</p></li>
<li><p>case, 要注意的是在case中比較是用<code>===</code>，另外條件式也可以用regex來比較</p></li>
</ul>


<p>這邊惡補一下幾個我不熟的operator</p>

<p><code>&lt;=&gt;</code>
Combined comparison operator. Returns 0 if first operand equals second, 1 if first operand is greater than the second and -1 if first operand is less than the second.</p>

<p><code>(a &lt;=&gt; b) returns -1.</code></p>

<p><code>===</code>
Used to test equality within a when clause of a case statement.</p>

<p><code>(1...10) === 5 returns true.</code></p>

<p><code>.eql?</code>
True if the receiver and argument have both the same type and equal values.</p>

<p><code>1 == 1.0 returns true, but 1.eql?(1.0) is false.</code></p>

<p><code>equal?</code>
True if the receiver and argument have the same object id.</p>

<p><code>if aObj is duplicate of bObj then aObj == bObj is true, a.equal?bObj is false but a.equal?aObj is true.</code></p>

<ul>
<li><p>只有false和nil被測試時才會回傳false，<code>0</code>不是！還特別highlight以前寫C的人（哈哈），因為在C裡面<code>0</code>值被測試也是算false</p></li>
<li><p>延續上，因為false和nil被測試都是回傳false，所以要特別注意條件式中會不會false和nil混在一起</p></li>
</ul>


<pre><code>while next_object = get_next_object
  # Do something with the object
end
</code></pre>

<p>上面的迴圈是假設next_object最後會變成nil，而nil測試後回傳false。但萬一今天next_object本身的值就是false呢。改成下面的碼會比較好</p>

<pre><code>until (next_object = get_next_object).nil?
  # Do something with the object
end
</code></pre>

<p>明確指定出next_object是nil才會跳離迴圈</p>

<ul>
<li>Ternery operator</li>
</ul>


<p>這個以前在C++我就蠻愛用的，可以很漂亮的縮短一些簡單的if-else</p>

<pre><code>result = (face == :beauty) ? "handsome" : "ugly" # 同等於下式

if face == :beauty
 result = "handsome"
else
 result = "ugly"
end
</code></pre>

<ul>
<li>另一個是常用的變數初始化技巧</li>
</ul>


<pre><code>@first_name ||= ''
</code></pre>

<p>@first_name如果還沒初始化，會被賦值&#8217;&lsquo;，如果已經有值，那就回傳本身。不過不要拿來對boolean type的變數這樣做，因為它也是倚賴 || operator機制。</p>
]]></content>
  </entry>
  
</feed>
