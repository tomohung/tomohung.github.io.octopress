<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-03-04T06:41:16+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Titan's Tic Tac Toe]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/03/titans-tic-tac-toe/"/>
    <updated>2015-03-03T09:11:10+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/03/titans-tic-tac-toe</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://i.minus.com/i2XJ0y9E48CHg.png">http://i.minus.com/i2XJ0y9E48CHg.png</a>&#8221;></p>

<h3>Prelude</h3>

<p>This is a blog entry for record my first personal project for Rails, and focus on what&rsquo;s are first time if starting a new project <code>From Zero To One</code>.</p>

<p><code>Titan's Tic Tac Toe</code> is my first personal app for Rails.</p>

<p>Website: <a href="https://young-castle-5534.herokuapp.com/">https://young-castle-5534.herokuapp.com/</a></p>

<p>GitHub repo: <a href="https://github.com/tomohung/tictactoe-rails">https://github.com/tomohung/tictactoe-rails</a></p>

<p>This project is activated by Tealeaf Course 2(Rapid Prototyping with Ruby on Rails), we are asked to do a personal project by ourself. In course 1(Introduction to Ruby and Web Development), we have an optional assignment to build a game <code>Tic Tac Toe</code> engine by Object-Oriented, that is, to give this game AI. I spent a lot of time to design logic, and I believe I have a good job for this. This is why I choose this subject for my personal project. And reuse my code is also a kind of <code>DRY</code> way.</p>

<!--more-->


<p><strong>Warning</strong></p>

<p>I have to admit that I make a big mistake, because I am using a class variable to control <strong>Game Board</strong> status. This work when only me to play with it, but after deployment it will become disaster when multiple player play together. Player share the same game status and sometimes it look weird.</p>

<p>I should use sessions or database to store game status, and extract methods from class GameBoard to controller. I won&rsquo;t fix this problem but writing this blog entry to record this.</p>

<p><strong>Do no use <code>class vars</code> and <code>global vars</code> in Rails.</strong></p>

<h3>Concepts</h3>

<p>Before implementation, I need to split works into pieces.</p>

<ol>
<li>Game enegine.</li>
<li>Game board implementation.</li>
<li>Ladder for record user&rsquo;s game result.</li>
<li>User&rsquo;s register system and Login/out.</li>
</ol>


<h3>Update Environment</h3>

<p>RVM and rbenv are two popular Ruby version manager. I choose RVM, but rbenv is also a good choice.
It makes me easy to switch different versions Ruby between different projects.
I use <code>Ruby version 2.2.0</code>, and <code>Rails 4.2.0</code> for this new project.</p>

<p>Then create a new Rails project
<code>
$ rails new project_name
</code></p>

<p>Specify version in GemFile</p>

<pre><code>gem 'rails', '4.2.0'
ruby "2.2.0"

gem 'bootstrap-sass', '~&gt; 3.3.3'
</code></pre>

<h3>Game Engine</h3>

<p>The game engine is already done in Course 1, so I just modified some codes to fit web process.
GitHub repo: <a href="https://github.com/tomohung/tictactoe-rails/blob/master/lib/oo_tic_tac_toe.rb">https://github.com/tomohung/tictactoe-rails/blob/master/lib/oo_tic_tac_toe.rb</a></p>

<h3>Game Board</h3>

<p>  I&rsquo;m a newbie for HTML &amp; CSS, so Bootstrap will be my best choice. It offer lots of template with high quality, and mobile first.</p>

<p>  I choose <a href="http://getbootstrap.com/examples/cover/">template-cover</a> for my project, it looks clean and suit for my application.</p>

<h4>Bootstrap</h4>

<ol>
<li> Download Bootstrap, unzip it, then find source code in <code>/docs/examples/cover</code>.</li>
<li> I got two files, <code>index.html</code> and <code>cover.css</code>.</li>
<li> combine <code>index.html</code> into Rails <code>views/layout/application.html.erb</code>.</li>
</ol>


<p>  It may looks like this:</p>

<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Tic Tac Toe&lt;/title&gt;
  &lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =&gt; true %&gt;
  &lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true %&gt;
  &lt;%= csrf_meta_tags %&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="site-wrapper"&gt;
    &lt;div class="site-wrapper-inner"&gt;
      &lt;div class="cover-container"&gt;
        &lt;%= render 'layouts/navigator' %&gt;
        &lt;%= render 'layouts/messages' %&gt;
        &lt;%= yield %&gt;
        &lt;%= render 'layouts/footer' %&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>  I use partial <code>layouts/navigator</code> and <code>layouts/footer</code> to clean the code.</p>

<h4>CSS for cover.css</h4>

<p>  The page looks not good, because CSS is not included. Copy <code>cover.css</code> to <code>/assets/stylesheets</code>. Rails will automatically include CSS files in this directory.</p>

<p>  So far is good, but something wrong when I want to use other bootstrap components.
  After google that, this is because I haven&rsquo;t import bootstrap!! I&rsquo;m using just cover.css for this template.</p>

<p>  Changing file name <code>assets/applications.css</code> to <code>asstes/application.scss</code>, and add this code</p>

<pre><code>  @import "bootstrap-sprockets";
  @import "bootstrap";
</code></pre>

<p>  <code>bootstrap-sprockets</code> has to be imported otherwise <strong>icon</strong> can&rsquo;t be displayed.</p>

<p>  Well, bootstrap components works, but ruin all my template.</p>

<p>  After trial and error, I merge <code>cover.css</code> code into <code>application.scss</code>, and put behind <code>@import "bootstrap"</code>. Rails may load other css files in <code>assets</code> directory, then application.scss import bootstrap, overwrite those class attributes.</p>

<p>  After these setting, now my cover template works well with Bootstrap. I aslo test on my iPhone, it shows pretty good, Bootstrap is awesome!!</p>

<h4>CSS for GameBoard</h4>

<p>  The hardest part for me is to build a game board. I search from web and get some solution, but there&rsquo;s no better solution to draw a symbol <code>X</code>, I decide to display it by another style circle. One more thing, I add the feature when mouse <code>hover</code> on choosen square, it will render a temparary fake circle. This makes game much friendly. Here is the css file:</p>

<pre><code class="css">.doughnut { 
  display: inline-block;
  border: 10px solid #f00;
  border-radius: 50px;
  height:60px;
  width:60px;
}

.host_doughnut { 
  display: inline-block;
  border: 5px solid #fff;
  border-radius: 20px;
  height:60px;
  width:60px;
}

.unpicked {
  display: inline-block;
  height:60px;
  width:60px;
  border: 2px dashed #444;
}

.unpicked:hover {
  border: 10px solid #f66;
  border-radius: 50px;
  height:60px;
  width:60px;
}
</code></pre>

<h4>Ajax</h4>

<p>  Everytime player choose the square, the whole page will reload again. This is not good for a modern web app. Using Ajax to improve it.</p>

<p>  The keyword is add a ID for picked squre.</p>

<pre><code>  &lt;div id = 'pick_&lt;%= number %&gt;'&gt;
</code></pre>

<p>  in <code>GameController</code>, we use <code>respond_to</code> to trigger js:</p>

<pre><code class="ruby">  respond_to do |format|
    format.html do
      redirect_to game_path
    end
    format.js do          
      host_pick
      winner = @board.game_is_over?
      if winner
        flash[:notice] = 'OH NO!! You are DEAD!' if winner == @host
        render :js =&gt; "window.location = '/game/over'"
      end
    end
  end
</code></pre>

<blockquote><p>Note: I use <code>render :js =&gt; "window.location = '/game/over'"</code> to render page /game/over if game is over.</p></blockquote>

<p>  and <code>game.create.js</code> file looks like:</p>

<pre><code class="ruby">  &lt;% (1..9).each do |number| %&gt;
    &lt;% if @player_picked_numbers.include? number %&gt;
      $('#pick_&lt;%= number %&gt;').html("&lt;div class='doughnut'&gt;&lt;/div&gt;");
    &lt;% elsif @host_picked_numbers.include? number %&gt;
      $('#pick_&lt;%= number %&gt;').html("&lt;div class='host_doughnut'&gt;&lt;/div&gt;")
    &lt;% end %&gt;
  &lt;% end %&gt;
</code></pre>

<p>  Ajax make this game vivid!!</p>

<h3>User&rsquo;s Register</h3>

<p>Since I need to store game record, I have to add User&rsquo;s Register, this is not a difficult stuff if you had gone through course 2. Here is a simple ERD:</p>

<ul>
<li>User: username, digest_password, timestamps, has_many :game_records</li>
<li>GameRecord: user_id, game_result, attack_times</li>
</ul>


<p>User and GameRecord is a one-to-many assocaition.</p>

<p>Create routes, model, controller, and views follow what we learned in course 2.</p>

<h3>Login/out</h3>

<p>  Create a SessionController to manager user login/logout.
  Use session[:user_id] to store data in cookie.</p>

<ul>
<li>def <code>new</code> to render login page.</li>
<li>def <code>create</code> for login.</li>
<li>def <code>destroy</code> for logout.</li>
</ul>


<blockquote><p>Don&rsquo;t forget to add feature: auto login after user register.</p></blockquote>

<h3>Ladder</h3>

<p>I will show three kinds of game result: Keeper, Winner, Loser.
And I need tab navigation here, still copy from Bootstrap:</p>

<p>&#8220;`</p>

<ul class="nav nav-tabs">
    <% params[:tab] = 'WIN' if !params[:tab] %>
    <li class="<%= 'active' if params[:tab] == 'TIE' %>&#8221;><a href="#TIE" data-toggle="tab">Keepers</a></li>
    <li class="<%= 'active' if params[:tab] == 'WIN' %>&#8221;><a href="#WIN" data-toggle="tab">Heroes</a></li>
    <li class="<%= 'active' if params[:tab] == 'LOSE' %>&#8221;><a href="#LOSE" data-toggle="tab">Loser</a></li>
</ul>




<div class="tab-content">
  <%= render 'column_title' %>  
  <div class="<%= if (params[:tab] == 'TIE' || !params[:tab]) then 'tab-pane active'  else 'tab-pane' end%>&#8221; id=&#8221;TIE&#8221;>
    <%= render @game_records.where(status: 'TIE') %>
  </div>
  <div class="<%= if params[:tab] == 'WIN' then 'tab-pane active'  else 'tab-pane' end%>&#8221; id=&#8221;WIN&#8221;>
    <%= render @game_records.where(status: 'WIN') %>
  </div>
  <div class="<%= if params[:tab] == 'LOSE' then 'tab-pane active'  else 'tab-pane' end%>&#8221; id=&#8221;LOSE&#8221;>
    <%= render @game_records.where(status: 'LOSE') %>
  </div>
</div>


<pre><code>
Tabs do not work? This is because I haven't include javascript for Bootstrap. 

Add this line in `/assets/javascripts/application.js`
</code></pre>

<p>//= require bootstrap-sprockets
&#8220;`</p>

<p>Well, it works now!!</p>

<p>Then, I found Kevin(Tealeaf Instructor) also write a blog for <a href="http://www.gotealeaf.com/blog/integrating-rails-and-bootstrap-part-1">integrating rails and bootstrap</a>.</p>

<h3>Deploy to Heroku</h3>

<p>Finally, functions all work and ready to deploy to <a href="heroku.com">Heroku</a>. And follow by Heroku instruction, push code, then&hellip;<code>Fail</code>.</p>

<p>Check the log and find something wrong about <code>gem pg</code>. pg is <code>Postgres</code> used by Heroku. Rails default setting is using <code>sqlite3</code>, so I need to do some work in Gemfile:</p>

<pre><code>group :production do
  gem 'pg'
  gem 'rails_12factor'
end
</code></pre>

<p>Add this code to Gemfile for config :production using Postgres. Run <code>bundle install</code> and git push again, it should work!!</p>

<h3>Conclusion</h3>

<p>In Course 2, we have lots assignments from a prepared template. If I don&rsquo;t start a new project, I will never knew there are lots of minor things I should know. After this project, I have chance to be more familiar with Ruby language, Rails routes, CRUD&hellip;etc.</p>

<h3>Compliment from others</h3>

<p>Record these just for encourage myself to keep going on.</p>

<p>Albert Agram (TA):</p>

<blockquote><p>Hey Tomo, nicely done! I played a few rounds and am impressed. Good job :)
<br/></p></blockquote>

<p>Chris Lee (Tealeaf Instructor):</p>

<blockquote><p>This is incredibly awesome!
<br/>
This type of app doesn&rsquo;t lend itself well to Rails, because it&rsquo;s not
really &ldquo;page oriented&rdquo;. Rails tends to be a better fit for apps like
social networks, or things like that where you have CRUD actions on some
resources.
<br/></p></blockquote>

<p>Brandon Conway (TA):</p>

<blockquote><p>This game is awesome! I really like the ladder implementation.
<br/></p></blockquote>

<p>Eugene Chang:</p>

<blockquote><p>This is a really nice app! After seeing it, I had to constantly resist the temptation of spending more time trying to make my UI look better. Great job!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson4]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/22/reflection-to-tealeaf-course2-lesson4/"/>
    <updated>2015-02-22T21:22:10+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/22/reflection-to-tealeaf-course2-lesson4</id>
    <content type="html"><![CDATA[<p>In Course2(Rapid Prototyping with Ruby on Rails), <a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">first week</a> I learned about <code>Models and database</code>, <a href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/">second week</a> I learned about <code>Controllers and Views</code>. The <a href="http://www.tomohung.com/blog/2015/02/16/reflection-to-tealeaf-course2-lesson3/">third week</a> I learned to add <code>Authentication</code> and <code>Polymorphic table</code>.</p>

<p>And this week, also the last week, I completed all basic functions I need to know. Including Ajax for voting, extract methods into gem, build and publish gem, display time info considering user&rsquo;s timezone.</p>

<!--more-->


<h3>Ajax for voting</h3>

<p>Ajax is a clean way to change View template that is necessary changed, and we don&rsquo;t need to redirect and render full page. Rails offer a way to achieve this.</p>

<ul>
<li>in Controller</li>
</ul>


<pre><code class="ruby">respond_to do |format|
  format.html do
    redirect_to :back
  end
  format.js
end
</code></pre>

<ul>
<li>in View</li>
</ul>


<p><code>format.js</code> will lead to the class#action View file, for example: <code>/votes/create.js.erb</code></p>

<pre><code class="ruby">$("#voteable_&lt;%= @vote.voteable_type %&gt;_&lt;%= @vote.voteable_id %&gt;").
  html("&lt;%= j render 'shared/show_dislike_link', vote: @vote %&gt;");
</code></pre>

<p>notice that in <code>js.erb</code> file, render should specify format by using <code>j render</code>.</p>

<ul>
<li>HTML ID</li>
</ul>


<p>ID is the key to do Ajax.</p>

<pre><code class="ruby">&lt;span id = 'vote_&lt;%=vote.id%&gt;'&gt;
  &lt;%= link_to vote_path(vote), remote: true, method: :delete do %&gt;
    &lt;i class='icon-thumbs-up'&gt;&lt;/i&gt;
    Cancel
  &lt;% end %&gt;
&lt;/span&gt;
</code></pre>

<p>Add <code>id</code> for Ajax, and add <code>remote: true</code> for activate Ajax.</p>

<h3>Extract methods</h3>

<p>Using <code>ActiveSupport::Concern</code> to manage module, info from Rails API:</p>

<pre><code class="ruby">module M
  extend ActiveSupport::Concern

  included do
    scope :disabled, -&gt; { where(disabled: true) }
  end

  class_methods do
    ...
  end
end
</code></pre>

<p>When I using for vote methods:</p>

<pre><code class="ruby">module Voteable
  extend ActiveSupport::Concern
  included do
    has_many :votes, as: :voteable
  end

  def like_votes
    self.votes
  end
end
</code></pre>

<p>Or Sluggable.rb</p>

<pre><code class="ruby">module Sluggable
  extend ActiveSupport::Concern

  included do
    before_save :generate_slug
    class_attribute :slug_column
  end

  def to_param
    self.slug
  end

  def generate_slug
    # ignore...
    # self.send(self.class.slug_column)
  end

  module ClassMethods
    def sluggable_column(noun)
      self.slug_column = noun
    end
  end

end
</code></pre>

<p>Notice that using <code>class_attribute</code> to connect different class symbol. Setting <code>sluggable_column</code> in <code>Models</code>.</p>

<p>Also notice that <code>slug_column</code> is a class methods and return a symbol, in order to get instance&rsquo;s value, use <code>self.send(self.class.slug_column)</code>.</p>

<h3>Slug</h3>

<p>There are two purpose using slug:</p>

<ul>
<li>Don&rsquo;t expose database information.</li>
<li>URL for SEO friendly</li>
</ul>


<p>The concepts to generate slug are:</p>

<ol>
<li>add a slug column to store slug value</li>
<li>substitute key word like <code>name</code> into slug, avoid some keywords for HTTP like <code>@&amp;``'</code> etc.</li>
<li>check slug exsited or not, otherwise add a number for avoiding the same name.</li>
</ol>


<h3>Using Gems</h3>

<p>Gem is a very convenient way to use the same methods between two different projects.</p>

<ol>
<li>build a gem spec file.</li>
<li>copy exsited module codes into gem specify path.</li>
<li>build the gem</li>
<li>publish the gem</li>
<li>add gem to Gemfile, then <code>bundle install</code>.</li>
</ol>


<h3>Time Zone</h3>

<p>Rails offer time zone methods to do this.</p>

<ul>
<li>in model backed form</li>
</ul>


<pre><code class="ruby">f.time_zone_select :time_zone, ActiveSupport::TimeZone.us_zones, default: Time.zone.name
</code></pre>

<ul>
<li>in View template</li>
</ul>


<p>changing time zone by (if time zone is &lsquo;Arizona&rsquo;)</p>

<pre><code class="ruby">datetime = post.created_at.in_time_zone("Arizona")
</code></pre>

<h3>Conclusion</h3>

<p>Using gem is a way for Rails how to DRY our codes. Rails flavored Ajax is also antoher way to do that. Exciting to know these.</p>

<p>Finally, the last week is coming to the end. The final project <code>Postit</code> seems become into reality app we daily use. And rails pieces are making together and show me how to build a basic function app.</p>

<p>After these two course, I think now I have confidence to read through other Rails introducion books I used to not understand.About Course 3, there is no reason I do NOT keep going since I decide to make a career change. Glad that I survived through the first two courses, and I think I&rsquo;m ready for the course 3 challenge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson3]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/16/reflection-to-tealeaf-course2-lesson3/"/>
    <updated>2015-02-16T08:37:25+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/16/reflection-to-tealeaf-course2-lesson3</id>
    <content type="html"><![CDATA[<p>In Course2(Rapid Prototyping with Ruby on Rails), <a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">first week</a> I learned about <code>Models and database</code>, <a href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/">second week</a> I learned about <code>Controllers and Views</code>. This week I learned to add some features into my app, and make it vivid!!</p>

<!--more-->


<h3>Authentication</h3>

<p>Rails offer built-in function to help us add authentication. Here are steps:</p>

<ul>
<li>install gem &lsquo;Bcrypt&rsquo;.</li>
</ul>


<pre><code>gem 'bcrypt', '~&gt; 3.1.7' # use gem `bcrypt-ruby`, `=3.0.1` if any problem
</code></pre>

<ul>
<li>run <code>bundle install</code> to install gem.</li>
<li><p>add migration for attribute:<code>password_digest</code>, like:</p>

<pre><code>class AddPasswordDigestToUsers &lt; ActiveRecord::Migration
  def change
    add_column :users, :password_digest, :string
  end
end
</code></pre></li>
<li>add method to <code>Use Model</code></li>
</ul>


<pre><code class="ruby User.rb">class User &lt; ActiveRecord::Base
  has_secure_password
end
</code></pre>

<p><code>has_secure_password</code> built-in some validations, if we want to customize validation, add parameter:</p>

<pre><code class="ruby">has_secure_password validations: false
</code></pre>

<p>here are some test from Rails API:
<code>ruby
user = User.new(name: 'david', password: '', password_confirmation: 'nomatch')
user.save                                                       # =&gt; false, password required
user.password = 'mUc3m00RsqyRe'
user.save                                                       # =&gt; false, confirmation doesn't match
user.password_confirmation = 'mUc3m00RsqyRe'
user.save                                                       # =&gt; true
user.authenticate('notright')                                   # =&gt; false
user.authenticate('mUc3m00RsqyRe')                              # =&gt; user
User.find_by(name: 'david').try(:authenticate, 'notright')      # =&gt; false
User.find_by(name: 'david').try(:authenticate, 'mUc3m00RsqyRe') # =&gt; user
</code></p>

<h3>Login / Logout</h3>

<p>We can use <code>session</code> to store our login information. First add routes</p>

<pre><code class="ruby">  get '/register', to: 'users#new'
  get '/login', to: 'sessions#new'
  post '/login', to: 'sessions#create'
  delete '/logout', to: 'sessions#destroy'
</code></pre>

<p>And <code>SessionsController</code>:</p>

<pre><code class="ruby SessionController.rb">class SessionsController &lt; ApplicationController

  def new 
    @user = User.new
  end

  def create
    user = User.find_by username: params[:username]
    if user &amp;&amp; user.authenticate(params[:password])
      flash[:notice] = 'Login Success.'
      session[:user_id] = user.id
      redirect_to root_path
    else
      flash[:error] = "Username or Password may not correct. Try again."
      render :new
    end
  end

  def destroy
    session[:user_id] = nil
    flash[:notice] = 'Log out'
    redirect_to root_path
  end

end
</code></pre>

<h3>Polymorphic table</h3>

<p>Sometimes many tables have relationship with the same one table, like <code>User</code> has many gravatar images, and <code>Post</code> has many images. So <code>User</code> and <code>Post</code> are using the same table <code>Picture</code>. We can do <code>Polymorpic table</code> association like this:</p>

<pre><code class="ruby">class Picture &lt; ActiveRecord::Base
  belongs_to :imageable, polymorphic: true
end

class User &lt; ActiveRecord::Base
  has_many :pictures, as: :imageable
end

class Post &lt; ActiveRecord::Base
  has_many :pictures, as: :imageable
end
</code></pre>

<p>Then Rails will automatically assign two virtual attribute for us:<code>imageable_type</code> and <code>imageable_id</code></p>

<p><code>type</code> is stored which object type use this Picture, and <code>id</code> is for that object&rsquo;s table id.</p>

<p>Then, we can save data like this:</p>

<pre><code class="ruby">@picture = Picture.create(imageable: post, user_id: current_user_id)
</code></pre>

<h3>Deploy to Heroku</h3>

<p>Last step, deploy to heroku makes this app engage with people!!</p>

<p>The only thing I&rsquo;ll record here is <code>make sure to run **heroku run rake db:migrate**</code>. Otherwise heroku will not generate a database for us.</p>

<h3>Conclusion</h3>

<p>Seems that my app becomes more and more closer to real world app we used everyday. There&rsquo;re still a lot of things to combine them together for improvement, like <code>tab control</code>, <code>Ajax</code>, <code>friendly routes path name</code>, etc.</p>

<p>Security is one of the most imporatant thing when we using internet, it&rsquo;s absolutely not safe if we store our password by plain text. Use a <code>one way has/ password digest</code> to instead of plain text password. There is one more thing, <code>MD5</code> has been broken too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf Course2 Lesson3 Quiz]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/15/tealeaf-course2-lesson3-quiz/"/>
    <updated>2015-02-15T08:22:00+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/15/tealeaf-course2-lesson3-quiz</id>
    <content type="html"><![CDATA[<blockquote><h4>1. What&rsquo;s the difference between rendering and redirecting? What&rsquo;s the impact with regards to instance variables, view templates?</h4></blockquote>

<ul>
<li>rendering: render a template HTML code, like <code>partial</code>.</li>
<li>redirecting: make a new request to controller.</li>
</ul>


<!--more-->


<p>Regards to instance variables for showing view templates, instance variables only survive at the same request, so if we need some information like errors store in instance variables, we need to use <code>render</code> for this condition.</p>

<blockquote><h4>2. If I need to display a message on the view template, and I&rsquo;m redirecting, what&rsquo;s the easiest way to accomplish this?</h4></blockquote>

<p>Use <code>flash</code> to store error message. This is the easiest way to store <code>one message</code>.</p>

<blockquote><h4>3. If I need to display a message on the view template, and I&rsquo;m rendering, what&rsquo;s the easiest way to accomplish this?</h4></blockquote>

<p>Use <code>instance variable</code> to store errors, then <code>render</code>.</p>

<p>* or use <code>flash.now</code> and render it.</p>

<blockquote><h4>4. Explain how we should save passwords to the database.</h4></blockquote>

<p>Use <code>one way hash</code>. Since we can&rsquo;t promise that data in database never be stolen, the way to protect our password is using a <code>one way hash</code> to store the digest. If someone get this digest, it&rsquo;s hard for him to decyphor this digest to a plain text password.</p>

<blockquote><h4>5. What should we do if we have a method that is used in both controllers and views?</h4></blockquote>

<p>Put the methods into controllers, and make them become helpers. Like:</p>

<pre><code>helper_method :current_user
</code></pre>

<p>Now, method <code>current_user</code> can be used in both controllers and views.</p>

<blockquote><h4>6. What is memoization? How is it a performance optimization?</h4></blockquote>

<p>Some repeatedly query action for database will reduce our app performance, using <code>memoization</code> to overcome this.</p>

<pre><code>@comment ||= User.find(session[:user_id]) if session[:user_id]
</code></pre>

<p>Syntax <code>||=</code> do a <code>OR</code> combined action, if <code>@comment</code> is <code>nil</code>, then <code>User.find</code> invokes; if <code>@comment</code> exist, just return @comment without invoke <code>User.find</code>. This prevent to invoke database query again.</p>

<blockquote><h4>7. If we want to prevent unauthenticated users from creating a new comment on a post, what should we do?</h4></blockquote>

<p>Add a helper method <code>required_login</code> in <code>before_action</code> for actions <code>create</code> and &lsquo;&rsquo;. Since this method is used in both <code>post</code> and <code>comment</code>, we can put this method into <code>ApplicationController.rb</code>.</p>

<blockquote><h4>8. Suppose we have the following table for tracking &ldquo;likes&rdquo; in our application. How can we make this table polymorphic? Note that the &ldquo;user_id&rdquo; foreign key is tracking who created the like.</h4></blockquote>

<table>
<thead>
<tr>
<th style="text-align:right;"> id </th>
<th></th>
<th style="text-align:right;"> user_id </th>
<th></th>
<th style="text-align:right;"> photo_id  </th>
<th></th>
<th style="text-align:right;"> video_id  </th>
<th></th>
<th style="text-align:right;"> post_id</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">1 </td>
<td></td>
<td style="text-align:right;">4 </td>
<td></td>
<td style="text-align:right;"> </td>
<td></td>
<td style="text-align:right;"> 12 </td>
<td></td>
<td style="text-align:right;"> </td>
</tr>
<tr>
<td style="text-align:right;">2 </td>
<td></td>
<td style="text-align:right;">7 </td>
<td></td>
<td style="text-align:right;">  </td>
<td></td>
<td style="text-align:right;">  </td>
<td></td>
<td style="text-align:right;">3 </td>
</tr>
<tr>
<td style="text-align:right;">3 </td>
<td></td>
<td style="text-align:right;">2 </td>
<td></td>
<td style="text-align:right;">6 </td>
<td></td>
<td style="text-align:right;">  </td>
<td></td>
<td style="text-align:right;"> </td>
</tr>
</tbody>
</table>


<p>According to this table, there should be 5 tables in database:</p>

<ul>
<li>User</li>
<li>Photo</li>
<li>Video</li>
<li>Post</li>
<li>Like</li>
</ul>


<p>And here are they might be in models:</p>

<pre><code class="ruby User.rb">class User ActiveRecord::Base
  has_many :likes, as: likeable
end
</code></pre>

<pre><code class="ruby Photo.rb">class Photo ActiveRecord::Base
  has_many :likes, as: likeable
end
</code></pre>

<pre><code class="ruby Video.rb">class Video ActiveRecord::Base
  has_many :likes, as: likeable
end
</code></pre>

<pre><code class="ruby Post.rb">class Post ActiveRecord::Base
  has_many :likes, as: likeable
end
</code></pre>

<pre><code class="ruby Like.rb">class Like ActiveRecord::Base
  belongs_to :user_id
  belongs_to :likeable, polymorphic: true
end
</code></pre>

<blockquote><h4>9. How do we set up polymorphic associations at the model layer? Give example for the polymorphic model (eg, Vote) as well as an example parent model (the model on the 1 side, eg, Post).</h4></blockquote>

<pre><code class="ruby ">class Vote &lt; ActiveRecord::Base
  belongs_to :voteable, polymorphic: true
end

class Post &lt; ActiveRecord::Base
  has_many :votes, as: voteable
end
</code></pre>

<blockquote><h4>10. What is an ERD diagram, and why do we need it?</h4></blockquote>

<p>Entity Relationship Dirgram(ERD) stands for tables in database relationship between each others. It&rsquo;s a convinient way to communicate with others what the tables relationship, even for ourselves under developming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson2]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/"/>
    <updated>2015-02-10T16:39:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2</id>
    <content type="html"><![CDATA[<p><a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">Last week</a>, I know Models and Database side of Rails.</p>

<p>This week Tealeaf reveals the <code>Controller</code> and <code>View</code> part of MVC, I would like to summarize this lesson into two parts: <code>Don't Repeat Yourself</code> and <code>Conventions over Configuration</code>.</p>

<!--more-->


<h3>Don&rsquo;t Repeat Yourself</h3>

<ul>
<li><p>before_action</p>

<p>Like Sinatra, before_action works at Controller, help us to remove repeatedly codes, like</p>

<pre><code>  before_action: :set_post, only: [:show, :edit, :update]
</code></pre>

<pre><code>  def set_post
    @post = Post.find(param[:id])
  end
</code></pre>

<p>then, method <code>set_post</code> works at three actions : show, edit, update by once.</p></li>
<li><p>form partial</p>

<p>Rails offer <code>form partial</code> to help us eliminate repeatedly <code>HTML codes</code>, by Rails convention, if there is a file called <code>/app/views/posts/_post.erb</code>, I can just write code:</p>

<pre><code>  &lt;%= render @post %&gt;
</code></pre>

<p>if @post is a class Post&rsquo;s instance, then Rails will automatically match to the file <code>_post.erb</code>, then render this file.</p>

<p>There is another amazing way to show collection of instances. If I have a collection instance <code>@posts</code> by class Post, then I have write</p>

<pre><code>  &lt;%= render @posts %&gt;
</code></pre>

<p>Rails will also automatically match the file <code>_post.erb</code> to iterate to render <code>@posts</code>. What a clean way to write such codes!</p></li>
<li><p>Helpers for view: fix url and datetime</p>

<p>We also can put some logic in Views into <code>/helpers</code>, like <code>application_helper.rb</code>. Put a lot of logic in Views is a dirty way when reviewing, and Rails have helpers to make us a clean way to do this. <code>Form Helper</code> is another good implement to help us. I&rsquo;ll metion later.</p></li>
<li><p>validations</p>

<p>Rails offer a simple to validate data in Model, like this</p>

<pre><code class="ruby post.rb">validates :title, presence: true, length: {minimum: 5}
</code></pre></li>
</ul>


<h3>Conventions over Configuration</h3>

<ul>
<li><p>CRUD
For most popular actions on web, there are 4 actions: Create, Retrieve, Update, Delete.
Rails offer a RESTful setting to make implemention these actions much simple.</p>

<p>For example, in <code>routes.rb</code>:</p>

<pre><code>  resources :posts
</code></pre>

<p>help us to build 7 actions corespond with VERBs and URIs.</p>

<pre><code>get '/posts/', to: "posts#index", as: "posts"
get '/posts/:id', to: "posts#show", as: "post"
get '/posts/new', to: "posts#new", as: "new_post"
post '/posts/', to: "posts#create",
get '/posts/:id', to: "posts#edit", as: "edit_post"
patch '/posts/:id', to: "posts#update"
delete '/posts/:id', to: "posts#destroy"
</code></pre>

<p>I also can use key word <code>except:</code> or <code>only:</code> to assign which routes will be created:</p>

<pre><code>  resources :posts, except: [:destory]
  resources :comments, only: [:create]
</code></pre></li>
<li><p>nested routes
Rails also offer a way to create nested path like <code>/posts/:id/comments</code></p>

<pre><code>  resources :posts, except: [:destory] do
    resources :comments, only: [:create]
  end
</code></pre>

<p>And this will create route for <code>comments#create</code> by nested route</p>

<pre><code>  post '/posts/:post_id/comments', to: "comments#create", as: "post_comments"
</code></pre></li>
<li><p>model backed form</p>

<p>Using <code>Model backed form</code> can associated with instance, then Rails do a lot of task behind the form.</p>

<pre><code>&lt;%= form_for [@post, @comment] do |f| %&gt;  
  &lt;%= render 'shared/error_messages', instance: @comment %&gt;
  &lt;%= f.label :body, 'Leave a Comment:'%&gt;
  &lt;%= f.text_area :body , rows: 5, class: 'span4'%&gt;
  &lt;br&gt;
  &lt;%= f.submit class: 'btn btn-defualt'%&gt;
&lt;% end %&gt;
</code></pre>

<p><code>[@post, @comment]</code> is a Rails convention for creating matching routes for <code>posts/coments</code>. And this form help us to create HTML element depends on what current action is. There are different actions in <strong>edit</strong> and <strong>new</strong> actions. <code>label</code> will update information if it&rsquo;s at edit action, and form action will generate a hidden attribute to store info that current actions VERB. This are all Rails conventions.</p></li>
<li><p>category_ids for checkboxes</p>

<p>Rails offer a helper to create checkboxes, like this</p>

<pre><code>&lt;%= form_for @post do |f| %&gt;
  &lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name do |cb| %&gt;
    &lt;%= cb.label(class: 'checkbox inline') {cb.check_box(class: 'checkbox') + cb.text}%&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>

<p>And there is a virtual attribute for <code>category_ids</code>, it&rsquo;s generated because we set posts and categories&rsquo;s associations in Post Models:</p>

<pre><code>class Post &lt; ActiveRecord::Base
  belongs_to :creator, foreign_key: :user_id, class_name: "User"
  has_many :comments
  has_many :post_categories
  has_many :categories, through: :post_categories
end
</code></pre>

<p>and <code>category_ids</code> store multiple values to match <code>collection_check_boxes</code>. Rails another magic show.</p></li>
<li><p>auto association by mass-assignment</p>

<p>We can write</p>

<pre><code>  @comment = @post.comments.new(param.require(:comment).permit!)
</code></pre>

<p>Rails will auto assign post_id to @comment.</p></li>
</ul>


<h3>Others</h3>

<ul>
<li><p>Strong parameters</p>

<p>After Rails 4, Rails lock params by default, we need to get params by this way</p>

<pre><code>params.require(:post).permit(:title, :url, :description, category_ids:[])
</code></pre>

<p>If we have to get a collection values, remember to add <code>[]</code></p></li>
<li><p>render vs redirect_to</p>

<p><code>render</code> is for render HTML, and <code>redirect_to</code> is for make a new request. Although we see the page is changed, but it&rsquo;s totally different behind these two ways.</p></li>
</ul>


<h3>Conclusion</h3>

<p>  I can&rsquo;t imagine how can I figure out such mass Rails knowledge by myself in two weeks. Here is my learning processes: <code>watch video -&gt; 'I knew it!' -&gt; do assignment -&gt; 'What? How to do that?' -&gt; watch solution -&gt; 'Ah! I got it!' -&gt; complete assignment</code>. And these things happen again and again.</p>

<p>  Watching option videos and reviewing disscusions also help me to dig out what I missed.</p>

<p>  I should do the official guide again, and I think this time will be a totally different feeling compared with two weeks ago.</p>
]]></content>
  </entry>
  
</feed>
