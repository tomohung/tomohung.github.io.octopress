<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-04-09T16:48:45+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week5 (2/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5-2-slash-2/"/>
    <updated>2015-04-09T15:58:27+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5-2-slash-2</id>
    <content type="html"><![CDATA[<h3>Continuous Integration(CI) and Continous Delivery(CD)</h3>

<p>This part is super exciting so I decide to make it a individual post.</p>

<p>Continuous Integration(CI) and Continous Delivery(CD) are two of most important part in automation development. There are plenty of innovation tools, but I think the work flow is the key to understand.</p>

<ol>
<li>Pull the latest code from GitHub.</li>
<li>Create a new feature branch and develop.</li>
<li>Finish development and put to a feature named branch on GitHub.</li>
<li>Create a PR from this branch to <code>staging</code> branch.</li>
<li>Wait CI test for staging branch.</li>
<li>CI automatically deploy from staging branch to <code>staging server</code>.</li>
<li>Manual test on staging server.</li>
<li>Create PR from staging to <code>master</code> branch.</li>
<li>trigger CI for master branch and automatically deploy to <code>production server</code>.</li>
</ol>


<h3>Setting CI and CD</h3>

<p>Here we use <a href="https://circleci.com">Circle CI</a> for CI and CD. There is also well known service called <a href="https://travis-ci.org/">Travis CI</a>.</p>

<ul>
<li>Create a <code>staging</code> branch.</li>
<li>Follow Circle CI project setting.</li>
<li>You may need Heroku API key and SSH.</li>
<li>[Key] Create a <code>circle.yml</code> in the root of project, adjust <code>production_app_name</code> and <code>staging_app_name</code>.</li>
</ul>


<pre><code>machine:
  ruby:
    version: 2.1.5
deployment:
  production:
    branch: master
    commands:
      - heroku maintenance:on --app production_app_name
      - heroku pg:backups capture --app production_app_name
      - git push git@heroku.com:production_app_name.git $CIRCLE_SHA1:refs/heads/master
      - heroku run rake db:migrate --app production_app_name
      - heroku maintenance:off --app production_app_name
  staging:
    branch: staging
    commands:
      - heroku maintenance:on --app staging_app_name
      - git push git@heroku.com:staging_app_name.git $CIRCLE_SHA1:refs/heads/master
      - heroku run rake db:migrate --app staging_app_name
      - heroku maintenance:off --app staging_app_name
</code></pre>

<p>I got an error when running Circle test: [counldn&rsquo;t find file &lsquo;bootstrap&rsquo;]</p>

<p>Solution: Rename file <code>stylesheets/application.css</code> to <code>stylesheets/application.css.scss</code>. And add Line to the file:</p>

<pre><code>@import 'bootstrap-sprockents'
@import 'bootstrap'
</code></pre>

<p>and remove line <code>*= require bootstrap</code>.</p>

<h3>Embeded Badget</h3>

<p>I aslo try to use badget in my homepage.</p>

<pre><code>%img(src="https://circleci.com/gh/tomohung/myflix.png?circle-token=a7c782deb0d0022335fa1f095e268bb44eb4cab8")
</code></pre>

<p>Then I can see this passing test badget.</p>

<p><img class="<a" src="href="https://circleci.com/gh/tomohung/myflix.png?circle-token=a7c782deb0d0022335fa1f095e268bb44eb4cab8">https://circleci.com/gh/tomohung/myflix.png?circle-token=a7c782deb0d0022335fa1f095e268bb44eb4cab8</a>&#8221;></p>

<h3>Slack ingegration with Github and Circle CI</h3>

<p>I failed to use <a href="http://ccmenu.org/">CCMenu</a> to have a notification. But I use <a href="https://slack.com/">Slack</a> to integrate GitHub and Circle CI, and that&rsquo;s why I said it&rsquo;s exciting!!</p>

<p>After setting done, the only thing I need to do is <code>git push origin staging</code> or <code>git push origin master</code>. I&rsquo;ll get notifications in Slack when Github got a push event, and Circle CI run the test and deployment in the same time. Surely I will also get a Circle CI result notification if test and deployment finished.</p>

<p>This is what a programmer should do!! Don&rsquo;t Repeat Yourself!! Bravo!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week5 (1/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5/"/>
    <updated>2015-04-09T14:39:06+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5</id>
    <content type="html"><![CDATA[<h3>Feature test for sending email</h3>

<p>Following by <a href="http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4/">previous week</a>, this week we have a feature test for sending email.</p>

<p>Install gem,</p>

<pre><code>$ gem 'capybara-email'
</code></pre>

<p>And added this line to <code>spec_helper.rb</code></p>

<pre><code>require 'capybara/email/rspec'
</code></pre>

<p>Then</p>

<pre><code>require 'spec_helper'

feature 'User resets password' do
  scenario 'user successfully resets the password' do
    clear_emails

    user = Fabricate(:user)
    visit sign_in_path
    click_link 'Forgot Password?'

    fill_in 'Email Address', with: user.email
    click_button 'Send Email'

    open_email(user.email)
    current_email.click_link("Reset Password")

    fill_in 'New Password', with: 'new_password'
    click_button 'Reset Password'

    fill_in 'Email Address', with: user.email
    fill_in 'Password', with: 'new_password'
    click_button 'Sign in'
    expect(page).to have_content("Welcome, #{user.full_name}")
  end
end
</code></pre>

<p>Especially notice for <code>open_email</code>, <code>current_email</code> functions are offered by <code>capybara-email</code> gem.</p>

<h3>Invite Friend and Registeration</h3>

<p>We also have a work on inviting friends through email, the key point here is how to use a secure <code>token</code> to tracking data.</p>

<ul>
<li>create an invitations data, including inviter, recipient email, name, and <code>token</code>.</li>
<li><p>when user get the email, following the link provided to server, page will direct to the register page with existing data stored with this token.</p>

<p>And set the routes for path</p></li>
</ul>


<pre><code>get 'register/:token', to: 'users#new_with_invitation_token'
</code></pre>

<ul>
<li>we can have a hidden data in the register form for new#users to use.</li>
</ul>


<pre><code>= hidden_field_tag :token, @invitation_token
</code></pre>

<p>we don&rsquo;t use form_for element, becuase this hidden attribute does not belong to backend modeled form.</p>

<h3>Concerns</h3>

<p>To Dry our code, we can use <code>concern</code> with <code>module</code>. Here is a <a href="https://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">post by DHH</a> why we should do this.</p>

<p>We can merge the same function feature into concern file. For example: <code>Tokenable</code></p>

<pre><code>#/lib/tokenable.rb
module Tokenable
  extend ActiveSupport::Concern
  included do
    before_create :generate_token
  end

  private
  def generate_token
    self.token = SecureRandom.urlsafe_base64
  end
end
</code></pre>

<p>Then add to model file</p>

<pre><code>require 'tokenable'

class User &lt; ActiveRecord::Base
  include Tokenable
  ...
end
</code></pre>

<p>I prefer to specify require file name, or we can use <a href="http://stackoverflow.com/questions/19098663/auto-loading-lib-files-in-rails-4">auto loading library files</a>.</p>

<h3>Email Service Providers</h3>

<p>Since we have test email sending on ENV:development and EVN:test, now we have test it in the real world. That&rsquo;s why we need a real email service provider. Google has it but with many restriction, Tealeaf recommend <code>Mailgun</code> or <code>Postmark</code>. Here we have a taste for `Mailgun&#8217;.</p>

<p>To setting <code>config/environments/production.rb</code>, add these lines:</p>

<pre><code>config.action_mailer.default_url_options = { :host =&gt; "tomo-myflix.herokuapp.com" }
  config.action_mailer.smtp_settings = {
    :port           =&gt; ENV['MAILGUN_SMTP_PORT'],
    :address        =&gt; ENV['MAILGUN_SMTP_SERVER'],
    :user_name      =&gt; ENV['MAILGUN_SMTP_LOGIN'],
    :password       =&gt; ENV['MAILGUN_SMTP_PASSWORD'],
    :domain         =&gt; 'tomo-myflix.herokuapp.com',
    :authentication =&gt; :plain,
  }
  config.action_mailer.delivery_method = :smtp
</code></pre>

<p><code>tomo-myflix.herokuapp.com</code> is my app name on Heroku. And ENV about Mailgun are maintained by Heroku.</p>

<p>I aslo can use this command to check <code>Heroku configurations</code>.</p>

<pre><code>$ heroku config
</code></pre>

<p>Then push it to heroku and test for a real email address, it works!!</p>

<h3>Background Jobs</h3>

<p>Sometimes, some actions do not need to be synchrous, like sending email, we don&rsquo;t need to wait email sending action completed. That&rsquo;s why we need to use a background job to do sending email to speed up the flow.</p>

<p><code>Sidekiq</code> and <code>Resque</code> are some of this concept product. And Tealeaf recommend to use <a href="https://github.com/mperham/sidekiq/wiki">Sidekiq</a>.</p>

<p>Install gem Sidekiq</p>

<pre><code>gem 'sidekiq'
</code></pre>

<p>Only a tiny change for using it by delay method</p>

<pre><code>AppMailer.delay.notify_on_new_todo(current_user, @todo) # new 
AppMailer.notify_on_new_todo(current_user, @todo).deliver #older one
</code></pre>

<p>Add this line in <code>spec/spec_helper.rb</code></p>

<pre><code>require 'sidekiq/testing/inline'
</code></pre>

<p>Here we setup sidekiq, but we still need start <code>Redis</code> server:</p>

<pre><code>$ brew install redis
$ redis-server /usr/local/etc/redis.conf
</code></pre>

<p>And this start sidekiq with another terminal:</p>

<pre><code>$ bundle exec sidekiq
</code></pre>

<p>So far, this makes <code>local</code> works fine with <code>sidekiq</code> for background jobs. If we want to use background jobs in ENV:production, Heroku take charges if dyno is more than 1, or try <a href="https://coderwall.com/p/fprnhg/free-background-jobs-on-heroku">this way to simulate</a></p>

<p>I have not implemented this yet, but I&rsquo;ll try it later.</p>

<p>There is also <a href="https://devcenter.heroku.com/articles/procfile#deploying-to-heroku">an article talking about Procfile and Foreman</a>.</p>

<p>If sidekiq version >= 3.0, you might also run this line
<code>
heroku config:set REDIS_PROVIDER=REDISTOGO_URL
</code></p>

<h3>Monitor Production Error</h3>

<p>Here we have a try for <a href="https://getsentry.com/welcome/">Sentry</a>.</p>

<p>Tracking errors is also a key for automation deployment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week4]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4/"/>
    <updated>2015-04-07T13:11:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4</id>
    <content type="html"><![CDATA[<h3>Three kinds of BDD</h3>

<p>In week 4 beginning, we got a brief intro for 3 kinds of BDD:</p>

<ul>
<li><p>meet in the middle</p>

<p>I think this should be the popular one for modern development. The front-end engineer build the pages from mockups, then back-end developer connect UI with controllers and models.</p></li>
<li><p>inside out</p>

<p>It develops from models to controllers till views and integrations. It&rsquo;s hard to decide what models you really need in the beginning.</p></li>
<li><p>outside in</p>

<p>It devlops from integrations to controllers and models. It start from a big vision, and close to what user&rsquo;s need. But for developer, it&rsquo;s hard to code from this big vision, especially for integration test in the development beginning.</p></li>
</ul>


<h3>Self Referential Associations</h3>

<p>We can use <strong>self referential association</strong> to let user track other users. For example:</p>

<pre><code># t.integer :follower_id, :leader_id
class Relationship &lt; ActiveRecord::Base
  belongs_to :follower, class_name: 'User'
  belongs_to :leader, class_name: 'User'
end
</code></pre>

<p>Then, model <code>User</code> can have these virtual attributes:</p>

<pre><code>  has_many :following_relationships, class_name: 'Relationship', foreign_key: :follower_id
  has_many :leading_relationships, class_name: 'Relationship', foreign_key: :leader_id
</code></pre>

<h3>Sending Emails</h3>

<p>Rails also offer <code>ActionMailer</code> for sending emails.</p>

<ul>
<li>create files in <code>app/mailers/app_mailer.rb</code></li>
</ul>


<pre><code>class AppMailer &lt; ActionMailer::Base

  def send_welcome_email(user)
    @user = user
    mail to: user.email, from: 'info@myflix.com', subject: 'Welcome to Myflix'
  end
end
</code></pre>

<ul>
<li><code>View</code> template in <code>app/views/app_mailers/send_welcome_email</code>:</li>
</ul>


<pre><code>%html(lang='en-US')
  %body
    %p Welcome to MyFlix, #{@user.full_name}
</code></pre>

<ul>
<li>Config for <code>config/environments/development.rb</code></li>
</ul>


<pre><code>config.action_mailer.delivery_method = :letter_opener
</code></pre>

<p>And</p>

<pre><code>group :development do
  gem 'letter-opener'
end
</code></pre>

<blockquote><p>This is only for <code>development</code> setting, we also need to set for <code>test</code> and <code>production</code> independent</p></blockquote>

<h3>Handling Sensitive Account Info</h3>

<p>It&rsquo;s dangerous to upload config setting file to github or other public storage, there is someone update AWS key to GitHub and got a unbelievable credit bill.</p>

<p>Use <code>ENV</code> to protect secret data, we can use gem <code>Figaro</code>.
<a href="https://github.com/laserlemon/figaro">Figara</a> is the simplest way to keep our key value safe.</p>

<p>There are two posts talking about this topic:</p>

<ol>
<li><a href="http://railsapps.github.io/rails-environment-variables.html">Rails Environment Variables</a></li>
<li><a href="https://devcenter.heroku.com/articles/config-vars">Configuration and config Vars</a></li>
</ol>


<blockquote><p>Update: Tealeaf also have a post about <a href="http://www.gotealeaf.com/blog/managing-environment-configuration-variables-in-rails">Managing Environment Configuration Variables in Rails</a></p></blockquote>

<h3>Test Email sending</h3>

<p>Remember to clear email deliveries before test:</p>

<pre><code>before { ActionMailer::Base.deliveries.clear }
</code></pre>

<p>Then we can validate email in the test by this</p>

<pre><code>post :create
expect(ActionMailer::Base.deliveries.last.to).to eq([user_attributes["email"]])
# expect(ActionMailer::Base.deliveries.last.body).to include(user_attributes["full_name"])
</code></pre>

<h3>Update database, use rake tasks</h3>

<p>An advice from TA Tomtomecek, I update existing data in model User, and he suggest me to use <a href="http://guides.rubyonrails.org/command_line.html#custom-rake-tasks">custom rake tasks</a> to do that. I&rsquo;ve not taste that yet, just leave a memo here to remember.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week3]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/17/reflection-to-tealeaf-course3-week3/"/>
    <updated>2015-03-17T09:41:26+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/17/reflection-to-tealeaf-course3-week3</id>
    <content type="html"><![CDATA[<p><a href="http://www.tomohung.com/blog/2015/03/11/reflection-to-tealeaf-course3-week2/">In week 2</a>, Tealeaf talked about how to test controller, and this week, I got a more comprehensive test consideration for controller and user interaction.</p>

<h3>For Controller Test</h3>

<ul>
<li>Everytime add a function feature, also need to add a test for it.</li>
<li>Everytime find a bug, also add a test for it.</li>
</ul>


<h3>DRY</h3>

<p>RSpec also offer two ways to DRY code.</p>

<h4>- Macro</h4>

<pre><code>$ mkdir spec/support
$ touch macros.rb
</code></pre>

<p>And we can move repeatedly code into here, for example, we usually need to set a login user:</p>

<pre><code>def set_current_user(user = nil)
  session[:user_id] = (user || Fabricate(:user)).id
end
</code></pre>

<p>and find user</p>

<pre><code>def current_user
  User.find(session[:user_id])
end
</code></pre>

<h4>- Shared Examples</h4>

<pre><code>$ touch spec/support/share_examples.rb
</code></pre>

<p>A test method may be called through different controllers:</p>

<pre><code>shared_examples 'requre_sign_in' do
  it 'redirects to the root page'
    action
    expect(response).to redirect_to root_path
  end
end
</code></pre>

<p>Be careful: <code>action</code> is a <strong>variable</strong>, then when using it:</p>

<pre><code>it_behaves_like 'require_sign_in' do
  let(:action) { get :index }
end
</code></pre>

<h3>Feature Specs</h3>

<p>There are two methods to test user interactions, one is <code>request spec</code> and this is deprecated by <strong>Capybara</strong>. The other one is <code>feature specs</code>, recommended by <strong>Capybara</strong>.</p>

<p><strong>Capybara</strong> offer functions that we can click link/button, fill text field&hellip;etc, to interactive with UI.</p>

<h4>- Install Capybara gem</h4>

<pre><code>group :test
  gem 'capybara'
end
</code></pre>

<p>Also add this line to test helper file</p>

<pre><code>requrire 'capybara/rails'
</code></pre>

<p>And</p>

<pre><code>$mkdir spec/features
$touch user_signs_in_spec.rb
</code></pre>

<h4>- A sample for user operation:</h4>

<pre><code>feature 'user interacts with the queue' do 

  scenario 'user adds and reorder videos in the queue' do
    category    = Fabricate(:category)
    monk        = Fabricate(:video, title: 'monk', category: category)
    futurama    = Fabricate(:video, title: 'futurama', category: category)
    south_park  = Fabricate(:video, title: 'south park', category: category)

    sign_in
    expect(page).to have_content 'You have signed in.'

    add_video_to_queue(monk)
    expect(page).to have_content(monk.title)

    visit video_path(monk)
    expect(page).not_to have_content('+ My Queue')

    add_video_to_queue(futurama)
    add_video_to_queue(south_park)

    set_video_order(monk, 3)
    set_video_order(futurama, 1)
    set_video_order(south_park, 2)

    expect_video_order(monk, 3)
    expect_video_order(futurama, 1)
    expect_video_order(south_park, 2)
  end
end

def add_video_to_queue(video)
  visit home_path
  find("a[href='/videos/#{video.id}']").click
  expect(page).to have_content(video.title)
  click_link '+ My Queue'
end

def set_video_order(video, order)
  within(:xpath, "//tr[contains(.,'#{video.title}')]") do
    fill_in 'queue_items[][position]', with: order
  end
end

def expect_video_order(video, order)
  expect(find(:xpath, "//tr[contains(.,'#{video.title}')]//input[@type='text']").value).to eq(order.to_s)
end
</code></pre>

<p>here I choose to use <code>:xpath</code>.</p>

<h4>- One level for scenario</h4>

<p>In above sample, I extract methods <code>add_video_to_queue</code>, <code>set_video_order</code>, and <code>expect_video_order</code>. This is we want to keep a principle <code>Abstract one level for scenario</code>. Encapsulating logic code and keep main code readable on the same abstract level can help reader to review.</p>

<h3>Rails Conventions</h3>

<h4>- Merge Params</h4>

<pre><code>= form_tag update_queue_path do
  ...
  %td= text_field_tag 'queue_items[][position]', queue_item.position
  =hidden_field_tag 'queue_items[][id]', queue_item.id

  =submit_tag 'Update'
</code></pre>

<p>Then we will get a hash value <code>params[queue_items] = {position: xxx, id: xxx}</code></p>

<h4>- select_tag</h4>

<pre><code>%td= select_tag 'queue_items[][rating]', options_for_video_reviews(queue_item.rating), include_blank: true
</code></pre>

<p>And <code>options_for_video_reviews</code>:</p>

<pre><code>def options_for_video_reviews(selected = nil)
  options_for_select((1..5).map { |num| [pluralize(num, 'Star'), num]}, selected)
end
</code></pre>

<p>Be careful that <code>[pluralize(num, 'Star'), num]</code> is a pair value.</p>

<h4>- ActiveRecord Transactions</h4>

<p>A sample from Rails Tutorial</p>

<pre><code>ActiveRecord::Base.transaction do
  david.withdrawal(100)
  mary.deposit(100)
end
</code></pre>

<p>If any one of <code>david.withdrawl</code> or <code>mary.deposit</code> raise an exception(<strong>Be careful: there must be a raising error to trigger transaction</strong>), all database record in this action will be rollback. It deal with batch action with database. So I have to care about what functions will raise an exception when fail. Ex. <code>update</code> return a fail, and <code>update!</code> raise an exception.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week2]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/11/reflection-to-tealeaf-course3-week2/"/>
    <updated>2015-03-11T11:21:17+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/11/reflection-to-tealeaf-course3-week2</id>
    <content type="html"><![CDATA[<p>There are 3 kinds of test: <code>Unit</code>, <code>Functional</code>, <code>Integration</code>. In <a href="http://www.tomohung.com/blog/2015/03/06/reflection-to-tealeaf-course3-week1/">week 1</a>, we test <strong>Model</strong>, this should belong to <code>Unit test</code> . And this week we test <strong>Controller</strong>, this should belong to <code>Functional test</code>. I guess it should be <code>Integration test</code> when we move into part of <strong>View</strong> test.</p>

<p>I have to heavily rely on solution videos, there are two main reasons:</p>

<ol>
<li><p>I&rsquo;m not familiar with <code>what to test</code>, because I&rsquo;m a starter for TDD. It&rsquo;s a big conversion <strong>from test laster to test driven</strong>.</p></li>
<li><p>I&rsquo;m not familiar with <code>RSpec</code>. There are some tricks for test controllers when using RSpec.</p></li>
</ol>


<p>For example, when we test `QueueItemsController#create&#8217;, there are 7 tests:</p>

<ul>
<li>it &lsquo;redirects to my queue page&rsquo;</li>
<li>it &lsquo;creates a queue item&rsquo;</li>
<li>it &lsquo;creates the queue item associated with video&rsquo;</li>
<li>it &lsquo;creates the queue item associated with current user&rsquo;</li>
<li>it &lsquo;puts the video as the last one in the queue&rsquo;</li>
<li>it &lsquo;does not add the video in the queue if already existed in the queue&rsquo;</li>
<li>it &lsquo;redirects to sign in page if unauthenticated&rsquo;</li>
</ul>


<p>A simple action needs to do such lots of tests!!</p>

<p>Or here is for <strong>Model</strong> methods: <code>search_by_title</code>:</p>

<ul>
<li>it &lsquo;returns empty array if no match&rsquo;</li>
<li>it &lsquo;returns an array if one video&rsquo;</li>
<li>it &lsquo;returns an array if partial match&rsquo;</li>
<li>it &lsquo;returns an array of all matches ordered by DESC&rsquo;</li>
<li>it &lsquo;returns an empty array for search an empty string&rsquo;</li>
</ul>


<p>To test every possible situations is not an easy work.</p>

<p>Brandon also metioned me that care about using <code>let</code> and <code>before</code>. Because of lots of tests in spec files, we may miss some pre-declare vars by using <code>let</code> or <code>before</code>. Sometimes, it may be better do not clean duplicated codes for code readability.</p>

<p>Second, extract methods into <strong>Model</strong>. ex:</p>

<pre><code class="ruby user.rb">  def queue_include?(video)
    queue_items.map(&amp;:video).include?(video)
  end
</code></pre>

<p>then, I can use this method everywhere in my app.</p>

<h3>Conclusion</h3>

<p>Still on the way to be more familiar to do TDD. :-)</p>
]]></content>
  </entry>
  
</feed>
