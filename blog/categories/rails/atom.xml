<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-02-02T05:39:43+00:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tealeaf Course2 Lesson1 Quiz]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/30/tealeaf-course2-lesson1-quiz/"/>
    <updated>2015-01-30T08:13:42+00:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/30/tealeaf-course2-lesson1-quiz</id>
    <content type="html"><![CDATA[<p>Answer these quizzes, then updated after watching solution.</p>

<h5>1. Why do they call it a relational database?</h5>

<p>  Relational database can store the relationship between data and data. For example, a table store customer&rsquo;s info, and a table store consuming record, these two table can be associated with another table, to establish the customer&rsquo;s consuming history. There are relationships between data and data in relational database. ex. sqlite, MySQL, PostgreSQL ect.</p>

<h5>2. What is SQL?</h5>

<p>  SQL(Structured Query Language), it&rsquo;s domain specific language to manipulate database.</p>

<!--more-->


<h5>3. There are two predominant views into a relational database. What are they, and how are they different?</h5>

<p>  There are two associations concepts in relational database:</p>

<ul>
<li><p>1:M
<strong>One to Many</strong> makes target object can associate with many other objects, like one customer can have many consuming records, we can track the customer&rsquo;s consuming history with this association or we can track the record is generated by which customer.</p></li>
<li><p>M:M
<strong>Many to Many</strong> makes target objects can associate with many other objects, like posts can be assign to many categories, and category can assign to many poasts. We also can track target post or target category is assigned to which one.</p></li>
</ul>


<h5>4. In a table, what do we call the column that serves as the main identifier for a row of data? We&rsquo;re looking for the general database term, not the column name.</h5>

<p>  Attributes. Column indicate that what the row values mean.</p>

<h5>5. What is a foreign key, and how is it used?</h5>

<p>  Every row data in a table is included a <strong>primary key</strong>. If we want to associated with other table, we need this primary key to store which row data we wanna to be connected with this one. The store primary key value&rsquo;s column is called <strong>foreign key</strong>.</p>

<h5>6. At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.</h5>

<p>  ActiveRecord is mapping the data operation in tables. It substitutes SQL operation and using migration files to define &amp; operate table column.</p>

<h5>7. If there&rsquo;s an ActiveRecord model called &ldquo;CrazyMonkey&rdquo;, what should the table name be?</h5>

<p>  If I&rsquo;m confused with this, I can use <code>rails console</code> mode, to run</p>

<pre><code>"CrazyMonkey".tableize
</code></pre>

<p>  and the answer should be <code>crazy_monkeys</code>.</p>

<h5>8. If I&rsquo;m building a 1:M association between Project and Issue, what will the model associations and foreign key be?</h5>

<p>  in model files
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Project ActiveRecord::Base
</span><span class='line'>  has_many :issues
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;class Issue ActiveRecord::Base
</span><span class='line'>  belongs_to :project
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<p>  in migration files
<code>
class CreateIssue ActiveRecord:Migration
  def change
    create_table :issues do |t|
      t.integer :project_id
    end
  end
</code></p>

<h5>9. Given this code</h5>

<pre><code>class Zoo &lt; ActiveRecord::Base
  has_many :animals
end
</code></pre>

<ul>
<li>What do you expect the other model to be and what does database schema look like?</li>
</ul>


<p>  There should be antoher class named &ldquo;Animal&rdquo;, and it belongs to Zoo. Animal should at least have name, and a foriegn key to set to zoo id.</p>

<ul>
<li>What are the methods that are now available to a zoo to call related to animals?</li>
</ul>


<p>  <code>zoo.animals</code></p>

<ul>
<li>How do I create an animal called &ldquo;jumpster&rdquo; in a zoo called &ldquo;San Diego Zoo&rdquo;?</li>
</ul>


<p>  If in <code>rails console</code> mode:</p>

<pre><code class="``">  $ zoo = Zoo.create(name: "San Diego Zoo")
  $ animal = Animal.create(name: "jumpster")
  $ zoo.animals &lt;&lt; animal  
</code></pre>

<h5>10. What is mass assignment? What&rsquo;s the non-mass assignment way of setting values?</h5>

<p>With mass assignment, we can do
<code>assumption fields: title, body</code>
<code>
@post = Post.new(params[:post])
</code></p>

<p>without mass assignment, we need to do this
<code>
@post = Post.new
post.title = "post title"
post.body = "post body"
</code></p>

<h5>11. What does this code do? <code>Animal.first</code></h5>

<p>Query the first data in table <code>Animal</code>.</p>

<h5>12. If I have a table called &ldquo;animals&rdquo; with columns called &ldquo;name&rdquo;, and a model called <code>Animal</code>, how do I instantiate an animal object with name set to &ldquo;Joe&rdquo;. Which methods makes sure it saves to the database?</h5>

<p>This will make sure it saves to database
<code>
Animal.create(name: "Joe")
</code></p>

<p>And this will work too
<code>
animal = Animal.new(name: "Joe")
animal.save
</code></p>

<h5>13. How does a M:M association work at the database level?</h5>

<p>  There is a join table between two relational tables, and it needs these two tables row data primary key to be its foreign key. For example, there is a join table called post_categories, and it stores two foriegn key named: post_id and category_id.</p>

<h5>14. What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?</h5>

<ul>
<li><p>has_and_belongs_to_many
Chris metioned that this method is deprecated. If you don&rsquo;t need to operate the join table, this method is easy to set up association between two tables. And it&rsquo;s doing a more implicit way.</p></li>
<li><p>has_many through:
You have to define has_many relation with join table, also define has_many through: realtion to both target table and join table. This explicit the way to connect target table and join table. It&rsquo;s much easier to understand all realtionship between tables.</p></li>
</ul>


<h5>15. Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?</h5>

<pre><code>user.groups
group.users
</code></pre>
]]></content>
  </entry>
  
</feed>
