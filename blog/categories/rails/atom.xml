<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-02-16T03:15:53+00:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson3]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/16/reflection-to-tealeaf-course2-lesson3/"/>
    <updated>2015-02-16T00:37:25+00:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/16/reflection-to-tealeaf-course2-lesson3</id>
    <content type="html"><![CDATA[<p>In Course2(Rapid Prototyping with Ruby on Rails), <a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">first week</a> I learned about <code>Models and database</code>, <a href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/">second week</a> I learned about <code>Controllers and Views</code>. This week I learned to add some features into my app, and make it vivid!!</p>

<!--more-->


<h3>Authentication</h3>

<p>Rails offer built-in function to help us add authentication. Here are steps:</p>

<ul>
<li>install gem &lsquo;Bcrypt&rsquo;.</li>
</ul>


<pre><code>gem 'bcrypt', '~&gt; 3.1.7' # use gem `bcrypt-ruby`, `=3.0.1` if any problem
</code></pre>

<ul>
<li>run <code>bundle install</code> to install gem.</li>
<li><p>add migration for attribute:<code>password_digest</code>, like:</p>

<pre><code>class AddPasswordDigestToUsers &lt; ActiveRecord::Migration
  def change
    add_column :users, :password_digest, :string
  end
end
</code></pre></li>
<li>add method to <code>Use Model</code></li>
</ul>


<pre><code class="ruby User.rb">class User &lt; ActiveRecord::Base
  has_secure_password
end
</code></pre>

<p><code>has_secure_password</code> built-in some validations, if we want to customize validation, add parameter:</p>

<pre><code class="ruby">has_secure_password validations: false
</code></pre>

<p>here are some test from Rails API:
<code>ruby
user = User.new(name: 'david', password: '', password_confirmation: 'nomatch')
user.save                                                       # =&gt; false, password required
user.password = 'mUc3m00RsqyRe'
user.save                                                       # =&gt; false, confirmation doesn't match
user.password_confirmation = 'mUc3m00RsqyRe'
user.save                                                       # =&gt; true
user.authenticate('notright')                                   # =&gt; false
user.authenticate('mUc3m00RsqyRe')                              # =&gt; user
User.find_by(name: 'david').try(:authenticate, 'notright')      # =&gt; false
User.find_by(name: 'david').try(:authenticate, 'mUc3m00RsqyRe') # =&gt; user
</code></p>

<h3>Login / Logout</h3>

<p>We can use <code>session</code> to store our login information. First add routes</p>

<pre><code class="ruby">  get '/register', to: 'users#new'
  get '/login', to: 'sessions#new'
  post '/login', to: 'sessions#create'
  delete '/logout', to: 'sessions#destroy'
</code></pre>

<p>And <code>SessionsController</code>:</p>

<pre><code class="ruby SessionController.rb">class SessionsController &lt; ApplicationController

  def new 
    @user = User.new
  end

  def create
    user = User.find_by username: params[:username]
    if user &amp;&amp; user.authenticate(params[:password])
      flash[:notice] = 'Login Success.'
      session[:user_id] = user.id
      redirect_to root_path
    else
      flash[:error] = "Username or Password may not correct. Try again."
      render :new
    end
  end

  def destroy
    session[:user_id] = nil
    flash[:notice] = 'Log out'
    redirect_to root_path
  end

end
</code></pre>

<h3>Polymorphic table</h3>

<p>Sometimes many tables have relationship with the same one table, like <code>User</code> has many gravatar images, and <code>Post</code> has many images. So <code>User</code> and <code>Post</code> are using the same table <code>Picture</code>. We can do <code>Polymorpic table</code> association like this:</p>

<pre><code class="ruby">class Picture &lt; ActiveRecord::Base
  belongs_to :imageable, polymorphic: true
end

class User &lt; ActiveRecord::Base
  has_many :pictures, as: :imageable
end

class Post &lt; ActiveRecord::Base
  has_many :pictures, as: :imageable
end
</code></pre>

<p>Then Rails will automatically assign two virtual attribute for us:
- imageable_type
- imageable_id</p>

<p><code>type</code> is stored which object type use this Picture, and <code>id</code> is for that object&rsquo;s table id.</p>

<p>Then, we can save data like this:</p>

<pre><code class="ruby">@picture = Picture.create(imageable: post, user_id: current_user_id)
</code></pre>

<h3>Deploy to Heroku</h3>

<p>Last step, deploy to heroku makes this app engage with people!!</p>

<p>The only thing I&rsquo;ll record here is <code>make sure to run **heroku run rake db:migrate**</code>. Otherwise heroku will not generate a database for us.</p>

<h3>Conclusion</h3>

<p>Seems that my app becomes more and more closer to real world app we used everyday. There&rsquo;re still a lot of things to combine them together for improvement, like <code>tab control</code>, <code>Ajax</code>, <code>friendly routes path name</code>, etc.</p>

<p>Security is one of the most imporatant thing when we using internet, it&rsquo;s absolutely not safe if we store our password by plain text. Use a <code>one way has/ password digest</code> to instead of plain text password. There is one more thing, <code>MD5</code> has been broken too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf Course2 Lesson3 Quiz]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/15/tealeaf-course2-lesson3-quiz/"/>
    <updated>2015-02-15T00:22:00+00:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/15/tealeaf-course2-lesson3-quiz</id>
    <content type="html"><![CDATA[<blockquote><h4>1. What&rsquo;s the difference between rendering and redirecting? What&rsquo;s the impact with regards to instance variables, view templates?</h4></blockquote>

<ul>
<li>rendering: render a template HTML code, like <code>partial</code>.</li>
<li>redirecting: make a new request to controller.</li>
</ul>


<!--more-->


<p>Regards to instance variables for showing view templates, instance variables only survive at the same request, so if we need some information like errors store in instance variables, we need to use <code>render</code> for this condition.</p>

<blockquote><h4>2. If I need to display a message on the view template, and I&rsquo;m redirecting, what&rsquo;s the easiest way to accomplish this?</h4></blockquote>

<p>Use <code>flash</code> to store error message. This is the easiest way to store <code>one message</code>.</p>

<blockquote><h4>3. If I need to display a message on the view template, and I&rsquo;m rendering, what&rsquo;s the easiest way to accomplish this?</h4></blockquote>

<p>Use <code>instance variable</code> to store errors, then <code>render</code>.</p>

<p>* or use <code>flash.now</code> and render it.</p>

<blockquote><h4>4. Explain how we should save passwords to the database.</h4></blockquote>

<p>Use <code>one way hash</code>. Since we can&rsquo;t promise that data in database never be stolen, the way to protect our password is using a <code>one way hash</code> to store the digest. If someone get this digest, it&rsquo;s hard for him to decyphor this digest to a plain text password.</p>

<blockquote><h4>5. What should we do if we have a method that is used in both controllers and views?</h4></blockquote>

<p>Put the methods into controllers, and make them become helpers. Like:</p>

<pre><code>helper_method :current_user
</code></pre>

<p>Now, method <code>current_user</code> can be used in both controllers and views.</p>

<blockquote><h4>6. What is memoization? How is it a performance optimization?</h4></blockquote>

<p>Some repeatedly query action for database will reduce our app performance, using <code>memoization</code> to overcome this.</p>

<pre><code>@comment ||= User.find(session[:user_id]) if session[:user_id]
</code></pre>

<p>Syntax <code>||=</code> do a <code>OR</code> combined action, if <code>@comment</code> is <code>nil</code>, then <code>User.find</code> invokes; if <code>@comment</code> exist, just return @comment without invoke <code>User.find</code>. This prevent to invoke database query again.</p>

<blockquote><h4>7. If we want to prevent unauthenticated users from creating a new comment on a post, what should we do?</h4></blockquote>

<p>Add a helper method <code>required_login</code> in <code>before_action</code> for actions <code>create</code> and &lsquo;&rsquo;. Since this method is used in both <code>post</code> and <code>comment</code>, we can put this method into <code>ApplicationController.rb</code>.</p>

<blockquote><h4>8. Suppose we have the following table for tracking &ldquo;likes&rdquo; in our application. How can we make this table polymorphic? Note that the &ldquo;user_id&rdquo; foreign key is tracking who created the like.</h4></blockquote>

<table>
<thead>
<tr>
<th style="text-align:right;"> id </th>
<th></th>
<th style="text-align:right;"> user_id </th>
<th></th>
<th style="text-align:right;"> photo_id  </th>
<th></th>
<th style="text-align:right;"> video_id  </th>
<th></th>
<th style="text-align:right;"> post_id</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">1 </td>
<td></td>
<td style="text-align:right;">4 </td>
<td></td>
<td style="text-align:right;"> </td>
<td></td>
<td style="text-align:right;"> 12 </td>
<td></td>
<td style="text-align:right;"> </td>
</tr>
<tr>
<td style="text-align:right;">2 </td>
<td></td>
<td style="text-align:right;">7 </td>
<td></td>
<td style="text-align:right;">  </td>
<td></td>
<td style="text-align:right;">  </td>
<td></td>
<td style="text-align:right;">3 </td>
</tr>
<tr>
<td style="text-align:right;">3 </td>
<td></td>
<td style="text-align:right;">2 </td>
<td></td>
<td style="text-align:right;">6 </td>
<td></td>
<td style="text-align:right;">  </td>
<td></td>
<td style="text-align:right;"> </td>
</tr>
</tbody>
</table>


<p>According to this table, there should be 5 tables in database:</p>

<ul>
<li>User</li>
<li>Photo</li>
<li>Video</li>
<li>Post</li>
<li>Like</li>
</ul>


<p>And here are they might be in models:</p>

<pre><code class="ruby User.rb">class User ActiveRecord::Base
  has_many :likes, as: likeable
end
</code></pre>

<pre><code class="ruby Photo.rb">class Photo ActiveRecord::Base
  has_many :likes, as: likeable
end
</code></pre>

<pre><code class="ruby Video.rb">class Video ActiveRecord::Base
  has_many :likes, as: likeable
end
</code></pre>

<pre><code class="ruby Post.rb">class Post ActiveRecord::Base
  has_many :likes, as: likeable
end
</code></pre>

<pre><code class="ruby Like.rb">class Like ActiveRecord::Base
  belongs_to :user_id
  belongs_to :likeable, polymorphic: true
end
</code></pre>

<blockquote><h4>9. How do we set up polymorphic associations at the model layer? Give example for the polymorphic model (eg, Vote) as well as an example parent model (the model on the 1 side, eg, Post).</h4></blockquote>

<pre><code class="ruby ">class Vote &lt; ActiveRecord::Base
  belongs_to :voteable, polymorphic: true
end

class Post &lt; ActiveRecord::Base
  has_many :votes, as: voteable
end
</code></pre>

<blockquote><h4>10. What is an ERD diagram, and why do we need it?</h4></blockquote>

<p>Entity Relationship Dirgram(ERD) stands for tables in database relationship between each others. It&rsquo;s a convinient way to communicate with others what the tables relationship, even for ourselves under developming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson2]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/"/>
    <updated>2015-02-10T08:39:30+00:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2</id>
    <content type="html"><![CDATA[<p><a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">Last week</a>, I know Models and Database side of Rails.</p>

<p>This week Tealeaf reveals the <code>Controller</code> and <code>View</code> part of MVC, I would like to summarize this lesson into two parts: <code>Don't Repeat Yourself</code> and <code>Conventions over Configuration</code>.</p>

<!--more-->


<h3>Don&rsquo;t Repeat Yourself</h3>

<ul>
<li><p>before_action</p>

<p>Like Sinatra, before_action works at Controller, help us to remove repeatedly codes, like</p>

<pre><code>  before_action: :set_post, only: [:show, :edit, :update]
</code></pre>

<pre><code>  def set_post
    @post = Post.find(param[:id])
  end
</code></pre>

<p>then, method <code>set_post</code> works at three actions : show, edit, update by once.</p></li>
<li><p>form partial</p>

<p>Rails offer <code>form partial</code> to help us eliminate repeatedly <code>HTML codes</code>, by Rails convention, if there is a file called <code>/app/views/posts/_post.erb</code>, I can just write code:</p>

<pre><code>  &lt;%= render @post %&gt;
</code></pre>

<p>if @post is a class Post&rsquo;s instance, then Rails will automatically match to the file <code>_post.erb</code>, then render this file.</p>

<p>There is another amazing way to show collection of instances. If I have a collection instance <code>@posts</code> by class Post, then I have write</p>

<pre><code>  &lt;%= render @posts %&gt;
</code></pre>

<p>Rails will also automatically match the file <code>_post.erb</code> to iterate to render <code>@posts</code>. What a clean way to write such codes!</p></li>
<li><p>Helpers for view: fix url and datetime</p>

<p>We also can put some logic in Views into <code>/helpers</code>, like <code>application_helper.rb</code>. Put a lot of logic in Views is a dirty way when reviewing, and Rails have helpers to make us a clean way to do this. <code>Form Helper</code> is another good implement to help us. I&rsquo;ll metion later.</p></li>
<li><p>validations</p>

<p>Rails offer a simple to validate data in Model, like this</p>

<pre><code class="ruby post.rb">validates :title, presence: true, length: {minimum: 5}
</code></pre></li>
</ul>


<h3>Conventions over Configuration</h3>

<ul>
<li><p>CRUD
For most popular actions on web, there are 4 actions: Create, Retrieve, Update, Delete.
Rails offer a RESTful setting to make implemention these actions much simple.</p>

<p>For example, in <code>routes.rb</code>:</p>

<pre><code>  resources :posts
</code></pre>

<p>help us to build 7 actions corespond with VERBs and URIs.</p>

<pre><code>get '/posts/', to: "posts#index", as: "posts"
get '/posts/:id', to: "posts#show", as: "post"
get '/posts/new', to: "posts#new", as: "new_post"
post '/posts/', to: "posts#create",
get '/posts/:id', to: "posts#edit", as: "edit_post"
patch '/posts/:id', to: "posts#update"
delete '/posts/:id', to: "posts#destroy"
</code></pre>

<p>I also can use key word <code>except:</code> or <code>only:</code> to assign which routes will be created:</p>

<pre><code>  resources :posts, except: [:destory]
  resources :comments, only: [:create]
</code></pre></li>
<li><p>nested routes
Rails also offer a way to create nested path like <code>/posts/:id/comments</code></p>

<pre><code>  resources :posts, except: [:destory] do
    resources :comments, only: [:create]
  end
</code></pre>

<p>And this will create route for <code>comments#create</code> by nested route</p>

<pre><code>  post '/posts/:post_id/comments', to: "comments#create", as: "post_comments"
</code></pre></li>
<li><p>model backed form</p>

<p>Using <code>Model backed form</code> can associated with instance, then Rails do a lot of task behind the form.</p>

<pre><code>&lt;%= form_for [@post, @comment] do |f| %&gt;  
  &lt;%= render 'shared/error_messages', instance: @comment %&gt;
  &lt;%= f.label :body, 'Leave a Comment:'%&gt;
  &lt;%= f.text_area :body , rows: 5, class: 'span4'%&gt;
  &lt;br&gt;
  &lt;%= f.submit class: 'btn btn-defualt'%&gt;
&lt;% end %&gt;
</code></pre>

<p><code>[@post, @comment]</code> is a Rails convention for creating matching routes for <code>posts/coments</code>. And this form help us to create HTML element depends on what current action is. There are different actions in <strong>edit</strong> and <strong>new</strong> actions. <code>label</code> will update information if it&rsquo;s at edit action, and form action will generate a hidden attribute to store info that current actions VERB. This are all Rails conventions.</p></li>
<li><p>category_ids for checkboxes</p>

<p>Rails offer a helper to create checkboxes, like this</p>

<pre><code>&lt;%= form_for @post do |f| %&gt;
  &lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name do |cb| %&gt;
    &lt;%= cb.label(class: 'checkbox inline') {cb.check_box(class: 'checkbox') + cb.text}%&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>

<p>And there is a virtual attribute for <code>category_ids</code>, it&rsquo;s generated because we set posts and categories&rsquo;s associations in Post Models:</p>

<pre><code>class Post &lt; ActiveRecord::Base
  belongs_to :creator, foreign_key: :user_id, class_name: "User"
  has_many :comments
  has_many :post_categories
  has_many :categories, through: :post_categories
end
</code></pre>

<p>and <code>category_ids</code> store multiple values to match <code>collection_check_boxes</code>. Rails another magic show.</p></li>
<li><p>auto association by mass-assignment</p>

<p>We can write</p>

<pre><code>  @comment = @post.comments.new(param.require(:comment).permit!)
</code></pre>

<p>Rails will auto assign post_id to @comment.</p></li>
</ul>


<h3>Others</h3>

<ul>
<li><p>Strong parameters</p>

<p>After Rails 4, Rails lock params by default, we need to get params by this way</p>

<pre><code>params.require(:post).permit(:title, :url, :description, category_ids:[])
</code></pre>

<p>If we have to get a collection values, remember to add <code>[]</code></p></li>
<li><p>render vs redirect_to</p>

<p><code>render</code> is for render HTML, and <code>redirect_to</code> is for make a new request. Although we see the page is changed, but it&rsquo;s totally different behind these two ways.</p></li>
</ul>


<h3>Conclusion</h3>

<p>  I can&rsquo;t imagine how can I figure out such mass Rails knowledge by myself in two weeks. Here is my learning processes: <code>watch video -&gt; 'I knew it!' -&gt; do assignment -&gt; 'What? How to do that?' -&gt; watch solution -&gt; 'Ah! I got it!' -&gt; complete assignment</code>. And these things happen again and again.</p>

<p>  Watching option videos and reviewing disscusions also help me to dig out what I missed.</p>

<p>  I should do the official guide again, and I think this time will be a totally different feeling compared with two weeks ago.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf Course2 Lesson2 Quiz]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/08/tealeaf-course2-lesson2-quiz/"/>
    <updated>2015-02-08T06:13:48+00:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/08/tealeaf-course2-lesson2-quiz</id>
    <content type="html"><![CDATA[<blockquote><h4>1. Name all the 7 (or 8) routes exposed by the resources keyword in the routes.rb file. Also name the 4 named routes, and how the request is routed to the controller/action.</h4></blockquote>

<p>  For example by table <code>posts</code>:</p>

<table>
<thead>
<tr>
<th>Prefix   </th>
<th>Verb   </th>
<th>URI   </th>
<th>Controller#Action   </th>
</tr>
</thead>
<tbody>
<tr>
<td>posts   </td>
<td>GET   </td>
<td>/posts   </td>
<td>posts#index   </td>
</tr>
<tr>
<td>new_post   </td>
<td>GET   </td>
<td>/posts/new   </td>
<td>post#new   </td>
</tr>
<tr>
<td>   </td>
<td>POST   </td>
<td>/posts   </td>
<td>post#create   </td>
</tr>
<tr>
<td>post   </td>
<td>GET   </td>
<td>/posts/:id   </td>
<td>post#show   </td>
</tr>
<tr>
<td>edit_post   </td>
<td>GET   </td>
<td>/posts/:id   </td>
<td>post#edit   </td>
</tr>
<tr>
<td>   </td>
<td>PUT/PATCH   </td>
<td>/posts/:id   </td>
<td>post#update   </td>
</tr>
<tr>
<td>   </td>
<td>DELETE   </td>
<td>/posts/:id   </td>
<td>post#destroy   </td>
</tr>
</tbody>
</table>


<!--more-->


<blockquote><h4>2. What is REST and how does it relate to the resources routes?</h4></blockquote>

<p>  REST is abbreviation for <code>Representational State Transfer</code>. It use a VERB and a URI to operate some action for web application. And it&rsquo;s corespond to 4 HTTP VERB: GET, POST, PUT, DELETE with 7 actions: index, show, new, create, edit, update, destroy.</p>

<blockquote><h4>3. What&rsquo;s the major difference between model backed and non-model backed form helpers?</h4></blockquote>

<p>  <code>Model backed form</code> from helpers like <code>form_for</code>, it can automatically association with objects in table, and it can dynamic generate coresponding element for different actions(ex. edit and new).</p>

<p>  <code>Non-model backed form</code> from helpers like <code>form_tag</code>, it operate elements without relationship of tables in database.</p>

<blockquote><h4>4. How does form_for know how to build the <form> element?</h4></blockquote>

<p>  form_for based on given object, like this:
<code>
  &lt;%= form_for @posts do |f| %&gt;
    &lt;%= f.label :title %&gt;
    &lt;%= f.text_field :title %&gt;
    &lt;%= f.submit %&gt;
  &lt;% end %&gt;
</code>
  There&rsquo;s a hidden attribute in form to record that what&rsquo;s action for this request. Rails regconize this hidden attribute to build <form> element. It will automatically create submit button by what action is called.</p>

<blockquote><h4>5. What&rsquo;s the general pattern we use in the actions that handle submission of model-backed forms (ie, the create and update actions)?</h4></blockquote>

<p>For creating a post: <code>POST /posts</code>
<code>
def create
  @post = Post.new(params.require(:post).permit!)
  if @post.save
    redirect_to posts_path
  else
    render :new
  end
end  
</code></p>

<p>  For updating a post: <code>PUT /posts/:id</code>
<code>
def update
  @post = Post.new(params.require(:post).permit!)
  if @post.save
    redirect_to post_path(@post)
  else
    render :edit
  end
end  
</code></p>

<blockquote><h4>6. How exactly do Rails validations get triggered? Where are the errors saved? How do we show the validation messages on the user interface?</h4></blockquote>

<p>  Rails validations get triggered in Model(ActiveRecord::Base), and errors are saved in Model.
  We can use Model&rsquo;s method to show error messages like this:
<code>
  instance.errors.full_messages
</code>
  which instance is Model&rsquo;s instance.</p>

<blockquote><h4>7. What are Rails helpers?</h4></blockquote>

<p>  Rails helpers is a way to implement DRY principle in <code>View</code>, it abstract redundant <strong>logic codes</strong> in Views into helpers.
This make code in View more cleaner without too much logic in it.</p>

<blockquote><h4>8. What are Rails partials?</h4></blockquote>

<p>  Rails partials is a way to implement DRY principle in <code>View</code>, it abstract redundant <strong>HTML codes</strong> in Views into partial forms.</p>

<blockquote><h4>9. When do we use partials vs helpers?</h4></blockquote>

<p>  Partials is to eliminate repeatedly HTML codes in Views, and helpers is to eliminate repeatedly logic codes in Views.</p>

<blockquote><h4>10. When do we use non-model backed forms?</h4></blockquote>

<p>  Some input or showing requirements do not need to be associated with tables in database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newbie for Rails Migration]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/02/newbie-for-rails-migration/"/>
    <updated>2015-02-02T13:46:35+00:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/02/newbie-for-rails-migration</id>
    <content type="html"><![CDATA[<p>As a newbie for Rails, It&rsquo;s normal to do something stupid.</p>

<h2>Modified migration files after <code>rake db:migrate</code></h2>

<p>It&rsquo;s useless!! Be carful that every migration filename including a timestamp, after running <code>rake db:migrate</code> will re-generate schema.rb. Data in schema.rb will show that the lastest timestamp, if there is no any new migration files newer than this timestamp, <code>rake db:migrate</code> will do nothing. Yes! it&rsquo;s nothing!!</p>

<pre><code class="text normally you should see">==  CreateArticles: migrating ==================================================
-- create_table(:articles)
   -&gt; 0.0019s
==  CreateArticles: migrated (0.0020s) =========================================
</code></pre>

<pre><code class="text schema.rb has been updated, rake db:migrate do nothing">$ rake db:migrate
$ rake db:migrate
</code></pre>

<!--more-->


<p>That&rsquo;s why I got stuck on it for a long time, because I make such a stupid mistake.</p>

<p>So, how about using <code>rake db:drop</code> or <code>rake db:rollback</code>. This is also a not smart choice, because you should consider that there may be some other co-workers are working on the same project. If they also run their migration on their computer, then you modified yourself migration files, or do some database operation like <code>rake db:rollback</code>. These actions will lead to some data error for database.</p>

<h2>Create another new migration file for modified database</h2>

<p>Using <code>rake generate migration do_some_change</code> for chaning database layer. Using another file to show the modified history is much clear. Avoid ambiguous and mess up all update contect in migration files is super important.</p>

<pre><code class="text Add column for posts table">class AddColumnToPosts &lt; ActiveRecord::Migration
  def change
    add_column :posts, :user_id, :interger
  end
end
</code></pre>

<h2>Only use <code>rails generate migration</code></h2>

<p>Don&rsquo;t use <code>rails generate</code> for models or controllers etc. It contains a lot of rails magic. Although most of guide tour (including official guide) use this way. But it&rsquo;s easy to misunderstanding what is wrong for operating database layer and ActiveRecord layer. Take care of this!</p>
]]></content>
  </entry>
  
</feed>
