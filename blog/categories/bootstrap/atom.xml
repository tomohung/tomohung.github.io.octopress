<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bootstrap | The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/blog/categories/bootstrap/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2016-08-17T21:51:55+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phoenix With Bootstrap]]></title>
    <link href="http://www.tomohung.com/blog/2016/06/24/phoenix-with-bootstrap/"/>
    <updated>2016-06-24T21:50:28+08:00</updated>
    <id>http://www.tomohung.com/blog/2016/06/24/phoenix-with-bootstrap</id>
    <content type="html"><![CDATA[<p>最近終於真正開始用Phoenix來開發，對於一個前端近乎白痴的人來說，起手式當然要來個匯入Bootstrap才行。</p>

<p>原本以為Phoenix內建就有引入Bootstrap，但使用後才發現原來它只匯入了css，javascript和icon都必需另外處理。找了網路上相關的文章好像都弄的有一點複雜，但經過試誤法後其實蠻簡單的，記錄一下。</p>

<hr />

<p>建立新專案</p>

<pre><code>$ mix phoenix.new bootstrap_example
$ mix deps.get
$ mix phoenix.server
</code></pre>

<p>打開網頁到<code>localhost:4000</code>看看結果，很好，預設的首頁出來了。</p>

<p>再來就是測試javascript相關的原件</p>

<p>修改<code>web/template/page/index.html.eex</code></p>

<p>貼上Bootstrap官網的範例,順便把內容加上icon可以一起測試</p>

<p>&#8220;`</p>

<div>
  <!-- Nav tabs -->
  <ul class="nav nav-tabs" role="tablist">
    <li role="presentation" class="active"><a href="#home" aria-controls="home" role="tab" data-toggle="tab">Home</a></li>
    <li role="presentation"><a href="#profile" aria-controls="profile" role="tab" data-toggle="tab">Profile</a></li>
    <li role="presentation"><a href="#messages" aria-controls="messages" role="tab" data-toggle="tab">Messages</a></li>
  </ul>

  <!-- Tab panes -->
  <div class="tab-content">
    <div role="tabpanel" class="tab-pane active" id="home"><span class="glyphicon glyphicon-home"></span></div>
      <div role="tabpanel" class="tab-pane" id="profile"><span class="glyphicon glyphicon-th-list"></span></div>
      <div role="tabpanel" class="tab-pane" id="messages"><span class="glyphicon glyphicon-file"></span></div>
  </div>

</div>


<pre><code>
Phoenix會自動幫我們更新內容
更新一下瀏覽器，會看到tab list，但是點了之後下方內容不會更新，因為javascript並沒有匯入。

其實Phoenix已經幫我們鋪好路了，來看看設定檔`brunch.config.js`
</code></pre>

<p>exports.config = {
  // See <a href="http://brunch.io/#documentation">http://brunch.io/#documentation</a> for docs.
  files: {
    javascripts: {
      joinTo: &ldquo;js/app.js&rdquo;,</p>

<pre><code>  //
  // To change the order of concatenation of files, explicitly mention here
  // https://github.com/brunch/brunch/tree/master/docs#concatenation
  //  order: {
  //    before: [
  //     "web/static/vendor/js/jquery-2.1.1.js",
  //     "web/static/vendor/js/bootstrap.min.js"
  //   ]
  // }
},
</code></pre>

<p>&hellip;&hellip;..
&#8220;`</p>

<p>把</p>

<pre><code>      order: {
        before: [
           "web/static/vendor/js/jquery-2.1.1.js",
           "web/static/vendor/js/bootstrap.min.js"
        ]
      }
</code></pre>

<p>解除掉,記得前一行的<code>joinTo: "js/app.js",</code>要加上逗號</p>

<p>好，這樣只是設定好要放的路徑，因為bootstrap.min.js相依jquery，所以要下載</p>

<p>既然我們已經用npm來管理套件了，用npm安裝最快囉</p>

<pre><code>$ npm install bootstrap
</code></pre>

<p>jQuery是相依套件npm會一起裝</p>

<p>copy jQuery library</p>

<pre><code>$ mkdir -p web/static/vendor/js/
$ cp  node_modules/jquery/dist/jquery.min.js web/static/vendor/js/jquery-2.1.1.js
</code></pre>

<p>copy Bootstrap library</p>

<pre><code>$ cp node_modules/bootstrap/dist/bootstrap.min.js web/static/vendor/js/bootstrap.min.js
</code></pre>

<p>順便連icon也一起處理</p>

<pre><code>$ mkdir web/static/assets/fonts
$ cp node_modules/bootstrap/dist/fonts/* web/static/assets/fonts/
</code></pre>

<p>大功告成！！！
回去瀏覽器看結果，切換不同的tab都會顯示不同的icon！！</p>

<p>Happy Phoenix!!</p>

<p>Demo: <a href="https://github.com/tomohung/phoenix_bootstrap_example">https://github.com/tomohung/phoenix_bootstrap_example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Week 3]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/13/reflection-to-tealeaf-week-3/"/>
    <updated>2015-01-13T22:23:15+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/13/reflection-to-tealeaf-week-3</id>
    <content type="html"><![CDATA[<p><img class="right <a" src="href="http://i.minus.com/ilSTmPNHVpVTm.png">http://i.minus.com/ilSTmPNHVpVTm.png</a>&#8221; width=&#8221;320&#8221;></p>

<p>It&rsquo;s realy a tough week for me, because I&rsquo;m totally new to web development.
There are lots of material need to be done:</p>

<ul>
<li>One new concept book: HTTP <a href="https://www.gotealeaf.com/books/http">https://www.gotealeaf.com/books/http</a></li>
<li>Two new languages: HTML &amp; CSS <a href="http://www.codecademy.com/tracks/htmlcss">http://www.codecademy.com/tracks/htmlcss</a></li>
<li>Two new frameworks: <a href="http://www.sinatrarb.com/intro.html">Sinatra</a> &amp; <a href="http://getbootstrap.com/">bootstrap</a></li>
</ul>


<p>I think the most important thing in this week is &ldquo;HTTP is stateless&rdquo;.</p>

<p>And using Sinatra show me this property explicit.</p>

<p>Every request in main.rb is independant with each other, using instance variables to store data only survive its scope.</p>

<p>I also write a brief post to memo this property<a href="http://www.tomohung.com/blog/2015/01/14/show-http-is-stateless-by-sinatra/">(HTTP is Stateless)</a>.
Using chache is another way to feel free in thinking programming in the old way.</p>

<p>Though I still use class to complete this assignment, I feel comfortable with this, because I don&rsquo;t need to make a wheel again.</p>

<p>The first struggle in this week is when I saw something like <code>&lt;form action..../&gt;</code>, I have no idea what&rsquo;s this?! because HTML &amp; CSS course in codecademy never metion this. After google that, I found there are plenty of other syntax I didn&rsquo;t know, <a href="http://www.w3schools.com/html/html5_intro.asp">w3shool</a> help me to know more about HTML.</p>

<p>Another struggle is Sinatra, when I first time read the intro, I totally had no idea what those nouns mean. <code>get '/' {}</code> seems not a nature ruby way; what <code>get</code> <code>post</code> are ??</p>

<p>Following with video and implement functions and pages, then I read Sinatra intro again, this time I feel much clear what its said.</p>

<p>Another horrible thing is on viewing video introduce to modern web development. There are so many tools, concepts, languages need to know. Wow&hellip;</p>

<p>To be a web development, I know I have to keep going.
Moving to Lesson 4.</p>

<p>Finally, here is my blog talking about Reflections for tealeaf lessons.
<a href="http://www.tomohung.com/blog/categories/tealeaf/">http://www.tomohung.com/blog/categories/tealeaf/</a></p>
]]></content>
  </entry>
  
</feed>
