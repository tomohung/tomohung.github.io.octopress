<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-03-04T06:41:16+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Titan's Tic Tac Toe]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/03/titans-tic-tac-toe/"/>
    <updated>2015-03-03T09:11:10+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/03/titans-tic-tac-toe</id>
    <content type="html"><![CDATA[<p><img src="http://i.minus.com/i2XJ0y9E48CHg.png"></p>

<h3>Prelude</h3>

<p>This is a blog entry for record my first personal project for Rails, and focus on what&rsquo;s are first time if starting a new project <code>From Zero To One</code>.</p>

<p><code>Titan's Tic Tac Toe</code> is my first personal app for Rails.</p>

<p>Website: <a href="https://young-castle-5534.herokuapp.com/">https://young-castle-5534.herokuapp.com/</a></p>

<p>GitHub repo: <a href="https://github.com/tomohung/tictactoe-rails">https://github.com/tomohung/tictactoe-rails</a></p>

<p>This project is activated by Tealeaf Course 2(Rapid Prototyping with Ruby on Rails), we are asked to do a personal project by ourself. In course 1(Introduction to Ruby and Web Development), we have an optional assignment to build a game <code>Tic Tac Toe</code> engine by Object-Oriented, that is, to give this game AI. I spent a lot of time to design logic, and I believe I have a good job for this. This is why I choose this subject for my personal project. And reuse my code is also a kind of <code>DRY</code> way.</p>

<!--more-->


<p><strong>Warning</strong></p>

<p>I have to admit that I make a big mistake, because I am using a class variable to control <strong>Game Board</strong> status. This work when only me to play with it, but after deployment it will become disaster when multiple player play together. Player share the same game status and sometimes it look weird.</p>

<p>I should use sessions or database to store game status, and extract methods from class GameBoard to controller. I won&rsquo;t fix this problem but writing this blog entry to record this.</p>

<p><strong>Do no use <code>class vars</code> and <code>global vars</code> in Rails.</strong></p>

<h3>Concepts</h3>

<p>Before implementation, I need to split works into pieces.</p>

<ol>
<li>Game enegine.</li>
<li>Game board implementation.</li>
<li>Ladder for record user&rsquo;s game result.</li>
<li>User&rsquo;s register system and Login/out.</li>
</ol>


<h3>Update Environment</h3>

<p>RVM and rbenv are two popular Ruby version manager. I choose RVM, but rbenv is also a good choice.
It makes me easy to switch different versions Ruby between different projects.
I use <code>Ruby version 2.2.0</code>, and <code>Rails 4.2.0</code> for this new project.</p>

<p>Then create a new Rails project</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails new project_name</span></code></pre></td></tr></table></div></figure>


<p>Specify version in GemFile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails', '4.2.0'
</span><span class='line'>ruby "2.2.0"
</span><span class='line'>
</span><span class='line'>gem 'bootstrap-sass', '~&gt; 3.3.3'</span></code></pre></td></tr></table></div></figure>


<h3>Game Engine</h3>

<p>The game engine is already done in Course 1, so I just modified some codes to fit web process.
GitHub repo: <a href="https://github.com/tomohung/tictactoe-rails/blob/master/lib/oo_tic_tac_toe.rb">https://github.com/tomohung/tictactoe-rails/blob/master/lib/oo_tic_tac_toe.rb</a></p>

<h3>Game Board</h3>

<p>  I&rsquo;m a newbie for HTML &amp; CSS, so Bootstrap will be my best choice. It offer lots of template with high quality, and mobile first.</p>

<p>  I choose <a href="http://getbootstrap.com/examples/cover/">template-cover</a> for my project, it looks clean and suit for my application.</p>

<h4>Bootstrap</h4>

<ol>
<li> Download Bootstrap, unzip it, then find source code in <code>/docs/examples/cover</code>.</li>
<li> I got two files, <code>index.html</code> and <code>cover.css</code>.</li>
<li> combine <code>index.html</code> into Rails <code>views/layout/application.html.erb</code>.</li>
</ol>


<p>  It may looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Tic Tac Toe<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= stylesheet_link_tag    &#39;application&#39;, media: &#39;all&#39;, &#39;data-turbolinks-track&#39; =&gt; true %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39; =&gt; true %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;site-wrapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;site-wrapper-inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;cover-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="err">&lt;</span>%= render &#39;layouts/navigator&#39; %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= render &#39;layouts/messages&#39; %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= yield %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= render &#39;layouts/footer&#39; %&gt;
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  I use partial <code>layouts/navigator</code> and <code>layouts/footer</code> to clean the code.</p>

<h4>CSS for cover.css</h4>

<p>  The page looks not good, because CSS is not included. Copy <code>cover.css</code> to <code>/assets/stylesheets</code>. Rails will automatically include CSS files in this directory.</p>

<p>  So far is good, but something wrong when I want to use other bootstrap components.
  After google that, this is because I haven&rsquo;t import bootstrap!! I&rsquo;m using just cover.css for this template.</p>

<p>  Changing file name <code>assets/applications.css</code> to <code>asstes/application.scss</code>, and add this code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  @import &quot;bootstrap-sprockets&quot;;
</span><span class='line'>  @import &quot;bootstrap&quot;;
</span></code></pre></td></tr></table></div></figure>


<p>  <code>bootstrap-sprockets</code> has to be imported otherwise <strong>icon</strong> can&rsquo;t be displayed.</p>

<p>  Well, bootstrap components works, but ruin all my template.</p>

<p>  After trial and error, I merge <code>cover.css</code> code into <code>application.scss</code>, and put behind <code>@import "bootstrap"</code>. Rails may load other css files in <code>assets</code> directory, then application.scss import bootstrap, overwrite those class attributes.</p>

<p>  After these setting, now my cover template works well with Bootstrap. I aslo test on my iPhone, it shows pretty good, Bootstrap is awesome!!</p>

<h4>CSS for GameBoard</h4>

<p>  The hardest part for me is to build a game board. I search from web and get some solution, but there&rsquo;s no better solution to draw a symbol <code>X</code>, I decide to display it by another style circle. One more thing, I add the feature when mouse <code>hover</code> on choosen square, it will render a temparary fake circle. This makes game much friendly. Here is the css file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.doughnut</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">10px</span> <span class="k">solid</span> <span class="m">#f00</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.host_doughnut</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">5px</span> <span class="k">solid</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.unpicked</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">dashed</span> <span class="m">#444</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.unpicked</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">10px</span> <span class="k">solid</span> <span class="m">#f66</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Ajax</h4>

<p>  Everytime player choose the square, the whole page will reload again. This is not good for a modern web app. Using Ajax to improve it.</p>

<p>  The keyword is add a ID for picked squre.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">id</span> <span class="o">=</span> <span class="s1">&#39;pick_&lt;%= number %&gt;&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  in <code>GameController</code>, we use <code>respond_to</code> to trigger js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">game_path</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">js</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">host_pick</span>
</span><span class='line'>      <span class="n">winner</span> <span class="o">=</span> <span class="vi">@board</span><span class="o">.</span><span class="n">game_is_over?</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">winner</span>
</span><span class='line'>        <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;OH NO!! You are DEAD!&#39;</span> <span class="k">if</span> <span class="n">winner</span> <span class="o">==</span> <span class="vi">@host</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:js</span> <span class="o">=&gt;</span> <span class="s2">&quot;window.location = &#39;/game/over&#39;&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note: I use <code>render :js =&gt; "window.location = '/game/over'"</code> to render page /game/over if game is over.</p></blockquote>

<p>  and <code>game.create.js</code> file looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">&lt;</span><span class="sx">% (1..9).each </span><span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;% if @player_picked_numbers.include? number %&gt;</span>
</span><span class='line'>      <span class="err">$</span><span class="p">(</span><span class="s1">&#39;#pick_&lt;%= number %&gt;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="s2">&quot;&lt;div class=&#39;doughnut&#39;&gt;&lt;/div&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% elsif </span><span class="vi">@host_picked_numbers</span><span class="o">.</span><span class="n">include?</span> <span class="n">number</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">      $(&#39;#pick_&lt;%= number %&gt;</span><span class="s1">&#39;).html(&quot;&lt;div class=&#39;</span><span class="n">host_doughnut</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt;&quot;)</span>
</span><span class='line'><span class="sr">    &lt;% end %&gt;</span>
</span><span class='line'><span class="sr">  &lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  Ajax make this game vivid!!</p>

<h3>User&rsquo;s Register</h3>

<p>Since I need to store game record, I have to add User&rsquo;s Register, this is not a difficult stuff if you had gone through course 2. Here is a simple ERD:</p>

<ul>
<li>User: username, digest_password, timestamps, has_many :game_records</li>
<li>GameRecord: user_id, game_result, attack_times</li>
</ul>


<p>User and GameRecord is a one-to-many assocaition.</p>

<p>Create routes, model, controller, and views follow what we learned in course 2.</p>

<h3>Login/out</h3>

<p>  Create a SessionController to manager user login/logout.
  Use session[:user_id] to store data in cookie.</p>

<ul>
<li>def <code>new</code> to render login page.</li>
<li>def <code>create</code> for login.</li>
<li>def <code>destroy</code> for logout.</li>
</ul>


<blockquote><p>Don&rsquo;t forget to add feature: auto login after user register.</p></blockquote>

<h3>Ladder</h3>

<p>I will show three kinds of game result: Keeper, Winner, Loser.
And I need tab navigation here, still copy from Bootstrap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">ul</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;nav nav-tabs&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% params[:tab] </span><span class="o">=</span> <span class="s1">&#39;WIN&#39;</span> <span class="k">if</span> <span class="o">!</span><span class="n">params</span><span class="o">[</span><span class="ss">:tab</span><span class="o">]</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;li class=&quot;&lt;%= &#39;active&#39; if params[:tab] == &#39;TIE&#39; %&gt;</span><span class="s2">&quot;&gt;&lt;a href=&quot;</span><span class="c1">#TIE&quot; data-toggle=&quot;tab&quot;&gt;Keepers&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= &#39;active&#39; if params[:tab] == &#39;WIN&#39; %&gt;&quot;</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;#WIN&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">toggle</span><span class="o">=</span><span class="s2">&quot;tab&quot;</span><span class="o">&gt;</span><span class="no">Heroes</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= &#39;active&#39; if params[:tab] == &#39;LOSE&#39; %&gt;&quot;</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;#LOSE&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">toggle</span><span class="o">=</span><span class="s2">&quot;tab&quot;</span><span class="o">&gt;</span><span class="no">Loser</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;div class=&quot;tab-content&quot;&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= render &#39;column_title&#39; %&gt;  </span>
</span><span class='line'><span class="sr">  &lt;div class=&quot;&lt;%= if (params[:tab] == &#39;TIE&#39; || !params[:tab]) then &#39;tab-pane active&#39;  else &#39;tab-pane&#39; end%&gt;&quot; id=&quot;TIE&quot;&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= render @game_records.where(status: &#39;TIE&#39;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= if params[:tab] == &#39;WIN&#39; then &#39;tab-pane active&#39;  else &#39;tab-pane&#39; end%&gt;&quot;</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;WIN&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= render @game_records.where(status: &#39;WIN&#39;) %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;&lt;%= if params[:tab] == &#39;LOSE&#39; then &#39;tab-pane active&#39;  else &#39;tab-pane&#39; end%&gt;&quot;</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;LOSE&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;%=</span> <span class="n">render</span> <span class="vi">@game_records</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">status</span><span class="p">:</span> <span class="s1">&#39;LOSE&#39;</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tabs do not work? This is because I haven&rsquo;t include javascript for Bootstrap.</p>

<p>Add this line in <code>/assets/javascripts/application.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">bootstrap</span><span class="o">-</span><span class="n">sprockets</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, it works now!!</p>

<p>Then, I found Kevin(Tealeaf Instructor) also write a blog for <a href="http://www.gotealeaf.com/blog/integrating-rails-and-bootstrap-part-1">integrating rails and bootstrap</a>.</p>

<h3>Deploy to Heroku</h3>

<p>Finally, functions all work and ready to deploy to <a href="heroku.com">Heroku</a>. And follow by Heroku instruction, push code, then&hellip;<code>Fail</code>.</p>

<p>Check the log and find something wrong about <code>gem pg</code>. pg is <code>Postgres</code> used by Heroku. Rails default setting is using <code>sqlite3</code>, so I need to do some work in Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails_12factor&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add this code to Gemfile for config :production using Postgres. Run <code>bundle install</code> and git push again, it should work!!</p>

<h3>Conclusion</h3>

<p>In Course 2, we have lots assignments from a prepared template. If I don&rsquo;t start a new project, I will never knew there are lots of minor things I should know. After this project, I have chance to be more familiar with Ruby language, Rails routes, CRUD&hellip;etc.</p>

<h3>Compliment from others</h3>

<p>Record these just for encourage myself to keep going on.</p>

<p>Albert Agram (TA):</p>

<blockquote><p>Hey Tomo, nicely done! I played a few rounds and am impressed. Good job :)
<br/></p></blockquote>

<p>Chris Lee (Tealeaf Instructor):</p>

<blockquote><p>This is incredibly awesome!
<br/>
This type of app doesn&rsquo;t lend itself well to Rails, because it&rsquo;s not
really &ldquo;page oriented&rdquo;. Rails tends to be a better fit for apps like
social networks, or things like that where you have CRUD actions on some
resources.
<br/></p></blockquote>

<p>Brandon Conway (TA):</p>

<blockquote><p>This game is awesome! I really like the ladder implementation.
<br/></p></blockquote>

<p>Eugene Chang:</p>

<blockquote><p>This is a really nice app! After seeing it, I had to constantly resist the temptation of spending more time trying to make my UI look better. Great job!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson4]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/22/reflection-to-tealeaf-course2-lesson4/"/>
    <updated>2015-02-22T21:22:10+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/22/reflection-to-tealeaf-course2-lesson4</id>
    <content type="html"><![CDATA[<p>In Course2(Rapid Prototyping with Ruby on Rails), <a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">first week</a> I learned about <code>Models and database</code>, <a href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/">second week</a> I learned about <code>Controllers and Views</code>. The <a href="http://www.tomohung.com/blog/2015/02/16/reflection-to-tealeaf-course2-lesson3/">third week</a> I learned to add <code>Authentication</code> and <code>Polymorphic table</code>.</p>

<p>And this week, also the last week, I completed all basic functions I need to know. Including Ajax for voting, extract methods into gem, build and publish gem, display time info considering user&rsquo;s timezone.</p>

<!--more-->


<h3>Ajax for voting</h3>

<p>Ajax is a clean way to change View template that is necessary changed, and we don&rsquo;t need to redirect and render full page. Rails offer a way to achieve this.</p>

<ul>
<li>in Controller</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="ss">:back</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>in View</li>
</ul>


<p><code>format.js</code> will lead to the class#action View file, for example: <code>/votes/create.js.erb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="s2">&quot;#voteable_&lt;%= @vote.voteable_type %&gt;_&lt;%= @vote.voteable_id %&gt;&quot;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">html</span><span class="p">(</span><span class="s2">&quot;&lt;%= j render &#39;shared/show_dislike_link&#39;, vote: @vote %&gt;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>notice that in <code>js.erb</code> file, render should specify format by using <code>j render</code>.</p>

<ul>
<li>HTML ID</li>
</ul>


<p>ID is the key to do Ajax.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">span</span> <span class="nb">id</span> <span class="o">=</span> <span class="s1">&#39;vote_&lt;%=vote.id%&gt;&#39;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= link_to vote_path(vote), remote: true, method: :delete do %&gt;</span>
</span><span class='line'><span class="sx">    &lt;i class=</span><span class="s1">&#39;icon-thumbs-up&#39;</span><span class="o">&gt;&lt;</span><span class="sr">/i&gt;</span>
</span><span class='line'><span class="sr">    Cancel</span>
</span><span class='line'><span class="sr">  &lt;% end %&gt;</span>
</span><span class='line'><span class="sr">&lt;/s</span><span class="n">pan</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add <code>id</code> for Ajax, and add <code>remote: true</code> for activate Ajax.</p>

<h3>Extract methods</h3>

<p>Using <code>ActiveSupport::Concern</code> to manage module, info from Rails API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">scope</span> <span class="ss">:disabled</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">disabled</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">class_methods</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I using for vote methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Voteable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:votes</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:voteable</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">like_votes</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">votes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or Sluggable.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Sluggable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before_save</span> <span class="ss">:generate_slug</span>
</span><span class='line'>    <span class="n">class_attribute</span> <span class="ss">:slug_column</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_param</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">slug</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">generate_slug</span>
</span><span class='line'>    <span class="c1"># ignore...</span>
</span><span class='line'>    <span class="c1"># self.send(self.class.slug_column)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sluggable_column</span><span class="p">(</span><span class="n">noun</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">slug_column</span> <span class="o">=</span> <span class="n">noun</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that using <code>class_attribute</code> to connect different class symbol. Setting <code>sluggable_column</code> in <code>Models</code>.</p>

<p>Also notice that <code>slug_column</code> is a class methods and return a symbol, in order to get instance&rsquo;s value, use <code>self.send(self.class.slug_column)</code>.</p>

<h3>Slug</h3>

<p>There are two purpose using slug:</p>

<ul>
<li>Don&rsquo;t expose database information.</li>
<li>URL for SEO friendly</li>
</ul>


<p>The concepts to generate slug are:</p>

<ol>
<li>add a slug column to store slug value</li>
<li>substitute key word like <code>name</code> into slug, avoid some keywords for HTTP like <code>@&amp;``'</code> etc.</li>
<li>check slug exsited or not, otherwise add a number for avoiding the same name.</li>
</ol>


<h3>Using Gems</h3>

<p>Gem is a very convenient way to use the same methods between two different projects.</p>

<ol>
<li>build a gem spec file.</li>
<li>copy exsited module codes into gem specify path.</li>
<li>build the gem</li>
<li>publish the gem</li>
<li>add gem to Gemfile, then <code>bundle install</code>.</li>
</ol>


<h3>Time Zone</h3>

<p>Rails offer time zone methods to do this.</p>

<ul>
<li>in model backed form</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">time_zone_select</span> <span class="ss">:time_zone</span><span class="p">,</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TimeZone</span><span class="o">.</span><span class="n">us_zones</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>in View template</li>
</ul>


<p>changing time zone by (if time zone is &lsquo;Arizona&rsquo;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">datetime</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">in_time_zone</span><span class="p">(</span><span class="s2">&quot;Arizona&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>Using gem is a way for Rails how to DRY our codes. Rails flavored Ajax is also antoher way to do that. Exciting to know these.</p>

<p>Finally, the last week is coming to the end. The final project <code>Postit</code> seems become into reality app we daily use. And rails pieces are making together and show me how to build a basic function app.</p>

<p>After these two course, I think now I have confidence to read through other Rails introducion books I used to not understand.About Course 3, there is no reason I do NOT keep going since I decide to make a career change. Glad that I survived through the first two courses, and I think I&rsquo;m ready for the course 3 challenge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson3]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/16/reflection-to-tealeaf-course2-lesson3/"/>
    <updated>2015-02-16T08:37:25+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/16/reflection-to-tealeaf-course2-lesson3</id>
    <content type="html"><![CDATA[<p>In Course2(Rapid Prototyping with Ruby on Rails), <a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">first week</a> I learned about <code>Models and database</code>, <a href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/">second week</a> I learned about <code>Controllers and Views</code>. This week I learned to add some features into my app, and make it vivid!!</p>

<!--more-->


<h3>Authentication</h3>

<p>Rails offer built-in function to help us add authentication. Here are steps:</p>

<ul>
<li>install gem &lsquo;Bcrypt&rsquo;.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'bcrypt', '~&gt; 3.1.7' # use gem `bcrypt-ruby`, `=3.0.1` if any problem</span></code></pre></td></tr></table></div></figure>


<ul>
<li>run <code>bundle install</code> to install gem.</li>
<li><p>add migration for attribute:<code>password_digest</code>, like:</p>

<pre><code>class AddPasswordDigestToUsers &lt; ActiveRecord::Migration
  def change
    add_column :users, :password_digest, :string
  end
end
</code></pre></li>
<li>add method to <code>Use Model</code></li>
</ul>


<figure class='code'><figcaption><span>User.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_secure_password</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>has_secure_password</code> built-in some validations, if we want to customize validation, add parameter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">has_secure_password</span> <span class="ss">validations</span><span class="p">:</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>here are some test from Rails API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;david&#39;</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s1">&#39;nomatch&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span>                                                       <span class="c1"># =&gt; false, password required</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s1">&#39;mUc3m00RsqyRe&#39;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span>                                                       <span class="c1"># =&gt; false, confirmation doesn&#39;t match</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="o">=</span> <span class="s1">&#39;mUc3m00RsqyRe&#39;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span>                                                       <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="s1">&#39;notright&#39;</span><span class="p">)</span>                                   <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="s1">&#39;mUc3m00RsqyRe&#39;</span><span class="p">)</span>                              <span class="c1"># =&gt; user</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;david&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:authenticate</span><span class="p">,</span> <span class="s1">&#39;notright&#39;</span><span class="p">)</span>      <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;david&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:authenticate</span><span class="p">,</span> <span class="s1">&#39;mUc3m00RsqyRe&#39;</span><span class="p">)</span> <span class="c1"># =&gt; user</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Login / Logout</h3>

<p>We can use <code>session</code> to store our login information. First add routes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;users#new&#39;</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;sessions#new&#39;</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;sessions#create&#39;</span>
</span><span class='line'>  <span class="n">delete</span> <span class="s1">&#39;/logout&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;sessions#destroy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>SessionsController</code>:</p>

<figure class='code'><figcaption><span>SessionController.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span> <span class="ss">username</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Login Success.&#39;</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Username or Password may not correct. Try again.&quot;</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Log out&#39;</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Polymorphic table</h3>

<p>Sometimes many tables have relationship with the same one table, like <code>User</code> has many gravatar images, and <code>Post</code> has many images. So <code>User</code> and <code>Post</code> are using the same table <code>Picture</code>. We can do <code>Polymorpic table</code> association like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Picture</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:imageable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:pictures</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:imageable</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:pictures</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:imageable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then Rails will automatically assign two virtual attribute for us:<code>imageable_type</code> and <code>imageable_id</code></p>

<p><code>type</code> is stored which object type use this Picture, and <code>id</code> is for that object&rsquo;s table id.</p>

<p>Then, we can save data like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@picture</span> <span class="o">=</span> <span class="no">Picture</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">imageable</span><span class="p">:</span> <span class="n">post</span><span class="p">,</span> <span class="ss">user_id</span><span class="p">:</span> <span class="n">current_user_id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Deploy to Heroku</h3>

<p>Last step, deploy to heroku makes this app engage with people!!</p>

<p>The only thing I&rsquo;ll record here is <code>make sure to run **heroku run rake db:migrate**</code>. Otherwise heroku will not generate a database for us.</p>

<h3>Conclusion</h3>

<p>Seems that my app becomes more and more closer to real world app we used everyday. There&rsquo;re still a lot of things to combine them together for improvement, like <code>tab control</code>, <code>Ajax</code>, <code>friendly routes path name</code>, etc.</p>

<p>Security is one of the most imporatant thing when we using internet, it&rsquo;s absolutely not safe if we store our password by plain text. Use a <code>one way has/ password digest</code> to instead of plain text password. There is one more thing, <code>MD5</code> has been broken too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf Course2 Lesson3 Quiz]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/15/tealeaf-course2-lesson3-quiz/"/>
    <updated>2015-02-15T08:22:00+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/15/tealeaf-course2-lesson3-quiz</id>
    <content type="html"><![CDATA[<blockquote><h4>1. What&rsquo;s the difference between rendering and redirecting? What&rsquo;s the impact with regards to instance variables, view templates?</h4></blockquote>

<ul>
<li>rendering: render a template HTML code, like <code>partial</code>.</li>
<li>redirecting: make a new request to controller.</li>
</ul>


<!--more-->


<p>Regards to instance variables for showing view templates, instance variables only survive at the same request, so if we need some information like errors store in instance variables, we need to use <code>render</code> for this condition.</p>

<blockquote><h4>2. If I need to display a message on the view template, and I&rsquo;m redirecting, what&rsquo;s the easiest way to accomplish this?</h4></blockquote>

<p>Use <code>flash</code> to store error message. This is the easiest way to store <code>one message</code>.</p>

<blockquote><h4>3. If I need to display a message on the view template, and I&rsquo;m rendering, what&rsquo;s the easiest way to accomplish this?</h4></blockquote>

<p>Use <code>instance variable</code> to store errors, then <code>render</code>.</p>

<p>* or use <code>flash.now</code> and render it.</p>

<blockquote><h4>4. Explain how we should save passwords to the database.</h4></blockquote>

<p>Use <code>one way hash</code>. Since we can&rsquo;t promise that data in database never be stolen, the way to protect our password is using a <code>one way hash</code> to store the digest. If someone get this digest, it&rsquo;s hard for him to decyphor this digest to a plain text password.</p>

<blockquote><h4>5. What should we do if we have a method that is used in both controllers and views?</h4></blockquote>

<p>Put the methods into controllers, and make them become helpers. Like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>helper_method :current_user</span></code></pre></td></tr></table></div></figure>


<p>Now, method <code>current_user</code> can be used in both controllers and views.</p>

<blockquote><h4>6. What is memoization? How is it a performance optimization?</h4></blockquote>

<p>Some repeatedly query action for database will reduce our app performance, using <code>memoization</code> to overcome this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@comment ||= User.find(session[:user_id]) if session[:user_id]</span></code></pre></td></tr></table></div></figure>


<p>Syntax <code>||=</code> do a <code>OR</code> combined action, if <code>@comment</code> is <code>nil</code>, then <code>User.find</code> invokes; if <code>@comment</code> exist, just return @comment without invoke <code>User.find</code>. This prevent to invoke database query again.</p>

<blockquote><h4>7. If we want to prevent unauthenticated users from creating a new comment on a post, what should we do?</h4></blockquote>

<p>Add a helper method <code>required_login</code> in <code>before_action</code> for actions <code>create</code> and &lsquo;&rsquo;. Since this method is used in both <code>post</code> and <code>comment</code>, we can put this method into <code>ApplicationController.rb</code>.</p>

<blockquote><h4>8. Suppose we have the following table for tracking &ldquo;likes&rdquo; in our application. How can we make this table polymorphic? Note that the &ldquo;user_id&rdquo; foreign key is tracking who created the like.</h4></blockquote>

<table>
<thead>
<tr>
<th style="text-align:right;"> id </th>
<th></th>
<th style="text-align:right;"> user_id </th>
<th></th>
<th style="text-align:right;"> photo_id  </th>
<th></th>
<th style="text-align:right;"> video_id  </th>
<th></th>
<th style="text-align:right;"> post_id</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right;">1 </td>
<td></td>
<td style="text-align:right;">4 </td>
<td></td>
<td style="text-align:right;"> </td>
<td></td>
<td style="text-align:right;"> 12 </td>
<td></td>
<td style="text-align:right;"> </td>
</tr>
<tr>
<td style="text-align:right;">2 </td>
<td></td>
<td style="text-align:right;">7 </td>
<td></td>
<td style="text-align:right;">  </td>
<td></td>
<td style="text-align:right;">  </td>
<td></td>
<td style="text-align:right;">3 </td>
</tr>
<tr>
<td style="text-align:right;">3 </td>
<td></td>
<td style="text-align:right;">2 </td>
<td></td>
<td style="text-align:right;">6 </td>
<td></td>
<td style="text-align:right;">  </td>
<td></td>
<td style="text-align:right;"> </td>
</tr>
</tbody>
</table>


<p>According to this table, there should be 5 tables in database:</p>

<ul>
<li>User</li>
<li>Photo</li>
<li>Video</li>
<li>Post</li>
<li>Like</li>
</ul>


<p>And here are they might be in models:</p>

<figure class='code'><figcaption><span>User.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:likes</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="n">likeable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Photo.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Photo</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:likes</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="n">likeable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Video.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Video</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:likes</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="n">likeable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:likes</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="n">likeable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Like.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Like</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user_id</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:likeable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><h4>9. How do we set up polymorphic associations at the model layer? Give example for the polymorphic model (eg, Vote) as well as an example parent model (the model on the 1 side, eg, Post).</h4></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Vote</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:voteable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:votes</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="n">voteable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><h4>10. What is an ERD diagram, and why do we need it?</h4></blockquote>

<p>Entity Relationship Dirgram(ERD) stands for tables in database relationship between each others. It&rsquo;s a convinient way to communicate with others what the tables relationship, even for ourselves under developming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson2]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/"/>
    <updated>2015-02-10T16:39:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2</id>
    <content type="html"><![CDATA[<p><a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">Last week</a>, I know Models and Database side of Rails.</p>

<p>This week Tealeaf reveals the <code>Controller</code> and <code>View</code> part of MVC, I would like to summarize this lesson into two parts: <code>Don't Repeat Yourself</code> and <code>Conventions over Configuration</code>.</p>

<!--more-->


<h3>Don&rsquo;t Repeat Yourself</h3>

<ul>
<li><p>before_action</p>

<p>Like Sinatra, before_action works at Controller, help us to remove repeatedly codes, like</p>

<pre><code>  before_action: :set_post, only: [:show, :edit, :update]
</code></pre>

<pre><code>  def set_post
    @post = Post.find(param[:id])
  end
</code></pre>

<p>then, method <code>set_post</code> works at three actions : show, edit, update by once.</p></li>
<li><p>form partial</p>

<p>Rails offer <code>form partial</code> to help us eliminate repeatedly <code>HTML codes</code>, by Rails convention, if there is a file called <code>/app/views/posts/_post.erb</code>, I can just write code:</p>

<pre><code>  &lt;%= render @post %&gt;
</code></pre>

<p>if @post is a class Post&rsquo;s instance, then Rails will automatically match to the file <code>_post.erb</code>, then render this file.</p>

<p>There is another amazing way to show collection of instances. If I have a collection instance <code>@posts</code> by class Post, then I have write</p>

<pre><code>  &lt;%= render @posts %&gt;
</code></pre>

<p>Rails will also automatically match the file <code>_post.erb</code> to iterate to render <code>@posts</code>. What a clean way to write such codes!</p></li>
<li><p>Helpers for view: fix url and datetime</p>

<p>We also can put some logic in Views into <code>/helpers</code>, like <code>application_helper.rb</code>. Put a lot of logic in Views is a dirty way when reviewing, and Rails have helpers to make us a clean way to do this. <code>Form Helper</code> is another good implement to help us. I&rsquo;ll metion later.</p></li>
<li><p>validations</p>

<p>Rails offer a simple to validate data in Model, like this</p>

<pre><code class="ruby post.rb">validates :title, presence: true, length: {minimum: 5}
</code></pre></li>
</ul>


<h3>Conventions over Configuration</h3>

<ul>
<li><p>CRUD
For most popular actions on web, there are 4 actions: Create, Retrieve, Update, Delete.
Rails offer a RESTful setting to make implemention these actions much simple.</p>

<p>For example, in <code>routes.rb</code>:</p>

<pre><code>  resources :posts
</code></pre>

<p>help us to build 7 actions corespond with VERBs and URIs.</p>

<pre><code>get '/posts/', to: "posts#index", as: "posts"
get '/posts/:id', to: "posts#show", as: "post"
get '/posts/new', to: "posts#new", as: "new_post"
post '/posts/', to: "posts#create",
get '/posts/:id', to: "posts#edit", as: "edit_post"
patch '/posts/:id', to: "posts#update"
delete '/posts/:id', to: "posts#destroy"
</code></pre>

<p>I also can use key word <code>except:</code> or <code>only:</code> to assign which routes will be created:</p>

<pre><code>  resources :posts, except: [:destory]
  resources :comments, only: [:create]
</code></pre></li>
<li><p>nested routes
Rails also offer a way to create nested path like <code>/posts/:id/comments</code></p>

<pre><code>  resources :posts, except: [:destory] do
    resources :comments, only: [:create]
  end
</code></pre>

<p>And this will create route for <code>comments#create</code> by nested route</p>

<pre><code>  post '/posts/:post_id/comments', to: "comments#create", as: "post_comments"
</code></pre></li>
<li><p>model backed form</p>

<p>Using <code>Model backed form</code> can associated with instance, then Rails do a lot of task behind the form.</p>

<pre><code>&lt;%= form_for [@post, @comment] do |f| %&gt;  
  &lt;%= render 'shared/error_messages', instance: @comment %&gt;
  &lt;%= f.label :body, 'Leave a Comment:'%&gt;
  &lt;%= f.text_area :body , rows: 5, class: 'span4'%&gt;
  &lt;br&gt;
  &lt;%= f.submit class: 'btn btn-defualt'%&gt;
&lt;% end %&gt;
</code></pre>

<p><code>[@post, @comment]</code> is a Rails convention for creating matching routes for <code>posts/coments</code>. And this form help us to create HTML element depends on what current action is. There are different actions in <strong>edit</strong> and <strong>new</strong> actions. <code>label</code> will update information if it&rsquo;s at edit action, and form action will generate a hidden attribute to store info that current actions VERB. This are all Rails conventions.</p></li>
<li><p>category_ids for checkboxes</p>

<p>Rails offer a helper to create checkboxes, like this</p>

<pre><code>&lt;%= form_for @post do |f| %&gt;
  &lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name do |cb| %&gt;
    &lt;%= cb.label(class: 'checkbox inline') {cb.check_box(class: 'checkbox') + cb.text}%&gt;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>

<p>And there is a virtual attribute for <code>category_ids</code>, it&rsquo;s generated because we set posts and categories&rsquo;s associations in Post Models:</p>

<pre><code>class Post &lt; ActiveRecord::Base
  belongs_to :creator, foreign_key: :user_id, class_name: "User"
  has_many :comments
  has_many :post_categories
  has_many :categories, through: :post_categories
end
</code></pre>

<p>and <code>category_ids</code> store multiple values to match <code>collection_check_boxes</code>. Rails another magic show.</p></li>
<li><p>auto association by mass-assignment</p>

<p>We can write</p>

<pre><code>  @comment = @post.comments.new(param.require(:comment).permit!)
</code></pre>

<p>Rails will auto assign post_id to @comment.</p></li>
</ul>


<h3>Others</h3>

<ul>
<li><p>Strong parameters</p>

<p>After Rails 4, Rails lock params by default, we need to get params by this way</p>

<pre><code>params.require(:post).permit(:title, :url, :description, category_ids:[])
</code></pre>

<p>If we have to get a collection values, remember to add <code>[]</code></p></li>
<li><p>render vs redirect_to</p>

<p><code>render</code> is for render HTML, and <code>redirect_to</code> is for make a new request. Although we see the page is changed, but it&rsquo;s totally different behind these two ways.</p></li>
</ul>


<h3>Conclusion</h3>

<p>  I can&rsquo;t imagine how can I figure out such mass Rails knowledge by myself in two weeks. Here is my learning processes: <code>watch video -&gt; 'I knew it!' -&gt; do assignment -&gt; 'What? How to do that?' -&gt; watch solution -&gt; 'Ah! I got it!' -&gt; complete assignment</code>. And these things happen again and again.</p>

<p>  Watching option videos and reviewing disscusions also help me to dig out what I missed.</p>

<p>  I should do the official guide again, and I think this time will be a totally different feeling compared with two weeks ago.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf Course2 Lesson2 Quiz]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/08/tealeaf-course2-lesson2-quiz/"/>
    <updated>2015-02-08T14:13:48+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/08/tealeaf-course2-lesson2-quiz</id>
    <content type="html"><![CDATA[<blockquote><h4>1. Name all the 7 (or 8) routes exposed by the resources keyword in the routes.rb file. Also name the 4 named routes, and how the request is routed to the controller/action.</h4></blockquote>

<p>  For example by table <code>posts</code>:</p>

<table>
<thead>
<tr>
<th>Prefix   </th>
<th>Verb   </th>
<th>URI   </th>
<th>Controller#Action   </th>
</tr>
</thead>
<tbody>
<tr>
<td>posts   </td>
<td>GET   </td>
<td>/posts   </td>
<td>posts#index   </td>
</tr>
<tr>
<td>new_post   </td>
<td>GET   </td>
<td>/posts/new   </td>
<td>post#new   </td>
</tr>
<tr>
<td>   </td>
<td>POST   </td>
<td>/posts   </td>
<td>post#create   </td>
</tr>
<tr>
<td>post   </td>
<td>GET   </td>
<td>/posts/:id   </td>
<td>post#show   </td>
</tr>
<tr>
<td>edit_post   </td>
<td>GET   </td>
<td>/posts/:id   </td>
<td>post#edit   </td>
</tr>
<tr>
<td>   </td>
<td>PUT/PATCH   </td>
<td>/posts/:id   </td>
<td>post#update   </td>
</tr>
<tr>
<td>   </td>
<td>DELETE   </td>
<td>/posts/:id   </td>
<td>post#destroy   </td>
</tr>
</tbody>
</table>


<!--more-->


<blockquote><h4>2. What is REST and how does it relate to the resources routes?</h4></blockquote>

<p>  REST is abbreviation for <code>Representational State Transfer</code>. It use a VERB and a URI to operate some action for web application. And it&rsquo;s corespond to 4 HTTP VERB: GET, POST, PUT, DELETE with 7 actions: index, show, new, create, edit, update, destroy.</p>

<blockquote><h4>3. What&rsquo;s the major difference between model backed and non-model backed form helpers?</h4></blockquote>

<p>  <code>Model backed form</code> from helpers like <code>form_for</code>, it can automatically association with objects in table, and it can dynamic generate coresponding element for different actions(ex. edit and new).</p>

<p>  <code>Non-model backed form</code> from helpers like <code>form_tag</code>, it operate elements without relationship of tables in database.</p>

<blockquote><h4>4. How does form_for know how to build the <form> element?</h4></blockquote>

<p>  form_for based on given object, like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;%= form_for @posts do |f| %&gt;
</span><span class='line'>    &lt;%= f.label :title %&gt;
</span><span class='line'>    &lt;%= f.text_field :title %&gt;
</span><span class='line'>    &lt;%= f.submit %&gt;
</span><span class='line'>  &lt;% end %&gt;</span></code></pre></td></tr></table></div></figure>


<p>  There&rsquo;s a hidden attribute in form to record that what&rsquo;s action for this request. Rails regconize this hidden attribute to build <form> element. It will automatically create submit button by what action is called.</p>

<blockquote><h4>5. What&rsquo;s the general pattern we use in the actions that handle submission of model-backed forms (ie, the create and update actions)?</h4></blockquote>

<p>For creating a post: <code>POST /posts</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def create
</span><span class='line'>  @post = Post.new(params.require(:post).permit!)
</span><span class='line'>  if @post.save
</span><span class='line'>    redirect_to posts_path
</span><span class='line'>  else
</span><span class='line'>    render :new
</span><span class='line'>  end
</span><span class='line'>end  </span></code></pre></td></tr></table></div></figure>


<p>  For updating a post: <code>PUT /posts/:id</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def update
</span><span class='line'>  @post = Post.new(params.require(:post).permit!)
</span><span class='line'>  if @post.save
</span><span class='line'>    redirect_to post_path(@post)
</span><span class='line'>  else
</span><span class='line'>    render :edit
</span><span class='line'>  end
</span><span class='line'>end  </span></code></pre></td></tr></table></div></figure>


<blockquote><h4>6. How exactly do Rails validations get triggered? Where are the errors saved? How do we show the validation messages on the user interface?</h4></blockquote>

<p>  Rails validations get triggered in Model(ActiveRecord::Base), and errors are saved in Model.
  We can use Model&rsquo;s method to show error messages like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  instance.errors.full_messages</span></code></pre></td></tr></table></div></figure>


<p>  which instance is Model&rsquo;s instance.</p>

<blockquote><h4>7. What are Rails helpers?</h4></blockquote>

<p>  Rails helpers is a way to implement DRY principle in <code>View</code>, it abstract redundant <strong>logic codes</strong> in Views into helpers.
This make code in View more cleaner without too much logic in it.</p>

<blockquote><h4>8. What are Rails partials?</h4></blockquote>

<p>  Rails partials is a way to implement DRY principle in <code>View</code>, it abstract redundant <strong>HTML codes</strong> in Views into partial forms.</p>

<blockquote><h4>9. When do we use partials vs helpers?</h4></blockquote>

<p>  Partials is to eliminate repeatedly HTML codes in Views, and helpers is to eliminate repeatedly logic codes in Views.</p>

<blockquote><h4>10. When do we use non-model backed forms?</h4></blockquote>

<p>  Some input or showing requirements do not need to be associated with tables in database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newbie for Rails Migration]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/02/newbie-for-rails-migration/"/>
    <updated>2015-02-02T21:46:35+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/02/newbie-for-rails-migration</id>
    <content type="html"><![CDATA[<p>As a newbie for Rails, It&rsquo;s normal to do something stupid.</p>

<h2>Modified migration files after <code>rake db:migrate</code></h2>

<p>It&rsquo;s useless!! Be carful that every migration filename including a timestamp, after running <code>rake db:migrate</code> will re-generate schema.rb. Data in schema.rb will show that the lastest timestamp, if there is no any new migration files newer than this timestamp, <code>rake db:migrate</code> will do nothing. Yes! it&rsquo;s nothing!!</p>

<figure class='code'><figcaption><span>normally you should see</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>==  CreateArticles: migrating ==================================================
</span><span class='line'>-- create_table(:articles)
</span><span class='line'>   -&gt; 0.0019s
</span><span class='line'>==  CreateArticles: migrated (0.0020s) =========================================
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>schema.rb has been updated, rake db:migrate do nothing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ rake db:migrate
</span><span class='line'>$ rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>That&rsquo;s why I got stuck on it for a long time, because I make such a stupid mistake.</p>

<p>So, how about using <code>rake db:drop</code> or <code>rake db:rollback</code>. This is also a not smart choice, because you should consider that there may be some other co-workers are working on the same project. If they also run their migration on their computer, then you modified yourself migration files, or do some database operation like <code>rake db:rollback</code>. These actions will lead to some data error for database.</p>

<h2>Create another new migration file for modified database</h2>

<p>Using <code>rake generate migration do_some_change</code> for chaning database layer. Using another file to show the modified history is much clear. Avoid ambiguous and mess up all update contect in migration files is super important.</p>

<figure class='code'><figcaption><span>Add column for posts table</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>class AddColumnToPosts &lt; ActiveRecord::Migration
</span><span class='line'>  def change
</span><span class='line'>    add_column :posts, :user_id, :interger
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h2>Only use <code>rails generate migration</code></h2>

<p>Don&rsquo;t use <code>rails generate</code> for models or controllers etc. It contains a lot of rails magic. Although most of guide tour (including official guide) use this way. But it&rsquo;s easy to misunderstanding what is wrong for operating database layer and ActiveRecord layer. Take care of this!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course 2 Lesson 1]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/"/>
    <updated>2015-02-02T16:05:05+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1</id>
    <content type="html"><![CDATA[<p>Finally, Rails is coming.</p>

<p>Before join Tealeaf, I&rsquo;ve tried few times to follow some rails guide books. I just can type some magic codes to build simplest web app but didn&rsquo;t know why at all, because I even didn&rsquo;t know what ruby is.</p>

<p>This time, passing through course 1, I knew what the ruby is, then following <a href="http://guides.rubyonrails.org/getting_started.html">official tour guide</a>, it&rsquo;s much clear than other books I&rsquo;ve seen. But I still got stuck on creating many-to-many relationship, because I made a stupid mistake here: <em>I modified migration file after running <code>rake db:migrate</code></em>.</p>

<p>Then I dived into solution videos, and Chirs said that:</p>

<blockquote><p>Don&rsquo;t use <code>rails generate</code> except <code>migration</code></p></blockquote>

<p>I do love this way, because:</p>

<ol>
<li><p>I never saw other&rsquo;s show this way to build migration, they always use <code>rails generate model</code> to create model and migration. And the problem is, I thought this is the only way to create models and migrations!! And I just thought this is Rails magic, I don&rsquo;t need to think too much.</p></li>
<li><p>When I got stuck because I didn&rsquo;t know I can&rsquo;t modified migration files after running <code>rake db:migrate</code>. Make sure migration setting is all done before running <code>rake db:migrate</code> is very important. And this is just for ActiveRecord layer, database is another layer. It&rsquo;s much easier to understand how could be a disaster to modified/delete migration files working with database layer.</p></li>
</ol>


<p>I make <a href="http://www.tomohung.com/blog/2015/02/02/newbie-for-rails-migration/">a post to record my big step for Rails</a>.</p>

<p>I also try to detect tealeaf discus panel, becuase I think it&rsquo;s better to <code>show who kudos this post</code>. Sometimes I just want to give a kudos for people reply my post without saying something more, but it&rsquo;s wierd for others to read this post, because they can&rsquo;t see kudos I already gave the post. Anyway, here is my ERD for discuss panel.</p>

<p><img src="http://i.minus.com/ibfrZjiBfElndg.jpg"></p>

<p>I&rsquo;m super satisfied that this week I found my mistake when using migrations, and I think there must be other mistake for controller&rsquo;s and view&rsquo;s. Moving to next lesson!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tealeaf Course2 Lesson1 Quiz]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/30/tealeaf-course2-lesson1-quiz/"/>
    <updated>2015-01-30T16:13:42+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/30/tealeaf-course2-lesson1-quiz</id>
    <content type="html"><![CDATA[<p>Answer these quizzes, then updated after watching solution.</p>

<h2>1. Why do they call it a relational database?</h2>

<p>  Relational database can store the relationship between data and data. For example, a table store customer&rsquo;s info, and a table store consuming record, these two table can be associated with another table, to establish the customer&rsquo;s consuming history. There are relationships between data and data in relational database. ex. sqlite, MySQL, PostgreSQL ect.</p>

<blockquote><p>the tables within the database are associated with each other. This association can be created with primary/foreign keys and various syntax.</p></blockquote>

<h2>2. What is SQL?</h2>

<p>  SQL(Structured Query Language), it&rsquo;s domain specific language to manipulate database.</p>

<!--more-->


<h2>3. There are two predominant views into a relational database. What are they, and how are they different?</h2>

<p>  There are two associations concepts in relational database:</p>

<ul>
<li><p>1:M
<strong>One to Many</strong> makes target object can associate with many other objects, like one customer can have many consuming records, we can track the customer&rsquo;s consuming history with this association or we can track the record is generated by which customer.</p></li>
<li><p>M:M
<strong>Many to Many</strong> makes target objects can associate with many other objects, like posts can be assign to many categories, and category can assign to many poasts. We also can track target post or target category is assigned to which one.</p></li>
</ul>


<blockquote><p>The two predominant views are the data and schema views.
Data view displays like a spreadsheet, with the table columns at the top and rows of data per each object instance.
A schema view shows us the column names and the value type of each column.</p></blockquote>

<h2>4. In a table, what do we call the column that serves as the main identifier for a row of data? We&rsquo;re looking for the general database term, not the column name.</h2>

<p>  Attributes. Column indicate that what the row values mean.</p>

<blockquote><p>We call this the &ldquo;primary key&rdquo;.</p></blockquote>

<h2>5. What is a foreign key, and how is it used?</h2>

<p>  Every row data in a table is included a <strong>primary key</strong>. If we want to associated with other table, we need this primary key to store which row data we wanna to be connected with this one. The store primary key value&rsquo;s column is called <strong>foreign key</strong>.</p>

<blockquote><p>A foreign key is the identifier that connects an association with the models involved. The foreign key is always on the &ldquo;many&rdquo; side and is always in an integer type.</p></blockquote>

<h2>6. At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.</h2>

<p>  ActiveRecord is mapping the data operation in tables. It substitutes SQL operation and using migration files to define &amp; operate table column.</p>

<blockquote><p>ActiveRecord is a way to access the database. A database table is related to a class. An object of that class is created as a row in the table. This object can have different attribute values shown as the columns in the table. We can create, retrieve, update, and delete the object instances by altering the database table.</p></blockquote>

<h2>7. If there&rsquo;s an ActiveRecord model called &ldquo;CrazyMonkey&rdquo;, what should the table name be?</h2>

<p>  If I&rsquo;m confused with this, I can use <code>rails console</code> mode, to run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"CrazyMonkey".tableize</span></code></pre></td></tr></table></div></figure>


<p>  and the answer should be <code>crazy_monkeys</code>.</p>

<h2>8. If I&rsquo;m building a 1:M association between Project and Issue, what will the model associations and foreign key be?</h2>

<p>  in model files</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Project ActiveRecord::Base
</span><span class='line'>  has_many :issues
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class Issue ActiveRecord::Base
</span><span class='line'>  belongs_to :project
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>  in migration files</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CreateIssue ActiveRecord:Migration
</span><span class='line'>  def change
</span><span class='line'>    create_table :issues do |t|
</span><span class='line'>      t.integer :project_id
</span><span class='line'>    end
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<h2>9. Given this code</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Zoo &lt; ActiveRecord::Base
</span><span class='line'>  has_many :animals
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>What do you expect the other model to be and what does database schema look like?</li>
</ul>


<p>  There should be antoher class named &ldquo;Animal&rdquo;, and it belongs to Zoo. Animal should at least have name, and a foriegn key to set to zoo id.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Animal &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :zoo
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CreateAnimal ActiveRecord:Migration
</span><span class='line'>  def change
</span><span class='line'>    create_table :animals do |t|
</span><span class='line'>      t.integer :zoo_id
</span><span class='line'>    end
</span><span class='line'>  end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>What are the methods that are now available to a zoo to call related to animals?</li>
</ul>


<pre><code class="``">  zoo.animals
</code></pre>

<ul>
<li>How do I create an animal called &ldquo;jumpster&rdquo; in a zoo called &ldquo;San Diego Zoo&rdquo;?</li>
</ul>


<p>  If in <code>rails console</code> mode:</p>

<pre><code class="``">  $ zoo = Zoo.create(name: "San Diego Zoo")
  $ animal = Animal.create(name: "jumpster")
  $ zoo.animals &lt;&lt; animal  
</code></pre>

<h2>10. What is mass assignment? What&rsquo;s the non-mass assignment way of setting values?</h2>

<p>With mass assignment, we can do</p>

<p><code>assumption fields: [title, body]</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@post = Post.new(params[:post])</span></code></pre></td></tr></table></div></figure>


<p>without mass assignment, we need to do this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@post = Post.new
</span><span class='line'>post.title = "post title"
</span><span class='line'>post.body = "post body"</span></code></pre></td></tr></table></div></figure>


<h2>11. What does this code do? <code>Animal.first</code></h2>

<p>Query the first data in table <code>Animal</code>.</p>

<blockquote><p>This will return the first row of data for the first Animal instance object in the animals table.</p></blockquote>

<h2>12. If I have a table called &ldquo;animals&rdquo; with columns called &ldquo;name&rdquo;, and a model called <code>Animal</code>, how do I instantiate an animal object with name set to &ldquo;Joe&rdquo;. Which methods makes sure it saves to the database?</h2>

<p>This will make sure it saves to database</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Animal.create(name: "Joe")</span></code></pre></td></tr></table></div></figure>


<p>And this will work too</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>animal = Animal.new(name: "Joe")
</span><span class='line'>animal.save</span></code></pre></td></tr></table></div></figure>


<h2>13. How does a M:M association work at the database level?</h2>

<p>  There is a join table between two relational tables, and it needs these two tables row data primary key to be its foreign key. For example, there is a join table called post_categories, and it stores two foriegn key named: post_id and category_id.</p>

<blockquote><p>On the database level of a M:M association, we use a join table to support it. Both of the primary models will each have a 1:M association with the join table.
By using the has_many :through technique, we are able to create an indirect M:M association with the two primary models.</p></blockquote>

<h2>14. What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?</h2>

<ul>
<li><p>has_and_belongs_to_many
Chris metioned that this method is deprecated. If you don&rsquo;t need to operate the join table, this method is easy to set up association between two tables. And it&rsquo;s doing a more implicit way.</p></li>
<li><p>has_many through:
You have to define has_many relation with join table, also define has_many through: realtion to both target table and join table. This explicit the way to connect target table and join table. It&rsquo;s much easier to understand all realtionship between tables.</p></li>
</ul>


<blockquote><p>has_many :through requires an explicit join model and a join table, but it is more flexible and we can add additional attributes to the join table.
has_and_belongs_to_many doesn&rsquo;t require a join model or a join table, but it is less flexible and we cannot add additional attributes to the join table.</p></blockquote>

<h2>15. Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?</h2>

<figure class='code'><figcaption><span>User.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_groups</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:groups</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="n">user_groups</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Group.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Group</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_groups</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:user_groups</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>UserGroup.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserGroup</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:group</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>create_user_groups.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateUserGroups</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:post_categories</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:user_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:group_id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Lesson 4]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/22/reflection-to-tealeaf-lesson-4/"/>
    <updated>2015-01-22T11:59:53+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/22/reflection-to-tealeaf-lesson-4</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.minus.com/iS2bpDcNcj44W.jpg" width="320"></p>

<p>To be honest, I still feel uncomfortable with this week. From week 3, I learned html &amp; css, to week 4, I learned jQuery &amp; Ajax. It&rsquo;s definitely not enough only rely on Codecademy&rsquo;s course, so I decide to do one more app, tic-tac-toe on wep. I think this should make me more comfortable with these lessons.</p>

<p>But I&rsquo;m wrong, ha!! I still get stuck when doing UI and interactive design. Since I already knew that the most important thing at this moment is becoming a robust rails development, I decide to keep my pace and going to next course.</p>

<p>Recap to this course:</p>

<ul>
<li>week 1, basic Ruby program.</li>
<li>week 2, OOP in Ruby.</li>
<li>week 3, <strong>HTTP is stateless</strong>, HTML &amp; CSS, Sinatra, and Bootstrap.</li>
<li>week 4, jQuery and Ajax.</li>
</ul>


<p>One more thing, I thought I could be a full stack web developer before this course, then I knew I&rsquo;m wrong. There are a lot of knowledge in front end.</p>

<p>And now I have to keep focus on back end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Nitrous上寫Octopress]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/16/clone-my-octopress-to-nitrous-dot-io/"/>
    <updated>2015-01-16T21:10:08+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/16/clone-my-octopress-to-nitrous-dot-io</id>
    <content type="html"><![CDATA[<h3>Octopress &amp; github</h3>

<p>這個部落格是用<a href="octopress.rog">Octopress</a>在<a href="github.com">github</a>上建立起來的。但是不像一般的部落格系統，可以只要用瀏覽器登入，就可以開始寫文章。不過既然知道<a href="nitrous.io">nitrous.io</a>可以雲端工作，所以就把腦筋動到它的上面去。</p>

<h3>Clone Octopress</h3>

<p>作法是參考<a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">這篇文章</a>。</p>

<p>但是其中的程式碼有點錯誤，因為github上存放網頁的位置己經改成github.io了。</p>

<!--more-->


<p>登入nitrous.io，開啟終端機畫面：
註：不會用可以參考<a href="http://www.tomohung.com/blog/2015/01/11/nitroukai-fa-huan-jing/">這個連結</a></p>

<p>輸入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone -b source git@github.com:username/username.github.io.git octopress</span></code></pre></td></tr></table></div></figure>


<p>然後clone master branch到_deploy資料夾</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ git clone git@github.com:username/username.github.io.git _deploy </span></code></pre></td></tr></table></div></figure>


<p>說明一下，branch <strong>source</strong> 就是存放原始資料，branch <strong>master</strong> 放的是rake後產生的資料，再上傳至github讓它來處理。</p>

<p>接著在nitrous安裝需要的gem</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler
</span><span class='line'>$ bundle install
</span><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>輸入相關資料，這邊跟octopress上的安裝說明都是一樣的。
然後所有資料就會從github上完整的clone一份到nitrous上。</p>

<h3>Backup &amp; Sync</h3>

<p>每次寫完文章，最重要的是要記得備份。</p>

<p><code>rake deploy</code>就不用擔心，因為它就是把branch master上傳到github上。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy             # 更新 remote master branch</span></code></pre></td></tr></table></div></figure>


<p>但是branch source就要自己處理：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "message" 
</span><span class='line'>$ git push origin source  # 更新 remote source branch </span></code></pre></td></tr></table></div></figure>


<p>這樣子可以確保github上版本是最新的。</p>

<p>然後如果要在本機做完到nitrous做，或者是nitrous做完回本機，記得pull branch source 和 master。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd octopress
</span><span class='line'>$ git pull origin source  # 更新 local source branch
</span><span class='line'>$ cd ./_deploy
</span><span class='line'>$ git pull origin master  # 更新 local master branch</span></code></pre></td></tr></table></div></figure>


<p>這樣子就算是在外面用別台電腦，也能夠透過nitrous來blog一下了，不錯吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show HTTP Is Stateless by Sinatra]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/14/show-http-is-stateless-by-sinatra/"/>
    <updated>2015-01-14T21:25:15+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/14/show-http-is-stateless-by-sinatra</id>
    <content type="html"><![CDATA[<p>In tealeaf week 3, introduce to HTTP.</p>

<p>The most important thing is that, HTTP is stateless.</p>

<p>What&rsquo;s the influnce by this property? Showing this by Sinatra.</p>

<!--more-->


<p>first, follow <a href="http://www.sinatrarb.com/intro.html">Sinatra intro</a> to run basic function:
then try this code:</p>

<figure class='code'><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@name</span> <span class="o">=</span> <span class="s1">&#39;Guest&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">erb</span> <span class="ss">:home</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span> <span class="s1">&#39;/set_name&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@name</span> <span class="o">=</span> <span class="s1">&#39;tealeaf&#39;</span>
</span><span class='line'>  <span class="n">redirect</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and this will show a button, click the button will invoke a post request back to <code>set_name</code> in main.rb:</p>

<figure class='code'><figcaption><span>home.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h4&gt;hi~ </span><span class="cp">&lt;%=</span> <span class="vi">@name</span> <span class="cp">%&gt;</span><span class="x"> &lt;/h4&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;form action=&quot;/set_name&quot; method=&quot;post&quot;&gt;</span>
</span><span class='line'><span class="x">  &lt;input class=&quot;btn&quot; type=&quot;submit&quot; name=&quot;name&quot;&gt;</span>
</span><span class='line'><span class="x">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK, then what will <code>@name</code> show in home.erb after click button??</p>

<p>It shows <code>Guest</code>, not <code>tealeaf</code>. Why?</p>

<p><img src="http://i.minus.com/i9oeLWDYI4DBb.png"></p>

<p>The key point is: when 2 redirect to 3, it&rsquo;s a new request, instance variable like @name will be deleted after redirect, then create a new one.</p>

<p>That&rsquo;s why @name still shows <code>Guest</code>.</p>

<p>How about this way:</p>

<figure class='code'><figcaption><span>main.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@name</span> <span class="o">=</span> <span class="s1">&#39;Guest&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">erb</span> <span class="ss">:home</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span> <span class="s1">&#39;/set_name&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@name</span> <span class="o">=</span> <span class="s1">&#39;tealeaf&#39;</span>
</span><span class='line'>  <span class="n">erb</span> <span class="ss">:home</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now using erb to embeded <code>home.erb</code> into the same request(&lsquo;/set_name&rsquo;). Then you&rsquo;ll see <code>@name</code> shows <code>tealeaf</code>!!</p>

<p>This experience shows me how HTTP is stateless.</p>

<p>And how web developers make it like stateness is a long way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Week 3]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/13/reflection-to-tealeaf-week-3/"/>
    <updated>2015-01-13T22:23:15+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/13/reflection-to-tealeaf-week-3</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.minus.com/ilSTmPNHVpVTm.png" width="320"></p>

<p>It&rsquo;s realy a tough week for me, because I&rsquo;m totally new to web development.
There are lots of material need to be done:</p>

<ul>
<li>One new concept book: HTTP <a href="https://www.gotealeaf.com/books/http">https://www.gotealeaf.com/books/http</a></li>
<li>Two new languages: HTML &amp; CSS <a href="http://www.codecademy.com/tracks/htmlcss">http://www.codecademy.com/tracks/htmlcss</a></li>
<li>Two new frameworks: <a href="http://www.sinatrarb.com/intro.html">Sinatra</a> &amp; <a href="http://getbootstrap.com/">bootstrap</a></li>
</ul>


<p>I think the most important thing in this week is &ldquo;HTTP is stateless&rdquo;.</p>

<p>And using Sinatra show me this property explicit.</p>

<p>Every request in main.rb is independant with each other, using instance variables to store data only survive its scope.</p>

<p>I also write a brief post to memo this property<a href="http://www.tomohung.com/blog/2015/01/14/show-http-is-stateless-by-sinatra/">(HTTP is Stateless)</a>.
Using chache is another way to feel free in thinking programming in the old way.</p>

<p>Though I still use class to complete this assignment, I feel comfortable with this, because I don&rsquo;t need to make a wheel again.</p>

<p>The first struggle in this week is when I saw something like <code>&lt;form action..../&gt;</code>, I have no idea what&rsquo;s this?! because HTML &amp; CSS course in codecademy never metion this. After google that, I found there are plenty of other syntax I didn&rsquo;t know, <a href="http://www.w3schools.com/html/html5_intro.asp">w3shool</a> help me to know more about HTML.</p>

<p>Another struggle is Sinatra, when I first time read the intro, I totally had no idea what those nouns mean. <code>get '/' {}</code> seems not a nature ruby way; what <code>get</code> <code>post</code> are ??</p>

<p>Following with video and implement functions and pages, then I read Sinatra intro again, this time I feel much clear what its said.</p>

<p>Another horrible thing is on viewing video introduce to modern web development. There are so many tools, concepts, languages need to know. Wow&hellip;</p>

<p>To be a web development, I know I have to keep going.
Moving to Lesson 4.</p>

<p>Finally, here is my blog talking about Reflections for tealeaf lessons.
<a href="http://www.tomohung.com/blog/categories/tealeaf/">http://www.tomohung.com/blog/categories/tealeaf/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[譯]Maker's Schedule, Manager's Schedule]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/12/yi-makers-schedule-managers-schedule/"/>
    <updated>2015-01-12T06:30:34+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/12/yi-makers-schedule-managers-schedule</id>
    <content type="html"><![CDATA[<p>我曾經試過，寫程式最有效率的反而是在假日，可以從早上六點就一直做到晚上十二點（當然中間有被吃飯時間中斷），比起平常日在公司，產出高出好幾倍。所以看到這篇文章心有戚戚焉。</p>

<hr />

<p>原文出處：<a href="http://www.paulgraham.com/makersschedule.html">連結</a> Paul Graham, Y-Combinator founder</p>

<!--
One reason programmers dislike meetings so much is that they're on a different type of schedule from other people. Meetings cost them more.
-->


<p>對程式員來說不喜歡開會的原因之一，是因為他們和其它人平同的行程安排類型。</p>

<p>開會的代價更大。</p>

<!--
There are two types of schedule, which I'll call the manager's schedule and the maker's schedule. The manager's schedule is for bosses. It's embodied in the traditional appointment book, with each day cut into one hour intervals. You can block off several hours for a single task if you need to, but by default you change what you're doing every hour.
-->


<p>有兩種行程安排類型，管理者行程和製造者行程。管理者行程是給老闆用的，它是傳統上指派任務，每天把時間切成數個小時片段，你可以指派任務給其中幾個小時，但原則上，每個小時要做的事情都不一樣。</p>

<!--more-->




<!--
When you use time that way, it's merely a practical problem to meet with someone. Find an open slot in your schedule, book them, and you're done.
-->


<p>當你用這種方式時，就是一個很務實處理與人會面的問題。找一個空白的時段，註記起來，然後就完成了。</p>

<!--
Most powerful people are on the manager's schedule. It's the schedule of command. But there's another way of using time that's common among people who make things, like programmers and writers. They generally prefer to use time in units of half a day at least. You can't write or program well in units of an hour. That's barely enough time to get started.
-->


<p>很多有能力的人都是管理者類型。這是一種命令的安排。但對於製造產品，像是程式員和作家，還有另一種方式。他們通常時間的單位，傾向至少半天的區塊。你不能寫作或是寫程式用一個小時當單位。那只夠時間做個開頭而己。</p>

<!--
When you're operating on the maker's schedule, meetings are a disaster. A single meeting can blow a whole afternoon, by breaking it into two pieces each too small to do anything hard in. Plus you have to remember to go to the meeting. That's no problem for someone on the manager's schedule. There's always something coming on the next hour; the only question is what. But when someone on the maker's schedule has a meeting, they have to think about it.
-->


<p>當你處於製造者模式時，會議是個災難。一個會議就可以毀掉整個下午，時間切的零碎以致於很難做任何事。再加上你必需記住要去開會，這對管理者模型的人不是問題，他們總是在準備下一個小時要做的事，問題只是要處理的是什麼。但如果是製造者模式的人有一個會議，他們就必需掛念著它。</p>

<!--
For someone on the maker's schedule, having a meeting is like throwing an exception. It doesn't merely cause you to switch from one task to another; it changes the mode in which you work.
-->


<p>對於在製造者模式的人，有一個會議就像程式上丟出一個例外，它不只讓你轉換到另一個工作，同時他也改變你工作的型態。</p>

<!--
I find one meeting can sometimes affect a whole day. A meeting commonly blows at least half a day, by breaking up a morning or afternoon. But in addition there's sometimes a cascading effect. If I know the afternoon is going to be broken up, I'm slightly less likely to start something ambitious in the morning. I know this may sound oversensitive, but if you're a maker, think of your own case. Don't your spirits rise at the thought of having an entire day free to work, with no appointments at all? Well, that means your spirits are correspondingly depressed when you don't. And ambitious projects are by definition close to the limits of your capacity. A small decrease in morale is enough to kill them off.
-->


<p>我發現有時候一個會議可以影響一整天。至少毀了半天，早上或下什。另外附加的是有時候還會有階層效應。如果我知道下午會被切開，在早上我就會有點不想做任何事。我知道這聽起來有點過於敏感，但如果你也是製造者模式的人，想想你自己，你內心沒有出現一個想要可以有一整天工作，沒有任何約會的想法嗎？好吧，那表示你的內心在你不想的時候做出調適。一個有野心的計劃一定是非常接近你能力的極限，一個小小精神能力䧏低就足夠毀掉它們。</p>

<!--
Each type of schedule works fine by itself. Problems arise when they meet. Since most powerful people operate on the manager's schedule, they're in a position to make everyone resonate at their frequency if they want to. But the smarter ones restrain themselves, if they know that some of the people working for them need long chunks of time to work in.
-->


<p>兩種工作型式都很好，問題出在它們相遇的時候。既然大多數強力的管理者都使用管理者模式，他們必需讓每個人都配合他們工作的頻率，但是有些聽明的人不來這套，因為他們知道有些人就是需要足夠的大區塊時間來工作。</p>

<!--
Our case is an unusual one. Nearly all investors, including all VCs I know, operate on the manager's schedule. But Y Combinator runs on the maker's schedule. Rtm and Trevor and I do because we always have, and Jessica does too, mostly, because she's gotten into sync with us.
-->


<p>我們是一個不尋常的例子，幾乎所有投資人，包括創投基金，都是使用管理者模式。但是Y combinator是使用製造者模式。Rtm和Trvor和我都是，因為我們喜歡如此，還有Jessica也是如此，因為她必需和我們同步配合。</p>

<!--
I wouldn't be surprised if there start to be more companies like us. I suspect founders may increasingly be able to resist, or at least postpone, turning into managers, just as a few decades ago they started to be able to resist switching from jeans to suits.
-->


<p>如果有愈來愈多的公司和我們一樣，我也不會感到驚訝。我猜創業的人應該也開始會拒絕，或者說延遲同步到管理者模式。就像十幾年前他們開始排斥從襯杉轉換到穿牛仔褲。</p>

<!--
How do we manage to advise so many startups on the maker's schedule? By using the classic device for simulating the manager's schedule within the maker's: office hours. Several times a week I set aside a chunk of time to meet founders we've funded. These chunks of time are at the end of my working day, and I wrote a signup program that ensures all the appointments within a given set of office hours are clustered at the end. Because they come at the end of my day these meetings are never an interruption. (Unless their working day ends at the same time as mine, the meeting presumably interrupts theirs, but since they made the appointment it must be worth it to them.) During busy periods, office hours sometimes get long enough that they compress the day, but they never interrupt it.
-->


<p>那我們如何給那些製造者模式的新創團隊建議？經典的老方法，office hours。一週數次，我安排一個大區塊時間來看創辦人見面。這些時間都在我完成一天的工作後，我寫了一個登錄的程式來確保所有的約會都在一天的最後聚集起來。因為這些約會都在一天的最後，所以從來沒打斷我。（除非他們的工作時間和我一樣，不然會議通常會打斷他們自己的，不過既然他們約了這個會，我想對他們這是值得的）。當忙碌的時候，office hours有時候就顯得會壓縮到那天，但他們不會打斷它。</p>

<!--
When we were working on our own startup, back in the 90s, I evolved another trick for partitioning the day. I used to program from dinner till about 3 am every day, because at night no one could interrupt me. Then I'd sleep till about 11 am, and come in and work until dinner on what I called "business stuff." I never thought of it in these terms, but in effect I had two workdays each day, one on the manager's schedule and one on the maker's.
-->


<p>當我們在90年代創業的時候，我用另一個技巧來把一天分隔開。我通常在晚餐後寫程式寫到半夜三點，因為在晚上沒有人可以打擾我。然後我睡到早上十一點，繼續工作到晚餐，這段時間我叫它做商業工作。我沒有想過這，但我把一天分成兩個工作天，一個是管理者模式，一個是製造者模式。</p>

<!--
When you're operating on the manager's schedule you can do something you'd never want to do on the maker's: you can have speculative meetings. You can meet someone just to get to know one another. If you have an empty slot in your schedule, why not? Maybe it will turn out you can help one another in some way.
-->


<p>當你在管理者模式時你會做些你在製造者模式時不會做的事：觀察式約會。你可以和一些人見面僅只是要互相認識。如果你有一個空檔，為何不？或許有一天它會轉換成讓你幫助另一個人。</p>

<!--
Business people in Silicon Valley (and the whole world, for that matter) have speculative meetings all the time. They're effectively free if you're on the manager's schedule. They're so common that there's distinctive language for proposing them: saying that you want to "grab coffee," for example.
-->


<p>在矽谷的生意人（也可以說全世界有同樣問題的）總是在觀察式的約會。如果在管理者模式這是很有效率的。這是很普通的，有一句特別的代名詞可以表達：來杯咖啡吧！</p>

<!--
Speculative meetings are terribly costly if you're on the maker's schedule, though. Which puts us in something of a bind. Everyone assumes that, like other investors, we run on the manager's schedule. So they introduce us to someone they think we ought to meet, or send us an email proposing we grab coffee. At this point we have two options, neither of them good: we can meet with them, and lose half a day's work; or we can try to avoid meeting them, and probably offend them.
-->


<p>如果你是在製造者模式時，觀察式約會就變得很糟，讓我們被某個東西綁住。所有像那些投資人都假設，我們是在管理者模式。所以當他們要介紹某些我們應該要會面的人，或者是發封郵件來提議來杯咖啡吧，當這個時候我們有兩個選擇，兩個都不大好：去會面，但是損失半天的工作時間；或是拒絕會面但是可能會冒犯到他們。</p>

<!--
Till recently we weren't clear in our own minds about the source of the problem. We just took it for granted that we had to either blow our schedules or offend people. But now that I've realized what's going on, perhaps there's a third option: to write something explaining the two types of schedule. Maybe eventually, if the conflict between the manager's schedule and the maker's schedule starts to be more widely understood, it will become less of a problem.
-->


<p>直到最近我們還不能搞清楚問題的核心，我們只能打斷工作或是冒犯別人。但現在我己經了解到為什麼了，也許有一個第三個選擇方案：寫下來解譯這兩種模式。也許最後，管理者模式和製造者模式的不同會愈來愈多人知道，那這個問題就會少發生了。</p>

<!--
Those of us on the maker's schedule are willing to compromise. We know we have to have some number of meetings. All we ask from those on the manager's schedule is that they understand the cost.
-->


<p>那些希望我們這種製造者模式的人要妥協的，也知道我們必需去參加些會議，我們希望的只是那些管理者模式的人，知道這些會議背後的代價。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nitrous.io 開發環境]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/11/nitroukai-fa-huan-jing/"/>
    <updated>2015-01-11T21:26:49+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/11/nitroukai-fa-huan-jing</id>
    <content type="html"><![CDATA[<p><img src="http://i.minus.com/iyZNw6vDZnJa6.png" width="800"></p>

<ul>
<li>太強了</li>
<li>太強了</li>
<li>太強了</li>
</ul>


<p>因為<a href="http://nitrous.io">nitrous</a>太強了，所以說三遍。</p>

<p>入門網路應用程式開發一開始最大的門檻就是安裝適合的環境，尤其是OS用Windows的，好像是次等公民一樣，一下是終端機要用跟別人不一樣的，一下又是安裝套件卡住，一開始一頭熱的想要投入，馬上就被潑盆冷水。</p>

<!--more-->


<p>之前我自己的桌機就是用Windows，弄了很久才裝起來可以跑，但就是常遇到怪事，所以就放棄了。現在有一台MBA，少了很多問題，至少按照網路上搜尋到的指引文章照著做，多半都沒什麼意外。</p>

<p>但有時候在外面想用其它電腦看一下自己做的東西時，這時候<a href="http://nitrous.io">nitrous</a>配合<a href="http://github.com">github</a>就派上用場了。nitrous當作雲端編輯平台，github負責同步資料，至少目前我在學習的階段都沒遇到什麼問題，聽說<a href="http://gotealeaf.com">tealeaf</a>裡也有人用nitrous完成所有課程。</p>

<p><img src="http://i.minus.com/ibjA5RfvgDSmp6.png" width="640"></p>

<p>Ruby Girls也是用這套教學，要知道還沒開始就在安裝遇到挫折，真的沒有動力再做下去 &lt;== 就是在說我自己</p>

<p><img src="http://i.minus.com/ibKMcP19URJvJ.png" width="640"></p>

<p>首頁寫的60秒完成不是開完笑的，註冊後有200閃電幣可以用，綽綽有餘，開一個Box只要10個閃電幣，可以選擇的有上圖幾種。</p>

<p><img src="http://i.minus.com/iDo0NvpKvypX6.png" width="640"></p>

<p>登入後可以選擇要IDE介面還是Terminal介面，如果選IDE就像上面一樣。</p>

<p>以編輯器來說，內建的己經蠻好用的，也可以選擇Vim模式。</p>

<p>上圖左邊就是雲端儲存的資料夾，有1.5Gb，寫程式來說應該是夠放，下面就是Terminal，git都己經裝好可以直接用，可以直接把自己github上放的project直接clone下來，五分鐘內就可以從無到有開工。</p>

<h3>Preview</h3>

<p>比較要注意的是Preview時，根據官方Support說，Localhost ip必需設定為0.0.0.0，port的話可以參考下圖：</p>

<p><img src="http://i.minus.com/ioeX2cUhUAC5A.png"></p>

<p>所以如果是Ruby配合shotgun gem來啟動的話，可以用下面指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ shotgun xxx.rb -o 0.0.0.0 -p 3000</span></code></pre></td></tr></table></div></figure>


<p>指定<code>Localhost ip = 0.0.0.0, port = 3000</code></p>

<p>本機的開發環境當然還是要建立，不過可以等真正入門後再來考慮吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection of Tealeaf Week 2]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/07/reflection-to-tealeaf-lesson-2/"/>
    <updated>2015-01-07T08:15:13+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/07/reflection-to-tealeaf-lesson-2</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.minus.com/ibnRw2O1pxsQam.png" width="320"></p>

<p>Although I have some option video not done yet, I want to share some of my reflection.</p>

<p>When I came to lesson 2, first I found that discussion is less than lesson 1 obviously. I think this imply the lesson OOP is harder than before. Thank god I finished three assignments in a week, how I can do this is because:</p>

<ol>
<li><p>As a C++ programmer, OOP concept is also the same in Ruby, like inheritance, polymorphism, composition&hellip;etc. Since I have some experience to OOP, familiar with Ruby&rsquo;s style is not a hard work for me.</p></li>
<li><p><a href="http://www.gotealeaf.com/books/oo_ruby"><code>Object Oriented Program book</code></a> is fantastic!! I spent one night to read it, then next day I can just start to implement my idea without too much struggles. It clearly explain the relationship between <code>is-a</code> and <code>has-a</code> corresponding to inheritance and mixin.</p></li>
</ol>


<p>And I do fall in love with Ruby, <code>convention</code> is over configuration becomes nature. In lesson 1, it&rsquo;s weird for me to pass a variable into method, but modified or not depends on what actions in the method. Now I start to think it&rsquo;s convenient to decide modified the variable in the method.
<code>attr_accessor</code> is another kind of example, default getter and setter helps a lot to reduce typing time.</p>

<p>Using polymorphism, I don&rsquo;t need to care about how using virtual function, just inheritance class then use it.
Especially for method <code>super</code>, the best way to reduce redundant code.
One suggestion, If subclass&rsquo;s initialize method doesn&rsquo;t use super, then you might think the superclass and subclass relationship is <code>has-a</code>, not <code>is-a</code>.</p>

<p>I do love my <a href="https://github.com/tomohung/tealeaf/blob/master/Lesson2/oo_tic_tac_toe.rb">Tic-Tac-Toe</a> and <a href="https://github.com/tomohung/tealeaf/blob/master/Lesson2/oo_blackjack.rb">Black Jack</a> implemented by OO. In Tic-Tac-Toe, I use polymorphism to implement single player and double players mode. In Black Jack, I add feature that player can play with others NPC together, not just with dealer. This make the game likely in the real world. Without OO concept, these features are hard to implement.</p>

<p>Next lesson is absolutely my challenge, because I&rsquo;m totally new for web development.
But I do look forward to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Week 1]]></title>
    <link href="http://www.tomohung.com/blog/2015/01/01/reflection-to-tealeaf-lesson-1/"/>
    <updated>2015-01-01T16:03:33+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/01/01/reflection-to-tealeaf-lesson-1</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://i.minus.com/ibsevSRoOPCEmU.png" width="320"></p>

<p>Happy new year!!</p>

<p>Before I talk about where I struggled with, I would like to say something before I join the course.
I am using C++ for few years, and coding is part of my job. Before join the course, I&rsquo;ve also done the <a href="http://learnrubythehardway.org/book/">Learn Ruby The Hard Way</a> to lesson 45. <code>Learn Ruby The Hard Way</code> is also a good pratice, especially for <code>muscle memory</code>. It focus on <code>just typing ruby</code> when learning ruby knowledge.</p>

<p>After that, I start <code>Prep Course</code> @ tealeaf, reading the book <a href="http://www.gotealeaf.com/books/ruby"><code>Introduce to Programing</code></a>. <code>Introduction to Programing</code> is also an amazing book, it use a simple way to explain more detail in ruby, and I really did several times &ldquo;Ah ha!&rdquo; when reading it. Then I thought I was ready for lesson 1, but maybe I&rsquo;m wrong :p</p>

<p>About my struggles, as a C++ programmer, there are mainly two &ldquo;What?&rdquo; for ruby:</p>

<ul>
<li><p>variable scope: in C++, every local variable only survive in its scope, but in ruby, this is not always true. Even now, I&rsquo;m still a little confused with that. Glad that I find a way to deal with this: <code>Never use outside variable in insdie scope, make them in different name</code>.</p></li>
<li><p>pointer &amp; reference: when passing a variable to functions(in ruby called: methods), if varaible has prefix like <code>*</code> or <code>&amp;</code>, it obvious means this variable may be modified in this methods. Ruby doesn&rsquo;t take this way, input variables in method could be modified just by what action do inside the method. Fotunately, ruby usaually append suffix <code>!</code> behind method&rsquo;s name to indicate this method modify input variable.</p></li>
</ul>


<p>Even these, I do love ruby.</p>

<ul>
<li>There are a lot of built-in convenient methods for String, Array, Hash&hellip;etc. And more are waiting to discover</li>
<li>More fluent phrase for flow control, if, unless, while, until&hellip;etc. Readable code is becoming more and more important.</li>
<li>type less key :p</li>
</ul>


<p>And special Thanks for TA&rsquo;s:
Without their help, I couldn&rsquo;t finished these assignments on time. Because of unfamiliar with ruby methods, wrong code style, improper naming&hellip;etc. They always give me timely advice.</p>

<p>Last, share my experience for developing game <code>Black Jack</code>:</p>

<ul>
<li>write psuedo code : 10 min</li>
<li>coding : 2 hours</li>
<li>debugging : 2 hours more</li>
<li>feedback from TA, then refactor: 2 hours</li>
</ul>


<p>By the way, the most difficulty in Lesson 1 is completing &ldquo;Tic-Tac-Toe&rdquo; AI, it tooks me 10 hours more.
If you are totally new to program, don&rsquo;t be disppointed at spending a lot of time, because me too!!
If you are take these assignment as piece of cake, well, let&rsquo;s move to Lesson 2. See you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[語言管理－續]]></title>
    <link href="http://www.tomohung.com/blog/2014/12/15/yu-yan-guan-li-xu/"/>
    <updated>2014-12-15T20:34:40+08:00</updated>
    <id>http://www.tomohung.com/blog/2014/12/15/yu-yan-guan-li-xu</id>
    <content type="html"><![CDATA[<p><img src="http://i.minus.com/ijEvqo7aLC7BY.jpg" width="640"></p>

<p><a href="http://www.tomohung.com/blog/2014/12/12/language-management/">上一篇文章</a>關於聽了『語言管理』講座，朋友私底下來信討論，整理了一下對話留個記錄。刪去了一些朋友之間五四三的對話，盡量保留原意：</p>

<h1>對話</h1>

<p>R&rsquo;s:</p>

<blockquote><p>  &ldquo;參與力&#8221;聽起來只是重新包裝過的&#8221;競爭力&#8221;耶&hellip;.你把他用&#8221;參與力&#8221;的句子全部代換成競爭力應該一樣通順吧？<br/>
    他的所謂的新詞的話 得到的action item會跟原來用&#8221;競爭力&#8221;當重點的時候 不一樣在哪邊？<br/>
    我想我的疑問來自於 結果都是要強調語言很重要的話，那特別創新的詞的用意？</p></blockquote>

<!--more-->


<p>Tomo:</p>

<blockquote><p>  補了一段Michael Porter在後面，你看看有沒有回答到你的問題:</p>

<p>  前陣子來台灣的Michael Porter也被兩個人拿出來嘲諷了一番，認為台灣這二十年來發展的走向就是深受他的影響，同時也提到了他其實公司己經破產的事。</p>

<p>  回來查了資料，才知道五力分析就是Porter所提倡的。
  看了wiki上的內容，可以發現其實台灣根本就是把五力分析發揮到極致，也可以說這幾年台灣的競爭力就是由此而生。</p>

<p>  競爭力(Competing)和參與力(Engaging)以軟體工程的角度來說，我覺得參與力比較像是用open source的概念，大量的讓所有願意開放的人進來參與。這有兩個好處，一個是讓各種強者進入完善這個project，另一個好處就是軟體工程一直強調的DRY原則(Don&rsquo;t Repeat Yourself)，不要重複打造輪子，把時間花在你真正要做的核心價值上。</p></blockquote>

<p>R&rsquo;s:</p>

<blockquote><p>  倒是我原本想的&#8221;競爭力&#8221;並沒有特別的定義，而且我對信仰FTA零關稅的價值觀也很感冒
  也同意開源與參與的價值(i love wiki)
  但是最後還是要回歸到競爭力阿(沒特別定義，簡單來說就是要比別人好)。open source在價值觀上很美好 但並不保證出來的產品一定比較好
  這是第一個問題
  第二個呢就是 為什麼這個論述會導到&#8221;所以英文很重要&#8221;
  &ldquo;英文很重要&#8221;的結論可以從各種我們已經聽到爛的論述來得到阿</p>

<p>  我知道這些問題看起來可能像是枝微末節的找碴&hellip;但我真正懷疑的是&#8221;他想問什麼問題？對於這個問題他提供了什麼答案？&#8221;</p>

<p>  好啦 吐槽了這麼多希望你不要生氣 謝謝你陪我抬槓 哈哈哈</p></blockquote>

<p>Tomo:</p>

<blockquote><p>  先說 這不叫吐糟，因為我自認為說的東西還沒糟到被人一戳即破XD  而且我覺得你這樣子的回覆很棒，我認為這就是一種參與力的表現。</p>

<p>  我今年以來感受特別明顯，覺得自己的生活圈（包含工作和平日生活）非常窄，從臉書上來看就知道，只有上傳吃喝玩樂的文章才容易得到回響，但是稍微有討論空間的文章有反應的卻了了無幾。更不要說大部份只是轉錄的文章，卻沒有加入自己的看法，即使我有200多個朋友，看起來似乎己經開放給很多人看，但其實是沒有互動的。透過臉書看了再多轉貼的文章，卻反而讓我感覺到自己其實是在固步自封。</p>

<p>  回到陳超明和范疇看到的問題，就是台灣是個資源缺凡的島嶼國家，但目前卻有限制自己只看到台灣和中國的危機，進而產生我只要有小確幸生活就可以的魯蛇生活。</p>

<p>  第一步，也是最快的解決方法，就是把大量的人丟出國外去，而這也是韓國和中國在做的事。至於為什麼是英文，只是因為現在主流國際語言就是英文。</p>

<p>  再到第一個問題，如果競爭力簡單說是比別人好，問題在這個比較上，如果今天這個東西（或概念，或服務）是從來沒出現過的？那它要跟什麼比？舉例來說iPhone跟Android算是競爭對手嗎？我覺得iPhone跟Android系統本身不是競爭對手，但是做同樣用Android做手機的各個廠商們是競爭對手</p>

<p>  當然競爭力如果無限上綱，連創新，改變世界等等，都算是競爭的話，那的確做什麼都會被含括在內。但如果是針對Michael Porter 所說的五力分析，他針對的是成本，價格去做競爭，我想這是陳明超跟范疇所在意的點</p></blockquote>

<p>R&rsquo;s:</p>

<blockquote><p>  關於 &ldquo;就是台灣是個資源缺凡的島嶼國家，但目前卻有限制自己只看到台灣和中國的危機，進而產生我只要有小確幸生活就可以的魯蛇生活。&rdquo;</p>

<p>  基本上我是同意 台灣人民眼光普遍有點狹隘</p>

<p>  也能同意這是造成現在&#8221;台灣困境&#8221;的原因之一</p>

<p>  然而這很只是近因</p>

<p>  背後還有更根本的遠因。換句話說台灣人短視近利 說穿了也只是結果。</p>

<p>  沒有注意到這點的話就會提出把一堆人丟到國外的solution。當然這肯定是有正面的效果，但是我認為不會解決問題</p>

<p>  你要把它當成一個系統 現在的現象 是一連串遞迴(feedback)的結果。所謂的遞迴不單是指時間上的: 一個人多次的嘗試；同時也是指空間上的：每個人各自不同的嘗試</p>

<p>  重點在於這一群人中的大部分 不約而同的選擇了短視近利。把這個現象歸因於&#8221;台灣人個性就是這樣&#8221;無疑的是很草率的</p>

<p>  更有可能的答案是 這個社會(系統)無法有效率的篩選出&#8221;對的人&#8221;（非短視，有國際觀，英文好&hellip;etc.），無法讓傑出的人有傑出的收穫</p>

<p>  拿我自己當例子好了 我因為興趣在四五年前開始注意國際新聞。但是否有因為對國際格局有比別人多的認識而在現實上有所收穫？答案是接近0</p>

<p>  語文能力也是一樣 如果我今天不是在外商 英文也用不上 日文更是不用講</p>

<p>  這就是為什麼大部分的時候學語言的熱情遲早會消退：因為根本沒用！我們本能的知道這是在浪費時間和能量</p>

<p>  (沒用指的當然是相對機率而言)</p>

<p>  回到一開始的話題。如果今天的問題是&#8221;如何突破台灣的困境&#8221;，把責任賴到全民身上是很容易但也很草率且不切實際</p>

<p>  (你無法期待夠多的人在一夕之間一起變厲害，但少數厲害的人會在這個系統中被磨掉)</p>

<p>  能改變這個系統的就是政府，而且一天之內就能改變。這就是我為什麼認為政府該負責。</p>

<p>  但如果問題是&#8221;在台灣的困境中我個人能做什麼&#8221; 那麼加強自己似乎是唯一符合眼前利益的方法(這個系統讓傑出的人浮出來的機率很小，但畢竟不是0，增強自己的各種&#8221;力&#8221;有助於增加服出來的機率)</p>

<p>  總結來說 我對於類似論點的 comment是&#8221;it&rsquo;s a great place to start, but a terrible place to stop&#8221; (借用某環保人士對垃圾分類的看法)</p></blockquote>

<p>Tomo:</p>

<blockquote><p>  我不曉得政府一天之內可以改變什麼?</p>

<p>  而且坦白說我覺得現在的政府也不會改變什麼。318學運後隔幾個禮拜，有一次我在診所看電視時，旁邊一對跟我年紀差不多的夫妻看著電視上的林飛帆說:又是這個姓林的哦，這樣一直亂下去很糟糕耶。我那時候開始很真實地體認到，網路上鄉民喜歡拿&#8221;沉默的多數&#8221;來開玩笑，其實才是個笑話，因為不認同的人其實很多。看著上上下下的內閣，包括江宜樺，我不認為他們&#8221;不想&#8221;幫台灣做事，而是在做他們認為對的事。所以目前政府是由一群&#8221;理念相同的人&#8221;，而且這群人絕對不是少數，所以我才覺得政府並不會改變什麼。</p>

<p>  我不大懂&#8221;it&rsquo;s a great place to start, but a terrible place to stop&#8221;的意思，是指&#8221;只&#8221;加強英文沒辦法改變什麼嗎?</p>

<p>  陳超明在各種和政府單位開會的機會都會提供一些建議，但通常都沒回應。范疇在書裡有提到2個很有趣的概念，一個是讓高雄獨立，讓高雄財政和台灣脫勾自行發展，另一個是把台東賣給馬爾地夫，讓馬爾地夫來發展台東的觀光。</p>

<p>  我想他們兩個都在各自的領域發揮他們的影響力，期待有一天相同理念的人會愈來愈多吧。</p>

<p>  還有，那天講座是&#8221;TutorABC&#8221;讚助的，你要原諒兩位講者不能&#8221;離題&#8221;太多啦XD</p></blockquote>

<p>R&rsquo;s:</p>

<blockquote><p>  同意&#8221;現在的&#8221;政府無法期待，不過我反對的是不能因為這樣就覺得責任不在政府身上。要是有心的政府有很多事可以做阿&hellip;就拿我們說的英文教育好了 進步空間要多大有多大。還有產業升級阿，本來該是工研院該負的責任，你看現在的工研院像什麼話</p>

<p>  &ldquo;terrible place to stop&#8221;指的是不該覺得問題是在台灣人的&#8221;本質&#8221;身上，而該思考是什麼樣的系統養成了現在一群這樣的人，要怎麼改變這個系統？(當然你可以說系統也是人組成的，有夠多人進步了的話系統自然也會變。理論上是有機會 但可行性太低，你要如何一次改變夠多的人？)
當然我沒見過這兩位講者，書也沒看過，只讀了其中一位的一兩篇文章。就算有誤解也很有可能，不過我想我的誤解對他們也不會造成任何傷害，他們應該是不會介意啦ㄎㄎ</p>

<p>  不過 你提到的他們提出的方案其實聽起來還蠻有趣的 有機會去書店翻翻</p>

<p>  另外 我也不覺得那個海龜理論適用台灣。台灣嫩的跟什麼一樣 民主跟工業化都不到50年 海龜蛋還差不多</p></blockquote>

<h1>後續</h1>

<p><a href="http://wiki.mbalib.com/zh-tw/%E6%B5%B7%E9%BE%9F%E4%BA%A4%E6%98%93%E6%B3%95">海龜</a>這個名詞勾起我多年前的回憶，一開始在信裡看到這個名詞，還想說怎麼在這裡突然冒出來？雖然此海龜非彼海龜，最後貼個海龜圖送給跟我一樣這三天書信往來，死了不少腦細胞的R&rsquo;s</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[語言管理]]></title>
    <link href="http://www.tomohung.com/blog/2014/12/12/language-management/"/>
    <updated>2014-12-12T05:32:48+08:00</updated>
    <id>http://www.tomohung.com/blog/2014/12/12/language-management</id>
    <content type="html"><![CDATA[<p><img src="http://i.minus.com/ibp6diev7FKMoZ.jpg" width="640"></p>

<p>這禮拜三晚上，特地到台大參加今周刊舉辦的講座『語言管理』，一開始完全就是為了范疇才報名的，想聽看看本人會說些什麼。但其實講座的主講人有兩位，一位是范疇，另一位是陳超明老師。</p>

<p>聽完後才覺得，這輩子學英文老是覺得學習英文很重要，但是總是處於半吊子的狀態，范疇說了，<code>英文不是拿來學習的，是要拿來用的</code>。怎麼樣建立目標與動機，永遠是學習最重要的課題啊。</p>

<!--more-->


<h1>陳超明</h1>

<p><img src="http://i.minus.com/iCZF589L0a5oJ.png" width="640"></p>

<p><a href="http://www.englishforlife.com.tw">陳超明</a>老師主要是推廣英文，用自己參加各國的會議經驗，來表達語言的重要性。
幾個重點：</p>

<ul>
<li><p>低薪時代不是只有台灣才有，是全世界性的現像，中產階級慢慢在消失當中，在台灣，低階主管和高階主管的數量增加，但是中階主管的數量在過去幾年，己經減少了大約14萬。</p></li>
<li><p>東南亞聯盟己經決定要將英文列為官方語言了。</p></li>
<li><p>知識創新、人才創新，台灣要做加值貿易（這其實是范疇在<a href="http://www.books.com.tw/products/0010653477">與中國無關</a>這本書裡頭講的）</p></li>
<li><p>2030年，大約有20億的工作會消失 by Tomas Frey。</p></li>
<li><p>Work For Job，意思就是單純的工作（Job）會消失，而需要人類智能的工作（Work）才是重點</p></li>
<li><p>Engagement 接觸參與才是王道</p></li>
<li><p>Think Globally, prosper Regionally.</p></li>
</ul>


<h1>范疇</h1>

<p><a href="http://www.books.com.tw/products/0010653477">與中國無關</a>的作者，我也是因為看過書驚為天人，才來報名這個講座的。</p>

<p><img src="http://i.minus.com/ixXEGUqtlejfK.JPG" width="640"></p>

<p>幾個重點：</p>

<ul>
<li><p>舊世界的來往是1對1，或是1對多；但新世界的來往己經是多對多，網對網。</p></li>
<li><p><a href="http://brandont.pixnet.net/blog/post/29703956-%E6%97%A5%E6%9C%AC%E6%99%BA%E8%83%BD%E6%89%8B%E6%A9%9F%E7%82%BA%E4%BD%95%E6%B5%B7%E5%A4%96%E5%8F%97%E9%98%BB">Galapagos Syndrome</a>，台灣現在就是活在自己的島上，排斥與外界接觸。</p></li>
<li><p>重視競爭力己經過時了，但是台灣現在還在追求這套，所以永遠對免稅、FTA等等，才會覺得這麼重要，現在這個時代重要的是<code>參與力Engaging</code>。</p></li>
<li><p>積極參與，創造網絡。</p></li>
<li><p>中國一直以來都是強盛大國，只有在文化大革命後的30年，台灣抓到這個機會站起來，現在的狀況只不過是回歸常態。要認清這個事實。</p></li>
<li><p>建立讓世界走進心胸的說YES習慣。</p></li>
</ul>


<p>而這些，強化自己本身的語言，是最重要的第一步（最後他終於拉回主題了XD）</p>

<h1>Panel Discussion</h1>

<p><img src="http://i.minus.com/iPFNuh76KUl93.jpg" width="640"></p>

<h3>廢除教育部</h3>

<p>會後開放問答，最有趣的是陳超明與范疇都同意，或許要改善現行教育制度，就是要廢除教育部。教育部編列了一堆計劃，卻成效不彰，但其實只要列出學習目標審核，其它的要怎麼學習，用什麼方法來學習，都交給民間單位來自行決定。陳超明老師就提了，以一個中學生的程度，應該要能表現15分鐘的英文演說（汗顏~）。</p>

<h3>在深山吃龍蝦</h3>

<p>另一個有趣的是范疇用了「想在深山吃龍蝦」來比喻台灣的現況。深山裡要取得龍蝦是非常不易的，想吃，得付出代價，而重點在於，我們是否願意付出這個代價，而願意的話，學習語言走出第一步，擁抱世界，強化參與力。</p>

<p>相反的，如果想到近海，容易取得的地方吃龍蝦呢？這在范疇的書裡有提到，台灣未來的其中一條路就是和大陸統一，靠著大陸的讓利，讓台灣可以用較輕鬆的方法取得龍蝦。</p>

<p>而如前述，台灣的現況是<a href="http://brandont.pixnet.net/blog/post/29703956-%E6%97%A5%E6%9C%AC%E6%99%BA%E8%83%BD%E6%89%8B%E6%A9%9F%E7%82%BA%E4%BD%95%E6%B5%B7%E5%A4%96%E5%8F%97%E9%98%BB">Galapagos Syndrome</a>，只看的到中國的威脅，而沒有看到世界的機會。</p>

<h3>競爭力大師Michael Porter</h3>

<p>前陣子來台灣的<a href="http://zh.wikipedia.org/wiki/%E8%BF%88%E5%85%8B%E5%B0%94%C2%B7%E6%B3%A2%E7%89%B9">Michael Porter</a>也被兩個人拿出來嘲諷了一番，認為台灣這二十年來發展的走向就是深受他的影響，同時也提到了他其實<a href="http://www.businessweekly.com.tw/KBlogArticle.aspx?id=2478">公司己經破產</a>的事。</p>

<p>回來查了資料，才知道<a href="http://zh.wikipedia.org/wiki/%E4%BA%94%E5%8A%9B%E5%88%86%E6%9E%90">五力分析</a>就是Porter所提倡的。
看了wiki上的內容，可以發現其實台灣根本就是把五力分析發揮到極致，也可以說這幾年台灣的競爭力就是由此而生。</p>

<p>競爭力(Competing)和參與力(Engaging)以軟體工程的角度來說，我覺得參與力比較像是用open source的概念，大量的讓所有願意開放的人進來參與。這有兩個好處，一個是讓各種強者進入完善這個project，另一個好處就是軟體工程一直強調的<a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY原則(Don&rsquo;t Repeat Yourself)</a>，不要重複打造輪子，把時間花在你真正要做的核心價值上。</p>

<h3>Globish</h3>

<p><a href="http://www.toeic.com.tw/campaign/globish/">Globish</a>全球化英語是日本樂天正在進行的計劃，傳統上不同國家之間的交流，都是要靠少數精英當中間的翻譯，但現在則靠Globish提升員工與其它人的參與力，目的就是要底下員工都能直接面對全世界的客戶。</p>

<h1>雜談</h1>

<p>聽完講座，自己想強化英文的決心倒是有著重新開始的振作，希望自己能一鼓作氣，目標讓自己的英文一口氣提升至能夠進行15分鐘的演說。</p>

<p>另外也有點感慨，之前參加商周辦的論壇，還是這次參加的講座，自己都必需從中壢趕到台北，在知識的交流上，桃園的位置似乎註定要因為台北而邊緣化。</p>

<h1>後續 update</h1>

<p>與朋友對此文章的對談後續
<a href="http://www.tomohung.com/blog/2014/12/15/yu-yan-guan-li-xu/">http://www.tomohung.com/blog/2014/12/15/yu-yan-guan-li-xu/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Quora]為什麼軟體工程師可以賺這麼多錢？]]></title>
    <link href="http://www.tomohung.com/blog/2014/12/09/why-do-software-engineers-make-so-much/"/>
    <updated>2014-12-09T20:51:53+08:00</updated>
    <id>http://www.tomohung.com/blog/2014/12/09/why-do-software-engineers-make-so-much</id>
    <content type="html"><![CDATA[<p><img src="http://i.minus.com/iEq3JDsAn8DtA.jpg" width="640"></p>

<p>原文出處Origin: <a href="http://qr.ae/qhLVJ">http://qr.ae/qhLVJ</a></p>

<h1>為什麼軟體工程師可以賺這麼多錢？</h1>

<h2>問：</h2>

<!--
In California, the average software engineer at a tech startup makes well over $100k/year. And that's when they're fresh out of college. 

Why? I'm guessing it's because of supply/demand and there's a shortage of software engineers.

With so many students pursuing careers in software engineering today, do you see salaries going significantly down in the future? By how much would you say?
-->


<p>在加州，軟體工程師在新創團隊年薪可超過10萬。而且這還是他們剛踏出校園的水準。</p>

<p>為什麼？我猜這是因為供給需求，而軟體工程師很少。
隨著愈來愈多學生投入軟體工程的今天，你可以預見在未來薪水會明顯的減少嗎？又會少到什麼程度呢？</p>

<h2>答：</h2>

<p><strong>Michael O. Church</strong></p>

<!--
That's actually not that high. Housing is considered affordable at 24-30% of a person's annual income. That means that, at $100,000 per year, you can afford up to $2,000 to $2,500 per month. What can you get in San Francisco for $2,500? Or New York? You can get a decent studio or 1BR, but raising a family is impossible. Even in the Valley, what kind of house would you be able to get on a $2,500 mortgage?
-->


<p>實際上並沒有這麼高。住的花費大概會佔掉一個人大約24-30%的年收入。這表示，年收入10萬，你可以負擔2000-2500每個月的房租。只有2500要怎麼在舊金山生活？或者是紐約？你可以有一個工作室，或是一個小套房，但如果是一個家庭的話，不可能。甚至在矽谷，什麼樣的房子可以只用2500就能貨款買到？</p>

<!--more-->




<!--
In 1999, $100,000 was considered typical for a good software engineer in the Bay Area or New York, and $160,000 (plus equity, and not the 0.02% bullshit you see now) for a top-notch one. Those numbers, in 2014 dollars, would be $143,000 (on the high-end of the engineer pay scale) and $228,000 (unheard-of for a non-management corporate drone). Inflation adjusted, the picture has become worse-- moreso if you include increased costs of housing, health insurance, and the like. 

Software engineers aren't a privileged set. They're just less fucked than the rest of the U.S. Former Middle Class.
-->


<p>在1999年，年收入10萬被認為是一個在灣區或是紐約好的軟體工程師的收入，而年收入16萬（是平均以上，而不是現在你看到那些前面0.02%）是屬於頂尖水準。這些數字在2014年時，只值14萬3千鎂（屬於高端工程師的薪水）而22萬8千元（沒聽過非管理階級可以拿到）。通貨膨漲正在進行，而景像看起來是愈來愈糟，包括居住，保險等等。</p>

<!--
Additionally, the income trajectory of a software engineer flattens out very quickly. The Bay Area software engineer may start at $100,000, but to get to $150,000 usually requires moving into management. Moreover, the software industry is fighting a paradox-of-plenty; because the victories are so remunerative (to the business, not the engineers) this industry allows an incredible amount of mismanagement. So that (software management) is a harrowing, un-fun path to take with a high burn-out rate. Executive and founder roles at startups are what bottom-10% McKinseys and Goldmanites fail into. Software engineers eventually get sick of answering to idiots and burn out, and if you rise into middle-management, you're in the even-worse position of having to motivate smart people to answer to idiots you pretend to respect because it's your job. 

-->


<p>另外，軟體工程師收入扁平化非常快。灣區的軟體工程師可能起薪是年薪10萬，但想拿到15萬通常必需要轉管理職。此外軟體工程正在對抗兩難的困境，因為贏者的報酬極高（商業而言，而不是工程師而言），這個產業允許大量不當的管理。所以（軟體管理）是一個不有趣，替換率很高的工作。管理階級和創辦人扮演著新創公司時最底層的那10%。軟體工程師最後會厭煩回答那些白痴的問題，而且如果你晉升到了中階管理階層，情況只會更糟，因為你必需要鞭策那些聰明的人去回答那些你假裝尊敬的白痴問題，只因為就是你的工作。</p>

<!--
Finally, there's the age discrimination. Few educated people consider the median major league athlete overpaid, considering the short length of that career. Now, it takes decades to become a great programmer, but great programmers tend to be older (with a few exceptions, late 30s at least) and the Valley doesn't like age. (It also, for the most part, doesn't have much demand for great programmers. For most of these bullshit products, clueless young people will do.) If you can become a consultant, you can have a pretty good life for yourself, but that requires an entirely different skill set that a corporate job won't teach you. If you find your way into a research group, you can offset the age penalty (because R&D people actually get intellectually stimulating work and don't turn into zombies or executives by 35) but that tends to require a PhD. Or, there's management, but I already addressed the negatives of that path. 

This idea that software salaries are "crazy" is not only inaccurate, but deeply harmful. It needs to end now.
  
-->


<p>最後，還存在年齡的歧視。少數受過教育的人認為中等程度學校畢業的人，考慮短短的職涯，薪水超過應拿的水準。現在，要成為一位很棒的程式工程師必需花十年以上，但好的工程師愈來愈老（少部份例外，不到30歲）而矽谷不喜歡有年紀的人。（這也代表，在大部份的時候，沒有高階工程師的需求）如果你成為了一位顧問，你可以過著很好的生活，但這需要完全不同的技能而這些在公司的工作不會教你。如果你找到了研究單位的工作，你可以延後年齡的問題（因為研發的通常很自發性的聰明工作也不會35歲就變成像僵屍一樣。但趨勢表示你需要有一個博士學位。或者，轉管理職，但我己經說明了這條路的負面影響。</p>

<p>關於說軟體工程師薪水多好多好是一件瘋狂的事，並不準確且傷人。停止謠言吧。</p>

<p>Written 8 Jul.Suggest Edits</p>
]]></content>
  </entry>
  
</feed>
