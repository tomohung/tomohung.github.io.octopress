<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2015-05-06T20:10:18+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week7 (3/3)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-3-slash-3/"/>
    <updated>2015-05-06T17:22:47+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-3-slash-3</id>
    <content type="html"><![CDATA[<h1>Messsage Expectation</h1>

<p>We has metioned <a href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-1/">Test Double at post (1/3)</a>, and here is another kind of Test Double, called <code>Mock Objects</code>.</p>

<blockquote><p>Assert communication, not response</p></blockquote>

<p>In previous post, we have moved the code into <code>UserSignup</code> services obejct and test it. And here all we need to test is ensure that <code>:sign_up</code> method is called in <code>UsersController#create</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe UsersController do
</span><span class='line'>  describe 'POST create' do
</span><span class='line'>    context 'with valid input' do
</span><span class='line'>
</span><span class='line'>      it 'should logged_in if create user' do
</span><span class='line'>        result = double(:sign_up, successful?: true)
</span><span class='line'>        expect_any_instance_of(UserSignup).to receive(:sign_up).and_return(result)
</span><span class='line'>        expect_any_instance_of(User).to receive(:id).and_return(1)
</span><span class='line'>        post :create, user: Fabricate.attributes_for(:user)
</span><span class='line'>        expect(session[:user_id]).to eq(1)
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>expect_any_instance_of(UserSignup).to receive(:sign_up).and_return(result)</code> is called <code>Message Expectation</code> in RSpec, a kind of <code>Mock Object</code>.</p>

<p>Refer to RSpec, it defines</p>

<blockquote><h3>Mock Objects and Test Stubs</h3>

<p>The names Mock Object and Test Stub suggest specialized Test Doubles. i.e. a Test Stub is a Test Double that only supports method stubs, and a Mock Object is a Test Double that supports message expectations and method stubs.</p>

<p>There is a lot of overlapping nomenclature here, and there are many variations of these patterns (fakes, spies, etc). Keep in mind that most of the time we&rsquo;re talking about method-level concepts that are variations of method stubs and message expectations, and we&rsquo;re applying to them to one generic kind of object: a Test Double.</p></blockquote>

<h1>Test Minimalist</h1>

<p>Here we got 3 resources of discussion test.</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=R9FOchgTtLM">Why you don&rsquo;t get mock objects by Gregory</a></li>
<li><a href="http://martinfowler.com/articles/mocksArentStubs.html">Mock Aren&rsquo;t Stub by Mark Folwer</a></li>
<li><a href="https://www.youtube.com/watch?v=URSWYvyc42M">The Magic tricks of Testing by Sandi Mets</a></li>
</ul>


<p>Summary for these three resources.</p>

<p>I use Sandi&rsquo;s picture for the start:</p>

<p><img src="http://jnoconor.github.io/images/unit-testing-chart-sandi-metz.png"></p>

<p>Use this week assignment, class <code>UserSignup</code> for example:</p>

<ul>
<li><p>Incoming Query: We test UserSignup method <code>sign_up</code>, and expect it returns an successful object with valid info. This spec is testing this object state.</p></li>
<li><p>Incoming Command: We also test UserSignup method <code>sign_up</code>, and expect it should create an user with valid info. This is what Sandi said: side effects for outside.</p></li>
</ul>


<blockquote><p>Incoming Command and Incoming Query are all what Mark Folwer said State or Stub or Classical.</p></blockquote>

<ul>
<li><p>Sent to Self: According to Sandi&rsquo;s opinion, it&rsquo;s not necessary to test all private methods in class. Maybe for the complex method, we should think if we can abstract some logic into a new class, and give that class another tests if we need it.</p></li>
<li><p>Outgoing Query: Sandi ignore this, I guess she means that once the object send a new query to the other object, all we need to do is make sure that the other object works fine. And this should be test on that object, so we don&rsquo;t need to test outgoing query.</p></li>
<li><p>Outgoing Command: Once we let an object send a message to the other object do some side effects, all we need to do is make sure that this object do send a message. And this is method message expectation in RSpec, also Mark Folwer said behavior or Mockist or &lsquo;Mock&rsquo;.</p></li>
</ul>


<p>Gregory and Sandi all said that Mock Object can loose each objects association when testing. Once we are testing behavior( or maybe I can say testing interface), we don&rsquo;t need to bind the test and method with specific variable, but bind with an interface. It looks like apply OO concept on testing - try to loose connection with each objects, also loose each object&rsquo;s tests.</p>

<p>Kevin also metions this:</p>

<blockquote><p>a pure &ldquo;mockist&rdquo; way of doing test can be difficult in Rails apps, because in rails apps persistence is handled by the framework and for small apps most of object collaboration / message sending are about persistence. If you mock those interfaces, you end up mocking the guts of rails and that typically doesn&rsquo;t end up well.  this is also why we only touch this topic in the context of non rails objects like service objects.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week7 (2/3)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-2/"/>
    <updated>2015-05-06T15:42:37+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-2</id>
    <content type="html"><![CDATA[<h1>Beyond MVC</h1>

<p>Rails built on MVC (Model / View / Controller) structure. And something get complex if we got more code and logic. This is why we need design patterns.</p>

<h2>Decorators</h2>

<p>Some tips from gem <code>Draper</code>:</p>

<blockquote><p>Without Draper, this functionality might have been tangled up in procedural helpers or adding bulk to your models. With Draper decorators, you can wrap your models with presentation-related logic to organise - and test - this layer of your app much more effectively.</p></blockquote>

<p>Or</p>

<blockquote><p>Decorators are the ideal place to:
- format complex data for user display
- define commonly-used representations of an object, like a <code>name</code> method that combine <code>first_name</code> and <code>last_name</code> attributes.
- mark up attributes with a little semantic HTML, like turning a url fiedl into a hyperlink.</p></blockquote>

<p>First, install gem</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'draper'</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/decorator/video_decorator.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">VideoDecorator</span> <span class="o">&lt;</span> <span class="no">Draper</span><span class="o">::</span><span class="no">Decorator</span>
</span><span class='line'>  <span class="n">delegate_all</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rating</span>
</span><span class='line'>    <span class="s2">&quot;Rating: &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="n">object</span><span class="o">.</span><span class="n">rating</span><span class="o">.</span><span class="n">present?</span> <span class="p">?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">rating</span><span class="si">}</span><span class="s2">/5.0&quot;</span> <span class="p">:</span> <span class="s2">&quot;NA&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And use it in controller</p>

<figure class='code'><figcaption><span>videos_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@video</span> <span class="o">=</span> <span class="no">VideoDecorator</span><span class="o">.</span><span class="n">decorate</span><span class="p">(</span><span class="no">Vidoe</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>  <span class="n">dne</span>
</span></code></pre></td></tr></table></div></figure>


<p>In view, just a clear line code.</p>

<figure class='code'><figcaption><span>app/views/videos/show.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">=</span> <span class="vi">@video</span><span class="o">.</span><span class="n">rating</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key point here is that we have a model data (rating) associated with view, it&rsquo;s not suitable to put to <code>view helper</code> (some logic with model). That&rsquo;s why here using decorator to encapsulate presentation logic.</p>

<h2>Policy Objects</h2>

<p>Define what is premium user:</p>

<figure class='code'><figcaption><span>models/user_level_policy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserLevelPolicy</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">premium?</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">created_at</span> <span class="o">&lt;</span> <span class="no">Date</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2010</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="n">user</span><span class="o">.</span><span class="n">plan</span><span class="o">.</span><span class="n">premium?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Controller</p>

<figure class='code'><figcaption><span>todo_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">###some code</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">UserLevelPolicy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span><span class="o">.</span><span class="n">premium?</span>
</span><span class='line'>    <span class="c1">#do something</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1">#do another thing</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Different with Decorators, Policy Ojbects only concern judgement logic into one place, without presentation concerned.</p>

<h2>Domain Objects</h2>

<p>if <code>User</code> has an attribute <code>credit_balance</code>. Then merge those code relative to <code>credit</code> into Domain Object.</p>

<figure class='code'><figcaption><span>models/credit.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Credit</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:credit_balance</span><span class="p">,</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@credit_balance</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">current_credit_balance</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">-</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_balance</span> <span class="o">=</span> <span class="n">credit_balance</span> <span class="o">-</span> <span class="n">number</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">current_credit_balance</span> <span class="o">=</span> <span class="n">credit_balance</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">depleted?</span>
</span><span class='line'>    <span class="n">credit_balance</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">low_balance?</span>
</span><span class='line'>    <span class="n">credit_balance</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus <code>Credit.new(current_user)</code> can call methods about credit, and don&rsquo;t need to put these code in model <code>User</code>, or <code>UsersController</code>.</p>

<h2>Service Objects</h2>

<p>We abstract an action as <code>sign up</code> in <code>UsersController#create</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_signup_service</span> <span class="o">=</span> <span class="no">UserSignup</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">user_signup_service</span><span class="o">.</span><span class="n">sign_up</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:stripeToken</span><span class="o">]</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:token</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">successful?</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">home_path</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">.</span><span class="n">now</span><span class="o">[</span><span class="ss">:danger</span><span class="o">]</span> <span class="o">=</span>  <span class="n">user_signup_service</span><span class="o">.</span><span class="n">error_message</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create an service object <code>UserSignup</code> to handle this.</p>

<figure class='code'><figcaption><span>app/service/user_signup.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSignup</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:error_message</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_up</span><span class="p">(</span><span class="n">stripe_token</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">invitation_token</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="n">customer_charge_user_with_stripe</span><span class="p">(</span><span class="n">stripe_token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">charge</span><span class="o">.</span><span class="n">success?</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">customer_token</span> <span class="o">=</span> <span class="n">charge</span><span class="o">.</span><span class="n">customer_token</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="n">set_invitation_following_relationship</span><span class="p">(</span><span class="n">invitation_token</span><span class="p">)</span>
</span><span class='line'>        <span class="no">AppMailer</span><span class="o">.</span><span class="n">delay</span><span class="o">.</span><span class="n">send_welcome_email</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:success</span>
</span><span class='line'>        <span class="nb">self</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:failed</span>
</span><span class='line'>        <span class="vi">@error_message</span> <span class="o">=</span> <span class="n">charge</span><span class="o">.</span><span class="n">error_message</span>
</span><span class='line'>        <span class="nb">self</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:failed</span>
</span><span class='line'>      <span class="vi">@error_message</span> <span class="o">=</span> <span class="s2">&quot;User info is invalid.&quot;</span>
</span><span class='line'>      <span class="nb">self</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">successful?</span>
</span><span class='line'>    <span class="vi">@status</span> <span class="o">==</span> <span class="ss">:success</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is an article from Code Climate <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a></p>

<p>As it metion when to use Service Object:</p>

<ul>
<li>The action is complex (e.g. closing the books at the end of an accounting period)</li>
<li>The action reaches across multiple models (e.g. an e-commerce purchase using Order, CreditCard and Customer objects)</li>
<li>The action interacts with an external service (e.g. posting to social networks)</li>
<li>The action is not a core concern of the underlying model (e.g. sweeping up outdated data after a certain time period).</li>
<li>There are multiple ways of performing the action (e.g. authenticating with an access token or password). This is the Gang of Four Strategy pattern.</li>
</ul>


<h2>Some Concept for Object Oriented Design</h2>

<ul>
<li><p><code>Fat model, skinny controllers</code> makes model uncontrollrable. That&rsquo;s why we need Object Oriented Design</p></li>
<li><p>YAGNI</p></li>
</ul>


<p>YAGNI means <code>You Aren't Gonna Need It!</code></p>

<p>Don&rsquo;t write the code you haven&rsquo;t need it.</p>

<p>Here is aother post talking about <code>YAGNI</code>, <code>KISS</code>, <code>DRY</code>.
<a href="http://www.itexico.com/blog/bid/99765/Software-Development-KISS-YAGNI-DRY-3-Principles-to-simplify-your-life">Software Development: KISS, YAGNI &amp; DRY. 3 Principles to simplify your life.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week7 (1/3)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-1/"/>
    <updated>2015-05-06T14:20:15+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-1</id>
    <content type="html"><![CDATA[<p>Last week, we use Stripe for charge in UsersController#create, it&rsquo;s a bit little hard code here. We need to wrap it.</p>

<p>Why we need to wrap it into a class:</p>

<ol>
<li><p>Easy to maintain code, isolate controller&rsquo;s and business logic. Remember we knew that <code>fat models, thin controllers</code>, here is a step further concept, we encapsulate code into <code>models/stripe_wrapper.rb</code></p></li>
<li><p>Easy to test, isolate test between different object is always a good idea.</p></li>
</ol>


<h1>How to Wrap</h1>

<p>For <code>module StripeWrapper</code> is just a namespace. Then we sort the code in UsersController#create,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module StripeWrapper
</span><span class='line'>  class Charge
</span><span class='line'>    attr_reader :response, :status
</span><span class='line'>    
</span><span class='line'>    def initialize(response, status)
</span><span class='line'>      @response = response
</span><span class='line'>      @status = status
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def self.create(options = {})      
</span><span class='line'>      begin
</span><span class='line'>        response = Stripe::Charge.create(
</span><span class='line'>          amount: options[:amount], # amount in cents, again
</span><span class='line'>          currency: "usd",
</span><span class='line'>          source: options[:source],
</span><span class='line'>          description: options[:description]
</span><span class='line'>        )
</span><span class='line'>        new(response, :success)
</span><span class='line'>      rescue Stripe::CardError =&gt; e
</span><span class='line'>        new(e, :error)
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def success?
</span><span class='line'>      status == :success
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def error_message
</span><span class='line'>      response.message
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.set_api_key
</span><span class='line'>    Stripe.api_key = ENV["STRIPE_SECRET_KEY"]
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then we can call method <code>StripeWrapper::Charge(options)</code>.</p>

<p><code>new(repose, :sucess)</code> and <code>new(e, :error)</code> return an <code>StripeWrapper::Charge</code> object result.</p>

<h1>How to Test StripeWrapper</h1>

<p>Test return object <code>charge</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe StripeWrapper do
</span><span class='line'>  describe StripeWrapper::Charge do
</span><span class='line'>    it 'makes successful charge' do
</span><span class='line'>      charge = StripeWrapper::Charge.create(amount: 100, source: valid_token)
</span><span class='line'>      expect(charge.response.amount).to eq(100)
</span><span class='line'>      expect(charge.response.currency).to eq('usd')
</span><span class='line'>      expect(charge).to be_success
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>But there is a problem, everytime we test, it will send a request to Stripe server. We don&rsquo;t want to do this and want to reduce test consumer time, use gme <code>vcr</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install vcr
</span><span class='line'>$ gem install webmock</span></code></pre></td></tr></table></div></figure>


<p>Then add <code>vcr: true</code> to spec</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>it 'make successful charge', vcr: true do
</span><span class='line'>  #something
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>vcr will record the reponse in <code>spec/cassettes</code>, when next time it find that test emit the same request again, it will not send the request outside to the server, instead of replaying saved response.</p>

<p>Here is vcr setting:</p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;vcr&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">VCR</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">cassette_library_dir</span> <span class="o">=</span> <span class="s1">&#39;spec/cassettes&#39;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">hook_into</span> <span class="ss">:webmock</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">configure_rspec_metadata!</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">ignore_localhost</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>How to test Controller#create</h1>

<p>Since we have test StripeWrapper, we don&rsquo;t want to test it again in Controller, or hit the Stripe server again. Use <a href="http://en.wikipedia.org/wiki/Test_double">Test Double</a> <code>stub</code> here.</p>

<p>For example, if we have a <code>PaymentController</code>:</p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">PaymentController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;POST create&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;sets the flash success message&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;charge&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">charge</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:successful?</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="no">StripeWrapper</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">charge</span><span class="p">)</span>
</span><span class='line'>      <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">token</span><span class="p">:</span> <span class="s2">&quot;fake_token&quot;</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_present</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Create a test stub <code>charge</code>, and stub a method <code>successful?</code> and return <code>true</code>.</li>
<li>stub <code>:create</code> method to <code>StripeWrapper::Charge</code> and return <code>charge</code>.</li>
</ol>


<p>Now we strike <code>post :create</code>, in PaymentController#create when running to code StripeWrapper::Charge, it will return a result <code>charge</code> with <code>charge.successful?</code> is <code>true</code>.</p>

<p>We do this is because make this controller#create test itself independently, and all we need to do is set StripeWrapper return successful.</p>

<blockquote><p>StripeWrapper will make a HTTP request, we can use <code>vcr</code> to record this, but it&rsquo;s not necessary becuase this test is already done in stripe_wrapper_spec. So here we choose to use <code>stub</code>.</p></blockquote>

<h1>How to do Feature Test with JavaScript</h1>

<p>Since we use javascript in view form, we need to turn on <code>:js</code></p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;visitor make payment&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;with valid card number&#39;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">new_payment_path</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;Credit Card Number&quot;</span><span class="p">,</span> <span class="n">with</span> <span class="s2">&quot;424242424242424242&quot;</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;Security Code&quot;</span><span class="p">,</span> <span class="n">with</span> <span class="s2">&quot;123&quot;</span>
</span><span class='line'>    <span class="nb">select</span> <span class="s2">&quot;3 - March&quot;</span><span class="p">,</span> <span class="ss">form</span><span class="p">:</span> <span class="s2">&quot;date_month&quot;</span>
</span><span class='line'>    <span class="nb">select</span> <span class="s2">&quot;2015&quot;</span><span class="p">,</span> <span class="ss">from</span><span class="p">:</span> <span class="s2">&quot;date_year&quot;</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s2">&quot;Submit Payment&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span> <span class="s2">&quot;Successful charge.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install gem</p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;selenium-webdriver&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capybara-webkit&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And set in <code>spec_helper.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:webkit</span> <span class="c1"># For default javascript server</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">server_port</span> <span class="o">=</span> <span class="mi">52662</span> <span class="c1"># For Selenium</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>webkit</code> is offered by <code>Qt</code> framework, it&rsquo;s faster than <code>Selenium</code> and invisible. <code>Selenium</code> process is visible, so it&rsquo;s suit for debug.</p>

<p>Careful when test in Email Invitation, I need to use <code>Selenium</code> instead of <code>webkit</code>, otherwise the test will be failed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scenario</span> <span class="s1">&#39;User successfully invites friend and invitation is accepted&#39;</span><span class="p">,</span> <span class="p">{</span><span class="ss">js</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">vcr</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">driver</span><span class="p">:</span> <span class="ss">:selenium</span><span class="p">}</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Setting <a href="https://github.com/DatabaseCleaner/database_cleaner">database_cleaner</a></h2>

<p>It will lead a problem when we run javascript test, refer from RSpec doc:</p>

<blockquote><p>drivers which run the server in a different thread may not share the same transaction as your tests, causing data not to be shared between your test and test server.</p></blockquote>

<p>The problem is when running javascript, activerecord may delete database before javascript test finish.</p>

<p>We can use <code>database_cleaner</code> to do <code>truncation</code> instead of <code>transaction</code>. Manual create and destroy records.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean_with</span><span class="p">(</span><span class="ss">:truncation</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:transaction</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">:js</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week6 (2/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6-2-slash-2/"/>
    <updated>2015-05-06T09:50:50+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6-2-slash-2</id>
    <content type="html"><![CDATA[<p>These week we have two main part: <a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> for uploading images as an admin, <a href="http://stripe.com">Stripe</a> for payments</p>

<p>The first part about CarrierWave for uploading images as an Admin is <a href="http://tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6/">here</a>.</p>

<h1>Stripe for Payments</h1>

<p>Two articles about payments:</p>

<ul>
<li><a href="https://signalvnoise.com/posts/753-ask-37signals-how-do-you-process-credit-cards">How Do You Process Credit Card</a> by Jason Fried</li>
</ul>


<blockquote><p>The one thing we’re often surprised by is how many accounts have charge issues so it’s important to really think about the error handling and customer experience issues related to declined cards.</p></blockquote>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard">Payment Card Industry Data Security Standard by wiki</a></li>
</ul>


<h3>Stripe &amp; Figaro</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'stripe'
</span><span class='line'>gem 'figaro'</span></code></pre></td></tr></table></div></figure>


<p><code>$ figaro install</code></p>

<p>Use Figaro to set Environment variables, Do Not hard code it!!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#config/application.yaml
</span><span class='line'>test:
</span><span class='line'>  STRIPE_SECRET_KEY: sk_test_xxxxxxxxx
</span><span class='line'>  STRIPE_PUBLISHABLE_KEY: pk_test_xxxxxxxxxx
</span><span class='line'>
</span><span class='line'>development:
</span><span class='line'>  STRIPE_SECRET_KEY: sk_test_xxxxxxx
</span><span class='line'>  STRIPE_PUBLISHABLE_KEY: pk_test_xxxxxxx
</span><span class='line'>
</span><span class='line'>production:
</span><span class='line'>  STRIPE_SECRET_KEY: sk_live_xxxxxx
</span><span class='line'>  STRIPE_PUBLISHABLE_KEY: pk_live_xxxxxxxx
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>If Stripe account doesn&rsquo;t activate, we only can use test key <code>sk_test_xxxxxxx</code> even ENV = production</p></blockquote>

<p>I also add this file <code>config/initailizers/figaro.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Figaro.require_keys("STRIPE_SECRET_KEY", "STRIPE_PUBLISHABLE_KEY")</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s convenient to check if you forget to set Environment variables on deploy machine(ex. Circle CI or Heroku).</p>

<p>Figaro also provide a way to set Heroku ENV.</p>

<p><code>$ figaro heroku:set -e production</code></p>

<h3>Stripe Custom Form</h3>

<ol>
<li>Setting form view</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/javascript" src="https://js.stripe.com/v2/"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;script type="text/javascript"&gt;
</span><span class='line'>Stripe.setPublishableKey("#{ENV['STRIPE_PUBLISHABLE_KEY']}");
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>= javascript_include_tag 'payment'
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>When deploy to Heroku, I got this error <code>Failed to load resource: the server responded with a status of 404 (Not Found)</code></p>

<p>This is becuase assets pipeline, add this to the file</p></blockquote>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;payment.js&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Key Points:</p>

<ul>
<li>use <code>id: 'payment-form'</code> in form_form, this is corespond to <code>assets/javascripts/payment.js</code> content.</li>
<li>use <code>for</code> and <code>id</code> to connect label and input</li>
<li><code>data-stripe = "number"</code> and <code>data-stripe="cvc"</code></li>
<li><code>data: { stripe: "exp-yaer"}</code> and <code>data: { stripe: "exp-month"}</code></li>
</ul>


<p>Attributes of <code>data-stripe</code> is for Stripe to know credit infomation.</p>

<p>Then in our custom form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%section</span><span class="nc">.register.container</span>
</span><span class='line'>  <span class="nc">.row</span>
</span><span class='line'>    <span class="nc">.col-sm-10.col-sm-offset-1</span>
</span><span class='line'>      <span class="p">=</span> <span class="n">bootstrap_form_for</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">layout</span><span class="p">:</span> <span class="ss">:horizontal</span><span class="p">,</span> <span class="ss">html</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;payment-form&#39;</span><span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>        <span class="nt">%header</span>
</span><span class='line'>          <span class="nt">%h1</span> Register
</span><span class='line'>        <span class="nt">%fieldset</span>
</span><span class='line'>          <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s2">&quot;Email Address&quot;</span>
</span><span class='line'>          <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password</span>
</span><span class='line'>          <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:full_name</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Full Name&#39;</span>
</span><span class='line'>          <span class="p">=</span> <span class="n">hidden_field_tag</span> <span class="ss">:token</span><span class="p">,</span> <span class="vi">@invitation_token</span>
</span><span class='line'>        <span class="nt">%fieldset</span><span class="nc">.credit_card</span>
</span><span class='line'>          <span class="nt">%span</span><span class="nc">.payment-errors</span>
</span><span class='line'>          <span class="nc">.form-group</span>
</span><span class='line'>            <span class="nt">%label</span><span class="nc">.control-label.col-sm-2</span>(<span class="na">for=</span><span class="s">&quot;credit_card_number&quot;</span>) Credit Card Number
</span><span class='line'>            <span class="nc">.col-sm-6</span>
</span><span class='line'>              <span class="nt">%input</span><span class="nc">.form-control</span>(<span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-stripe=</span><span class="s">&quot;number&quot;</span> <span class="na">id=</span><span class="s">&quot;credit_card_number&quot;</span>)
</span><span class='line'>          <span class="nc">.form-group</span>
</span><span class='line'>            <span class="nt">%label</span><span class="nc">.control-label.col-sm-2</span>(<span class="na">for=</span><span class="s">&quot;security_code&quot;</span>) Security Code
</span><span class='line'>            <span class="nc">.col-sm-6</span>
</span><span class='line'>              <span class="nt">%input</span><span class="nc">.form-control</span>(<span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-stripe=</span><span class="s">&quot;cvc&quot;</span> <span class="na">id=</span><span class="s">&quot;security_code&quot;</span>)
</span><span class='line'>          <span class="nc">.form-group</span>
</span><span class='line'>            <span class="nt">%label</span><span class="nc">.control-label.col-sm-2</span> Expiration
</span><span class='line'>            <span class="nc">.col-sm-3</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">select_month</span><span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">,</span> <span class="p">{</span><span class="ss">add_month_numbers</span><span class="p">:</span> <span class="kp">true</span><span class="p">},</span>  <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">stripe</span><span class="p">:</span> <span class="s2">&quot;exp-month&quot;</span><span class="p">})</span>
</span><span class='line'>            <span class="nc">.col-sm-2</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">select_year</span><span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">year</span><span class="p">,</span> <span class="p">{</span><span class="ss">start_year</span><span class="p">:</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">year</span><span class="p">,</span> <span class="ss">end_year</span><span class="p">:</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">year</span> <span class="o">+</span> <span class="mi">4</span><span class="p">},</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">stripe</span><span class="p">:</span> <span class="s2">&quot;exp-year&quot;</span><span class="p">}</span> <span class="p">)</span>
</span><span class='line'>        <span class="nt">%fieldset</span><span class="nc">.actions.control-group.col-sm-offset-2</span>
</span><span class='line'>          <span class="nc">.controls</span>
</span><span class='line'>            <span class="nt">%input</span>(<span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Sign Up&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span>)
</span></code></pre></td></tr></table></div></figure>


<h3>Setting in Controller Action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'># Set your secret key: remember to change this to your live secret key in production
</span><span class='line'># See your keys here https://dashboard.stripe.com/account/apikeys
</span><span class='line'>Stripe.api_key = &quot;sk_test_yNosIrCvrAuVttjO60dxy7zy&quot;
</span><span class='line'>
</span><span class='line'># Get the credit card details submitted by the form
</span><span class='line'>token = params[:stripeToken]
</span><span class='line'>
</span><span class='line'># Create the charge on Stripe&#39;s servers - this will charge the user&#39;s card
</span><span class='line'>begin
</span><span class='line'>  charge = Stripe::Charge.create(
</span><span class='line'>    <span class="nd">:amount =&gt; 1000, # amount in cents, again</span>
</span><span class='line'>    <span class="nd">:currency =&gt; &quot;usd&quot;,</span>
</span><span class='line'>    <span class="nd">:source =&gt; token,</span>
</span><span class='line'>    <span class="nd">:description =&gt; &quot;Example charge&quot;</span>
</span><span class='line'>  )
</span><span class='line'>rescue Stripe::CardError =&gt; e
</span><span class='line'>  # The card has been declined
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>Now we click submit button, charge will be deliever to Stripe.</p>

<blockquote><p>Notice again, don&rsquo;t foget to set ENV on Circle CI or Heroku if you deploy code to there.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week6 (1/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6/"/>
    <updated>2015-05-06T08:57:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6</id>
    <content type="html"><![CDATA[<p>These week we have two main part: <a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> for uploading images as an admin, <a href="http://stripe.com">Stripe</a> for payments</p>

<h1>CarrierWave for uploading images as an Admin</h1>

<h3>Admin</h3>

<p>In order to controll user is a admin or not, the best practice is to build a admin its own self routes and controllers.</p>

<p>In <code>routes.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>namespace :admin do
</span><span class='line'>  resources :todos, only: [:index, :destroy]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then <code>rake routes</code>, we got</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>admin_todos  admin/todos  admin/todos#index</span></code></pre></td></tr></table></div></figure>


<p>Build the controller file in the path: <code>/controllers/admin/todos_controller.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Admin::TodosController &lt; ApplicationController
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<blockquote><p>It&rsquo;s aother rails convention for the path <code>/controllers/admin/</code> and class name <code>Admin::</code>.</p></blockquote>

<p>Then add <code>admin</code> column to migration</p>

<p><code>$ rails g migration add_admin_to_users</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add_column :users, :admin, :boolean</span></code></pre></td></tr></table></div></figure>


<p>Rails will create a method for all boolean attributes: <code>admin?</code></p>

<h3>Secure Access for different roles</h3>

<p>Next, we can create a <code>AdminController</code> for all other controllers belongs to Admin.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class AdminController &lt; ApplicationController
</span><span class='line'>  before_filter :ensure_admin
</span><span class='line'>
</span><span class='line'>  def ensure_admin
</span><span class='line'>    if !current_user.admin?
</span><span class='line'>      #do something
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then other controllers belong to Admin could be like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Admin::TodoController &lt; AdminController
</span><span class='line'>  def index
</span><span class='line'>    @todo = Todo.all
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>CarrierWave upload images to AWS S3</h3>

<p>Install gem</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'carrierwave'
</span><span class='line'>gem 'mini_magick'</span></code></pre></td></tr></table></div></figure>


<p>Add column to stored migration, for example: videos</p>

<p><code>$rails migration add_large_cover_to_videos</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add_column :videos, :large_cover, :string</span></code></pre></td></tr></table></div></figure>


<p>In <code>models/video.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount_uploader :large_cover, LargeCoverUploader</span></code></pre></td></tr></table></div></figure>


<p>Create <code>app/uploaders/large_cover_uploader.rb</code>, and use <code>mini_magick to resize image</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class LargeCoverUploader &lt; CarrierWave::Uploader::Base
</span><span class='line'>  include CarrierWave::MiniMagick
</span><span class='line'>  process :resize_to_fill =&gt; [665, 375]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Finally, set CarrierWave for AWS S3, in <code>initializers/carrier_wave.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CarrierWave.configure do |config|
</span><span class='line'>  config.fog_provider = 'fog/aws'                        # required
</span><span class='line'>  config.fog_credentials = {
</span><span class='line'>    provider:              'AWS',                        # required
</span><span class='line'>    aws_access_key_id:     'xxx',                        # required
</span><span class='line'>    aws_secret_access_key: 'yyy',                        # required
</span><span class='line'>    region:                'eu-west-1',                  # optional, defaults to 'us-east-1'
</span><span class='line'>    host:                  's3.example.com',             # optional, defaults to nil
</span><span class='line'>    endpoint:              'https://s3.example.com:8080' # optional, defaults to nil
</span><span class='line'>  }
</span><span class='line'>  config.fog_directory  = 'name_of_directory'                          # required
</span><span class='line'>  config.fog_public     = false                                        # optional, defaults to true
</span><span class='line'>  config.fog_attributes = { 'Cache-Control' =&gt; "max-age=#{365.day.to_i}" } # optional, defaults to {}
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, my AWS account has been suspended, so I change the code to store at local</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CarrierWave.configure do |config|
</span><span class='line'>  if Rails.env.staging? || Rails.env.production?
</span><span class='line'>    config.storage = :file
</span><span class='line'>    config.enable_processing = true
</span><span class='line'>  else
</span><span class='line'>    config.storage = :file
</span><span class='line'>    config.enable_processing = Rails.env.development?
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This code also show that if you want to deal with different environment for <code>product</code> or <code>development</code></p>

<blockquote><p>Usually, only upload small size files direct through web page, we can use other AWS S3 client to upload big file.</p></blockquote>

<p>Another tip here, don&rsquo;t forget to add new attributes to <code>params.require</code>, otherwise upload will be failed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>params.require(:video).permit(:title, :description, :category_id, :large_cover, :small_cover, :video_url)</span></code></pre></td></tr></table></div></figure>


<h3>RSpec Feature Test</h3>

<p>Key Points:</p>

<ul>
<li>attach_file</li>
<li>have_selector</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>feature 'Admin adds new video' do
</span><span class='line'>  scenario 'Admin successfully adds a new video' do
</span><span class='line'>    admin = Fabricate(:admin)
</span><span class='line'>    dramas = Fabricate(:category, title: 'Dramas')
</span><span class='line'>
</span><span class='line'>    sign_in(admin)
</span><span class='line'>    visit new_admin_video_path
</span><span class='line'>
</span><span class='line'>    fill_in 'Title', with: 'Monk'
</span><span class='line'>    select 'Dramas', from: 'Category'
</span><span class='line'>    fill_in 'Description', with: 'SF detective'
</span><span class='line'>    attach_file 'Large cover', 'spec/support/uploads/monk_large.jpg'
</span><span class='line'>    attach_file 'Small cover', 'spec/support/uploads/monk.jpg'
</span><span class='line'>    fill_in 'Video URL', with: 'http://www.example.com/video.mp4'
</span><span class='line'>    click_button 'Add Video'
</span><span class='line'>
</span><span class='line'>    sign_out
</span><span class='line'>    sign_in
</span><span class='line'>
</span><span class='line'>    visit video_path(Video.first)
</span><span class='line'>    expect(page).to have_selector("img[src='/uploads/monk_large.jpg']")
</span><span class='line'>    expect(page).to have_selector("a[href='http://www.example.com/video.mp4']")
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -7]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/04/eloquent-ruby-7/"/>
    <updated>2015-05-04T06:19:26+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/04/eloquent-ruby-7</id>
    <content type="html"><![CDATA[<h1>Chapter 7 - Treat Everything Like an Object—Because Everything Is</h1>

<h2>Classes, Instances, Methods</h2>

<ul>
<li><p>Class就像是容器，可以裝很多Method。Class也像是工廠，製造出很多副本Instances</p></li>
<li><p>如果沒有指定superclass時，<code>Object</code>為預設繼承的類別。<code>Object</code>也是繼承了<code>BasicObject</code></p></li>
</ul>


<h2>Objects</h2>

<ul>
<li>反正什麼東西在Ruby裡面都是Object，可以測試這些</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-1.class
</span><span class='line'>true.class
</span><span class='line'>nil.class
</span><span class='line'>/regex/.class</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果puts出來，預設會用<code>to_s</code>轉換</li>
</ul>


<h2>eval</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cmd = 'gets'
</span><span class='line'>puts eval(cmd)</span></code></pre></td></tr></table></div></figure>


<p><code>eval</code>可以像irb執行字串所代表的程式，這也是由Object繼承而來的函數</p>

<h2>public, private, protected</h2>

<p>三種屬性來控制method的曝露性</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Method
</span><span class='line'>  def public_method
</span><span class='line'>    #預設為public，所有public method都可以呼叫
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  private # 在此之後方法都是private，只有在該instance內可以呼叫
</span><span class='line'>  def private_method
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>也可以這樣寫，不過我還沒看過實際有人這樣寫</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Method
</span><span class='line'>  def private_method
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  private :prviate_method #在這指定private_method屬性是private</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>private內的方法繼承到subclass後，<strong>同樣可以呼叫</strong>，這跟在C++中不一樣</p></li>
<li><p>protected有夠難理解，原文是這樣的</p></li>
</ul>


<blockquote><p>Any instance of a class can call a protected method on any other instance of the class</p></blockquote>

<p>我是參考高見龍<a href="http://blog.eddie.com.tw/2011/07/26/public-protected-and-private-method-in-ruby/">這篇文章</a>才比較理解為什麼</p>

<p>可以在irb這樣測試</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Base
</span><span class='line'>  private 
</span><span class='line'>  def private_show
</span><span class='line'>    puts self.class
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  protected
</span><span class='line'>  def protected_show
</span><span class='line'>    puts self.class
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>然後</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class SubBase &lt; Base
</span><span class='line'>  def use_private
</span><span class='line'>    private_show # 如果寫成self.private_show，會產生錯誤
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def use_protected
</span><span class='line'>    self.protected_show # 可以指定在self這個instance上
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>原生Ruby source code中，20萬行的程式碼，大約有1000個private methods, protected methods只有50幾個。意思就是用到的機會也不多啦。</p></li>
<li><p>另外Ruby也有個設計，如果你實在想突破限制使用class內的方法，可以用<code>send</code></p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sub_base.send(:private_show)</span></code></pre></td></tr></table></div></figure>


<p>不過一般的作法大概都是另外寫一個public method把private method包起來給外部呼叫。</p>

<ul>
<li>public, private, protected並不是什麼特別的Ruby Magic，其實他們都是methods，呼叫後面帶參數</li>
</ul>


<p>相同的還有<code>require</code>載入檔案</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rails_spec'</span></code></pre></td></tr></table></div></figure>


<p>或者是<code>attr_accessor</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>attr_accessor :name</span></code></pre></td></tr></table></div></figure>


<p>然後我們就可以有<code>name</code>的getter和setter方法</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -6]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-6/"/>
    <updated>2015-05-03T22:06:44+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-6</id>
    <content type="html"><![CDATA[<h1>Chapter 6 - Use Symbols to Stand for Something</h1>

<p>String和Symbol很類似，都可以用來代表程式中的某個事物，但字串還多了可以被用來處理得到額外資訊，如果我們單純只是想要用來代表程式中的某個事物，用Symbol就可以了。</p>

<p>－ 同一個symbol永遠指著同一個物件，如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = :sym 
</span><span class='line'>b= a
</span><span class='line'>c = :sym</span></code></pre></td></tr></table></div></figure>


<p>a, b, c都是相同的物件</p>

<p>但如果是string</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = "sym"
</span><span class='line'>b = "sym"</span></code></pre></td></tr></table></div></figure>


<p><code>a.equal? b</code> 會回傳false</p>

<ul>
<li>所有Ruby的物件都有一個<code>public_methods</code>的函數，會回傳一個Array of symbols</li>
</ul>


<hr />

<p>簡單總結這章，Symbol因為有著unique, immutable這兩個特性，在用來當作代表性詞時就很實用，尤其是在應用hash時。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -5]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-5/"/>
    <updated>2015-05-03T20:38:53+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-5</id>
    <content type="html"><![CDATA[<h1>Chapter 5 - Find the Right String with Regular Expressions</h1>

<h2>Match One Character</h2>

<ul>
<li><p><code>.</code>可以match任何單一字元(except new line)</p></li>
<li><p>如果想match <code>.</code>本身，可以用<code>\</code>，如<code>3\.14</code></p></li>
<li><p>再譬如<code>.r\.</code>，可以match <code>Mr.</code> or <code>Dr.</code></p></li>
</ul>


<h2>Sets, Range, Alternatives</h2>

<h3>Sets</h3>

<ul>
<li><p>例如<code>[0123456789]</code>可以match任何一個數字字元</p></li>
<li><p><code>[pPaA][Mm]</code>可以match <code>Am</code> or <code>pm</code>.</p></li>
</ul>


<h3>Range</h3>

<ul>
<li><p><code>[0-9a-f]</code>可以match任何一個16進位的字元</p></li>
<li><p><code>\d</code>可以match任何一個數字字元，<code>\d\d</code>可以match 連續2個數字字元</p></li>
<li><p><code>\w</code>可以match任何一個字元，包含數字、底線等</p></li>
<li><p><code>\s</code>可以match任何一個空白字元，包含space, tab, new line.</p></li>
</ul>


<h3>Alternatives</h3>

<ul>
<li><p><code>|</code>是替換符號</p></li>
<li><p><code>A\.M\.|AM|P\.M\.|PM</code> 可以match <code>A.M.</code> or <code>AM</code>, or <code>P.M.</code> or <code>PM</code></p></li>
<li><p>處理時間格式可以用 <code>\d\d:\d\d (AM|PM)</code></p></li>
</ul>


<h2>Asterist <code>*</code></h2>

<ul>
<li><p>*星號可以表示在星號前的字元有任意個，包含零個。</p></li>
<li><p><code>AB*</code>，可以match <code>AB</code>, <code>A</code>, or <code>ABBBB</code></p></li>
<li><p>所以可以用 <code>[0–9]*</code>，match任何長度的數字</p></li>
</ul>


<h2>Regular Expression in Ruby</h2>

<ul>
<li><p>Format regex by slash: <code>/\d\d:\d\d (AM|PM)/</code></p></li>
<li><p>use operator <code>=~</code></p></li>
<li><p>所以在irb中跑這段</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/\d\d:\d\d (AM|PM)/ =~ '10:24 PM'</span></code></pre></td></tr></table></div></figure>


<p>回傳<code>0</code>，這表示字串有符合，從index = 0的位置開始。</p>

<ul>
<li><p>如果沒有符合，回傳<code>nil</code></p></li>
<li><p>可以變成case insensitive，加上i，如：<code>/AM/i =~ 'am'</code></p></li>
<li><p>也可以當參數傳入gsub來用</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>time_string.gsub!( /\d\d:\d\d (AM|PM)/, '**:** **' )</span></code></pre></td></tr></table></div></figure>


<h2>Beginning and Ending</h2>

<ul>
<li><p>如果想要match字串的開頭用指定的文字，可以加入<code>\A</code>，如<code>\AIn the Beginning</code>，可以match字串前面為<code>In the Beginning</code></p></li>
<li><p>反過來如果想要match字串結尾用指定的文字，可以在尾巴加入<code>\z</code></p></li>
<li><p>如果想要match字串中<code>任何一行的開頭</code>有滿足，可以在條件字串前面加上<code>^</code></p></li>
<li><p>如果想要match字串中<code>任何一行的結尾</code>有滿足，可以在條件字串尾巴加上<code>$</code></p></li>
<li><p>如果想要進階同時match開頭跟結尾</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^Once upon a time.*happily ever after\.$/</span></code></pre></td></tr></table></div></figure>


<p>這樣會失敗，因為<code>.</code>配合<code>*</code>雖然可以取代中間的任意數量的字元，但<code>.</code>不包含new line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^Once upon a time.*happily ever after\.$/m</span></code></pre></td></tr></table></div></figure>


<p>在結尾加上<code>m</code>可以關閉<code>.</code>這個特性。</p>

<ul>
<li><code>?</code>的作用和<code>*</code>類似</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -4]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/26/eloquent-ruby-4/"/>
    <updated>2015-04-26T21:25:50+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/26/eloquent-ruby-4</id>
    <content type="html"><![CDATA[<h1>Chapter 4 - Take Advantage of Ruby’s Smart Strings</h1>

<p>string也和array, hash一樣有豐富的函式庫</p>

<p><a href="http://ruby-doc.org/core-2.2.2/String.html">http://ruby-doc.org/core-2.2.2/String.html</a></p>

<p>本章的結論就有Ruby提供的string非常好用，但壞處就是你要熟讀它。</p>

<hr />

<ul>
<li>double quoted string <code>"</code>, 比<code>'</code>還多了點用途</li>
</ul>


<p>像是在字串中加入變數時<code>#{}</code>，我常忘了用<code>'</code>就沒有這個效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"Hi, #{user.name}."</span></code></pre></td></tr></table></div></figure>


<ul>
<li>遇到很煩的字串含有一堆單引號雙引號，可以用</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%q{"Oh No", "I can't tell what's the difference between 's' and "s"."}</span></code></pre></td></tr></table></div></figure>


<p>像上面的小寫q，也有對應用大寫Q的，效果就是像要加入變數時用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%Q{ "Hi, I'm #{user.name}."}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可以隨意斷行</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>multi_line_string = '你抓
</span><span class='line'>不到我
</span><span class='line'>'
</span><span class='line'>
</span><span class='line'>another_multi_line_string = %q{ 你抓
</span><span class='line'>不到我 }
</span></code></pre></td></tr></table></div></figure>


<p>如果不想有new line，可以用back slash</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>multi_line_with_no_new_line = '你抓\
</span><span class='line'>不到我'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>超長文字可以這樣寫</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>really_long_string = &lt;&lt;EOF
</span><span class='line'>這是開頭
</span><span class='line'>...
</span><span class='line'>這是結尾
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<ul>
<li>chop &amp; chomp</li>
</ul>


<p>長的很像的兩個函數，用法天差地遠</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"a string with new line\n".chomp</span></code></pre></td></tr></table></div></figure>


<p>會回傳 <code>a string with new line</code>，尾巴的new line會截掉。注意如果結尾含有多個new line，它只會截掉一個。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"a string".chop</span></code></pre></td></tr></table></div></figure>


<p>會回傳&#8221;a strin&#8221;，回傳截掉最後一個字的結果。</p>

<ul>
<li>sub &amp; gsub</li>
</ul>


<p>替換字串內容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts 'good good'.sub( 'good', 'bad' )
</span><span class='line'>puts 'good good'.gsub( 'good', 'bad' )</span></code></pre></td></tr></table></div></figure>


<p>得到的結果是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'bad good'
</span><span class='line'>'bad bad'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>split 分割字串</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"one two three four five".split</span></code></pre></td></tr></table></div></figure>


<p>回傳一個矩陣</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["one", "two", "three", "four", "five"]</span></code></pre></td></tr></table></div></figure>


<p>或是分割參數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"one;two;three;four;five".split(";")</span></code></pre></td></tr></table></div></figure>


<p>回傳結果同上</p>

<ul>
<li>index 搜尋字串位置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"actions speak louder than words".index("speak") # return 8</span></code></pre></td></tr></table></div></figure>


<ul>
<li>each_char, each_byte, each_line</li>
</ul>


<p>分別用迴圈回傳字元，位元數，每一行</p>

<ul>
<li>Ruby string is mutable</li>
</ul>


<p>mutable雖然翻譯是可變異，但我覺得它的意義和指標有點類似</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>street_name = 'taiwan street'
</span><span class='line'>road_name = street_name
</span><span class='line'>street_name.upcase!</span></code></pre></td></tr></table></div></figure>


<p>結果road_name = ?</p>

<p>注意像帶有!的函數常會有mutate的作用，所以上述結果road_name = &lsquo;TAIWAN STREET&rsquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -3]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-3/"/>
    <updated>2015-04-24T16:33:18+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-3</id>
    <content type="html"><![CDATA[<h1>Chapter 3 - Take Advantage of Ruby’s Smart Collections</h1>

<p>直接結論，Ruby的Array跟Hash提供很多方便的函數可用，可以參考</p>

<p><a href="http://ruby-doc.org/core-2.2.0/Array.html">Array</a>
<a href="http://ruby-doc.org/core-2.2.0/Hash.html">Hash</a></p>

<p>以下才是正文開始</p>

<hr />

<ul>
<li>如果是要初始化一個給值的陣列，如</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>love_words = ["Nancy", "I", "love", "you"]</span></code></pre></td></tr></table></div></figure>


<p>也可以這樣產生</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>love_words = %w{ Nancy I love you }</span></code></pre></td></tr></table></div></figure>


<p>－ Ruby沒有指標，但是也有個類似指標的用法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def echo_all( *args )
</span><span class='line'>  args.each { |arg| puts arg }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>*暗示arg其實是個陣列值，可以遞進來做陣列處理。</p>

<ul>
<li>對於hash，可以這樣用</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run( {speed: :fast, tools: :train} )</span></code></pre></td></tr></table></div></figure>


<p>也可以不要大括號，這樣寫</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run( speed: :fast, tools: :train )</span></code></pre></td></tr></table></div></figure>


<p>甚至</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run speed: :fast, tools: :train</span></code></pre></td></tr></table></div></figure>


<p>不過在參數只傳遞一個hash時，這樣寫蠻清爽的，如果是像form_for中要傳html_options時還這樣寫，簡直是個閱讀災難，我被誤導了好久。</p>

<p>－ 雖然array和hash都有提供each這個method，不過hash在使用上有些不一樣的地方</p>

<p>只給定一個參數的話</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hash_value = { one: 1, two: 2, three: 3 }
</span><span class='line'>
</span><span class='line'>hash_value.each do |value|
</span><span class='line'>  #something for value
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>value其實是個矩陣，如[:one, 1], [:two, 2], [:three, 3]。</p>

<p>也可以給2個參數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hash_value.each do |key, value|
</span><span class='line'>  #something for value
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>key和value就分別對應到hash值上，這就不用多說了。</p>

<ul>
<li>另外有個<code>inject</code> method可以幫助加總所有元素</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def average_word_length
</span><span class='line'>  total = words.inject(0.0){ |result, word| word.size + result}
</span><span class='line'>  total / word_count
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>－ 不要再each裡面操作delete的動作，如果需要的話可以用<code>array.delete_if</code> method。</p>

<p>－ 如果只是要檢查某個元素有沒有已經存在陣列中，可以考慮改用<code>Set</code>這個class，而不是用Array。
<a href="http://ruby-doc.org/stdlib-2.2.2/libdoc/set/rdoc/Set.html">http://ruby-doc.org/stdlib-2.2.2/libdoc/set/rdoc/Set.html</a></p>

<p>它在檢查效率上比較好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -2]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-2/"/>
    <updated>2015-04-24T15:37:46+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-2</id>
    <content type="html"><![CDATA[<h1>Chapter 2 - Choose the Right Control Structure</h1>

<p>說是Control Structure，我比較習慣說Control Flow，簡單就是說幾乎所有程式語言都有的流程控制語法，像是if, while, case等。</p>

<ul>
<li>Ruby比較特別的是有unless, until反向詞語，一開始用不大習慣，但後來寫著寫著，心裡慢慢習慣照著口語的語法說，現在反而比較喜歡這樣寫了，總之照Ruby的理念就是這些反向詞語的目的就是為了要減少在閱讀程式碼時，心裡還需要做轉換的浪費。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if not @read_only</span></code></pre></td></tr></table></div></figure>


<p>看到not心裡還要先把@read_only的值反向</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>unless @read_only</span></code></pre></td></tr></table></div></figure>


<p>讀起來比較順口</p>

<ul>
<li>另一個蠻特別的點是，條件式可以放在最後面，也是為了配合口語語法</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@title = new_title unless @read_only</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Ruby也有for迴圈，不過直接被捨棄不用（那當初幹嘛創造=___=），都用<code>each</code>。而且<code>for</code>也是用each實踐的，所以直接用each就好了。註：for語法不包含block，所以內中的變數scope是和for同一個，和each只存在於block中不一樣，each和for還是有些不同。</p></li>
<li><p>case, 要注意的是在case中比較是用<code>===</code>，另外條件式也可以用regex來比較</p></li>
</ul>


<p>這邊惡補一下幾個我不熟的operator</p>

<p><code>&lt;=&gt;</code>
Combined comparison operator. Returns 0 if first operand equals second, 1 if first operand is greater than the second and -1 if first operand is less than the second.</p>

<p><code>(a &lt;=&gt; b) returns -1.</code></p>

<p><code>===</code>
Used to test equality within a when clause of a case statement.</p>

<p><code>(1...10) === 5 returns true.</code></p>

<p><code>.eql?</code>
True if the receiver and argument have both the same type and equal values.</p>

<p><code>1 == 1.0 returns true, but 1.eql?(1.0) is false.</code></p>

<p><code>equal?</code>
True if the receiver and argument have the same object id.</p>

<p><code>if aObj is duplicate of bObj then aObj == bObj is true, a.equal?bObj is false but a.equal?aObj is true.</code></p>

<ul>
<li><p>只有false和nil被測試時才會回傳false，<code>0</code>不是！還特別highlight以前寫C的人（哈哈），因為在C裡面<code>0</code>值被測試也是算false</p></li>
<li><p>延續上，因為false和nil被測試都是回傳false，所以要特別注意條件式中會不會false和nil混在一起</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while next_object = get_next_object
</span><span class='line'>  # Do something with the object
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>上面的迴圈是假設next_object最後會變成nil，而nil測試後回傳false。但萬一今天next_object本身的值就是false呢。改成下面的碼會比較好</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>until (next_object = get_next_object).nil?
</span><span class='line'>  # Do something with the object
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>明確指定出next_object是nil才會跳離迴圈</p>

<ul>
<li>Ternery operator</li>
</ul>


<p>這個以前在C++我就蠻愛用的，可以很漂亮的縮短一些簡單的if-else</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>result = (face == :beauty) ? "handsome" : "ugly" # 同等於下式
</span><span class='line'>
</span><span class='line'>if face == :beauty
</span><span class='line'> result = "handsome"
</span><span class='line'>else
</span><span class='line'> result = "ugly"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>另一個是常用的變數初始化技巧</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@first_name ||= ''</span></code></pre></td></tr></table></div></figure>


<p>@first_name如果還沒初始化，會被賦值&#8217;&lsquo;，如果已經有值，那就回傳本身。不過不要拿來對boolean type的變數這樣做，因為它也是倚賴 || operator機制。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -1]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-1/"/>
    <updated>2015-04-24T14:15:45+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-1</id>
    <content type="html"><![CDATA[<h1>Eloquent Ruby</h1>

<p><code>Eloquent Ruby</code> by Russ Olsen 是一本在Tealeaf推薦的書，但它是所謂的『第二本Ruby的書』，而不是第一本，因為這本書裡面已經假設你對Ruby有基礎的觀念了。如果真的完全是初學者，Tealeaf推薦<a href="https://pine.fm/LearnToProgram/">Learn to Program by Chris Pine</a>，或者是<a href="http://learnrubythehardway.org/book/">Learn Ruby The Hard Way</a>，我覺得也不錯，還可以一邊練習打字。</p>

<p>目前我把Part I：Basics看完了，共九章，覺得自己有學到些東西，所以就把它給紀錄下來，並參雜一些個人的想法。</p>

<h1>Charpter 1 - Write Code That Looks Like Ruby</h1>

<p>其實這章指的就是Code Style。更多的Ruby Code Style可以參考<a href="https://github.com/bbatsov/ruby-style-guide">這裡</a>。</p>

<ul>
<li><p>Indent code with two spaces，以前在寫C++時就一直覺得縮排其實2個空白就夠了（雖然我還是用預設4個），轉成Ruby後倒是蠻習慣的，尤其是不用再寫分號跟括號。</p></li>
<li><p>什麼時候寫註解，告訴人家要怎麼用這個method，最好還帶範例。其它的像是最好用良好的命名去定義名稱，省去閱讀時的猜測，documenting itself.</p></li>
<li><p>如果是寫const value，最好用Uppercase with underline，像UPPERCASE_WITH_UNDERLINE。</p></li>
<li><p>因為括號是可以省略的，所以⋯⋯我常被搞混=___=，書用建議def method時後面帶參數時要用括號，但如果是一些接近口語的句子時可以考慮拿掉，如</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts 'hello world'。</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果code block只有一行時最好縮成一排，反過來說如果是多行的話就用block</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apples.each { |apple| apple.to_eat } # prefer if only single code statement
</span><span class='line'>
</span><span class='line'>apples.each do |apple|
</span><span class='line'>  apple.to_eat
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>如果method name結尾帶一個問號?，通常表示這個方法回傳true or false，如<code>array.nil?</code>；又如果是驚嘆號!，通常表示可能有點危險（所謂的危險通常是把丟進來的參數被改變mutate了，如<code>array.map!</code>。但是不管是問號還是驚嘆號，都只是Ruby習慣的命名而已，不是強制性。</p></li>
<li><p>有慣例就會有例外，像是</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> pi = Float('3.14159')</span></code></pre></td></tr></table></div></figure>


<p>Float開頭是大寫而不是小寫。為什麼我也不知道@_@</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week5 (2/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5-2-slash-2/"/>
    <updated>2015-04-09T15:58:27+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5-2-slash-2</id>
    <content type="html"><![CDATA[<h3>Continuous Integration(CI) and Continous Delivery(CD)</h3>

<p>This part is super exciting so I decide to make it a individual post.</p>

<p>Continuous Integration(CI) and Continous Delivery(CD) are two of most important part in automation development. There are plenty of innovation tools, but I think the work flow is the key to understand.</p>

<ol>
<li>Pull the latest code from GitHub.</li>
<li>Create a new feature branch and develop.</li>
<li>Finish development and put to a feature named branch on GitHub.</li>
<li>Create a PR from this branch to <code>staging</code> branch.</li>
<li>Wait CI test for staging branch.</li>
<li>CI automatically deploy from staging branch to <code>staging server</code>.</li>
<li>Manual test on staging server.</li>
<li>Create PR from staging to <code>master</code> branch.</li>
<li>trigger CI for master branch and automatically deploy to <code>production server</code>.</li>
</ol>


<h3>Setting CI and CD</h3>

<p>Here we use <a href="https://circleci.com">Circle CI</a> for CI and CD. There is also well known service called <a href="https://travis-ci.org/">Travis CI</a>.</p>

<ul>
<li>Create a <code>staging</code> branch.</li>
<li>Follow Circle CI project setting.</li>
<li>You may need Heroku API key and SSH.</li>
<li>[Key] Create a <code>circle.yml</code> in the root of project, adjust <code>production_app_name</code> and <code>staging_app_name</code>.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>machine:
</span><span class='line'>  ruby:
</span><span class='line'>    version: 2.1.5
</span><span class='line'>deployment:
</span><span class='line'>  production:
</span><span class='line'>    branch: master
</span><span class='line'>    commands:
</span><span class='line'>      - heroku maintenance:on --app production_app_name
</span><span class='line'>      - heroku pg:backups capture --app production_app_name
</span><span class='line'>      - git push git@heroku.com:production_app_name.git $CIRCLE_SHA1:refs/heads/master
</span><span class='line'>      - heroku run rake db:migrate --app production_app_name
</span><span class='line'>      - heroku maintenance:off --app production_app_name
</span><span class='line'>  staging:
</span><span class='line'>    branch: staging
</span><span class='line'>    commands:
</span><span class='line'>      - heroku maintenance:on --app staging_app_name
</span><span class='line'>      - git push git@heroku.com:staging_app_name.git $CIRCLE_SHA1:refs/heads/master
</span><span class='line'>      - heroku run rake db:migrate --app staging_app_name
</span><span class='line'>      - heroku maintenance:off --app staging_app_name</span></code></pre></td></tr></table></div></figure>


<p>I got an error when running Circle test: [counldn&rsquo;t find file &lsquo;bootstrap&rsquo;]</p>

<p>Solution: Rename file <code>stylesheets/application.css</code> to <code>stylesheets/application.css.scss</code>. And add Line to the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@import 'bootstrap-sprockents'
</span><span class='line'>@import 'bootstrap'</span></code></pre></td></tr></table></div></figure>


<p>and remove line <code>*= require bootstrap</code>.</p>

<h3>Embeded Badget</h3>

<p>I aslo try to use badget in my homepage.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%img(src="https://circleci.com/gh/tomohung/myflix.png?circle-token=a7c782deb0d0022335fa1f095e268bb44eb4cab8")</span></code></pre></td></tr></table></div></figure>


<p>Then I can see this passing test badget.</p>

<p><img src="https://circleci.com/gh/tomohung/myflix.png?circle-token=a7c782deb0d0022335fa1f095e268bb44eb4cab8"></p>

<h3>Slack ingegration with Github and Circle CI</h3>

<p>I failed to use <a href="http://ccmenu.org/">CCMenu</a> to have a notification. But I use <a href="https://slack.com/">Slack</a> to integrate GitHub and Circle CI, and that&rsquo;s why I said it&rsquo;s exciting!!</p>

<p>After setting done, the only thing I need to do is <code>git push origin staging</code> or <code>git push origin master</code>. I&rsquo;ll get notifications in Slack when Github got a push event, and Circle CI run the test and deployment in the same time. Surely I will also get a Circle CI result notification if test and deployment finished.</p>

<p>This is what a programmer should do!! Don&rsquo;t Repeat Yourself!! Bravo!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week5 (1/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5/"/>
    <updated>2015-04-09T14:39:06+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/09/reflection-to-tealeaf-course3-week5</id>
    <content type="html"><![CDATA[<h3>Feature test for sending email</h3>

<p>Following by <a href="http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4/">previous week</a>, this week we have a feature test for sending email.</p>

<p>Install gem,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem 'capybara-email'</span></code></pre></td></tr></table></div></figure>


<p>And added this line to <code>spec_helper.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'capybara/email/rspec'</span></code></pre></td></tr></table></div></figure>


<p>Then</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'spec_helper'
</span><span class='line'>
</span><span class='line'>feature 'User resets password' do
</span><span class='line'>  scenario 'user successfully resets the password' do
</span><span class='line'>    clear_emails
</span><span class='line'>
</span><span class='line'>    user = Fabricate(:user)
</span><span class='line'>    visit sign_in_path
</span><span class='line'>    click_link 'Forgot Password?'
</span><span class='line'>
</span><span class='line'>    fill_in 'Email Address', with: user.email
</span><span class='line'>    click_button 'Send Email'
</span><span class='line'>
</span><span class='line'>    open_email(user.email)
</span><span class='line'>    current_email.click_link("Reset Password")
</span><span class='line'>
</span><span class='line'>    fill_in 'New Password', with: 'new_password'
</span><span class='line'>    click_button 'Reset Password'
</span><span class='line'>
</span><span class='line'>    fill_in 'Email Address', with: user.email
</span><span class='line'>    fill_in 'Password', with: 'new_password'
</span><span class='line'>    click_button 'Sign in'
</span><span class='line'>    expect(page).to have_content("Welcome, #{user.full_name}")
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Especially notice for <code>open_email</code>, <code>current_email</code> functions are offered by <code>capybara-email</code> gem.</p>

<h3>Invite Friend and Registeration</h3>

<p>We also have a work on inviting friends through email, the key point here is how to use a secure <code>token</code> to tracking data.</p>

<ul>
<li>create an invitations data, including inviter, recipient email, name, and <code>token</code>.</li>
<li><p>when user get the email, following the link provided to server, page will direct to the register page with existing data stored with this token.</p>

<p>And set the routes for path</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>get 'register/:token', to: 'users#new_with_invitation_token'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>we can have a hidden data in the register form for new#users to use.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>= hidden_field_tag :token, @invitation_token</span></code></pre></td></tr></table></div></figure>


<p>we don&rsquo;t use form_for element, becuase this hidden attribute does not belong to backend modeled form.</p>

<h3>Concerns</h3>

<p>To Dry our code, we can use <code>concern</code> with <code>module</code>. Here is a <a href="https://signalvnoise.com/posts/3372-put-chubby-models-on-a-diet-with-concerns">post by DHH</a> why we should do this.</p>

<p>We can merge the same function feature into concern file. For example: <code>Tokenable</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#/lib/tokenable.rb
</span><span class='line'>module Tokenable
</span><span class='line'>  extend ActiveSupport::Concern
</span><span class='line'>  included do
</span><span class='line'>    before_create :generate_token
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  private
</span><span class='line'>  def generate_token
</span><span class='line'>    self.token = SecureRandom.urlsafe_base64
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then add to model file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'tokenable'
</span><span class='line'>
</span><span class='line'>class User &lt; ActiveRecord::Base
</span><span class='line'>  include Tokenable
</span><span class='line'>  ...
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>I prefer to specify require file name, or we can use <a href="http://stackoverflow.com/questions/19098663/auto-loading-lib-files-in-rails-4">auto loading library files</a>.</p>

<h3>Email Service Providers</h3>

<p>Since we have test email sending on ENV:development and EVN:test, now we have test it in the real world. That&rsquo;s why we need a real email service provider. Google has it but with many restriction, Tealeaf recommend <code>Mailgun</code> or <code>Postmark</code>. Here we have a taste for `Mailgun&#8217;.</p>

<p>To setting <code>config/environments/production.rb</code>, add these lines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.action_mailer.default_url_options = { :host =&gt; "tomo-myflix.herokuapp.com" }
</span><span class='line'>  config.action_mailer.smtp_settings = {
</span><span class='line'>    :port           =&gt; ENV['MAILGUN_SMTP_PORT'],
</span><span class='line'>    :address        =&gt; ENV['MAILGUN_SMTP_SERVER'],
</span><span class='line'>    :user_name      =&gt; ENV['MAILGUN_SMTP_LOGIN'],
</span><span class='line'>    :password       =&gt; ENV['MAILGUN_SMTP_PASSWORD'],
</span><span class='line'>    :domain         =&gt; 'tomo-myflix.herokuapp.com',
</span><span class='line'>    :authentication =&gt; :plain,
</span><span class='line'>  }
</span><span class='line'>  config.action_mailer.delivery_method = :smtp</span></code></pre></td></tr></table></div></figure>


<p><code>tomo-myflix.herokuapp.com</code> is my app name on Heroku. And ENV about Mailgun are maintained by Heroku.</p>

<p>I aslo can use this command to check <code>Heroku configurations</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku config</span></code></pre></td></tr></table></div></figure>


<p>Then push it to heroku and test for a real email address, it works!!</p>

<h3>Background Jobs</h3>

<p>Sometimes, some actions do not need to be synchrous, like sending email, we don&rsquo;t need to wait email sending action completed. That&rsquo;s why we need to use a background job to do sending email to speed up the flow.</p>

<p><code>Sidekiq</code> and <code>Resque</code> are some of this concept product. And Tealeaf recommend to use <a href="https://github.com/mperham/sidekiq/wiki">Sidekiq</a>.</p>

<p>Install gem Sidekiq</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'sidekiq'</span></code></pre></td></tr></table></div></figure>


<p>Only a tiny change for using it by delay method</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AppMailer.delay.notify_on_new_todo(current_user, @todo) # new 
</span><span class='line'>AppMailer.notify_on_new_todo(current_user, @todo).deliver #older one
</span></code></pre></td></tr></table></div></figure>


<p>Add this line in <code>spec/spec_helper.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'sidekiq/testing/inline'</span></code></pre></td></tr></table></div></figure>


<p>Here we setup sidekiq, but we still need start <code>Redis</code> server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install redis
</span><span class='line'>$ redis-server /usr/local/etc/redis.conf</span></code></pre></td></tr></table></div></figure>


<p>And this start sidekiq with another terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec sidekiq</span></code></pre></td></tr></table></div></figure>


<p>So far, this makes <code>local</code> works fine with <code>sidekiq</code> for background jobs. If we want to use background jobs in ENV:production, Heroku take charges if dyno is more than 1, or try <a href="https://coderwall.com/p/fprnhg/free-background-jobs-on-heroku">this way to simulate</a></p>

<p>I have not implemented this yet, but I&rsquo;ll try it later.</p>

<p>There is also <a href="https://devcenter.heroku.com/articles/procfile#deploying-to-heroku">an article talking about Procfile and Foreman</a>.</p>

<p>If sidekiq version >= 3.0, you might also run this line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku config:set REDIS_PROVIDER=REDISTOGO_URL</span></code></pre></td></tr></table></div></figure>


<h3>Monitor Production Error</h3>

<p>Here we have a try for <a href="https://getsentry.com/welcome/">Sentry</a>.</p>

<p>Tracking errors is also a key for automation deployment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week4]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4/"/>
    <updated>2015-04-07T13:11:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/07/reflection-to-tealeaf-course3-week4</id>
    <content type="html"><![CDATA[<h3>Three kinds of BDD</h3>

<p>In week 4 beginning, we got a brief intro for 3 kinds of BDD:</p>

<ul>
<li><p>meet in the middle</p>

<p>I think this should be the popular one for modern development. The front-end engineer build the pages from mockups, then back-end developer connect UI with controllers and models.</p></li>
<li><p>inside out</p>

<p>It develops from models to controllers till views and integrations. It&rsquo;s hard to decide what models you really need in the beginning.</p></li>
<li><p>outside in</p>

<p>It devlops from integrations to controllers and models. It start from a big vision, and close to what user&rsquo;s need. But for developer, it&rsquo;s hard to code from this big vision, especially for integration test in the development beginning.</p></li>
</ul>


<h3>Self Referential Associations</h3>

<p>We can use <strong>self referential association</strong> to let user track other users. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># t.integer :follower_id, :leader_id
</span><span class='line'>class Relationship &lt; ActiveRecord::Base
</span><span class='line'>  belongs_to :follower, class_name: 'User'
</span><span class='line'>  belongs_to :leader, class_name: 'User'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then, model <code>User</code> can have these virtual attributes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  has_many :following_relationships, class_name: 'Relationship', foreign_key: :follower_id
</span><span class='line'>  has_many :leading_relationships, class_name: 'Relationship', foreign_key: :leader_id</span></code></pre></td></tr></table></div></figure>


<h3>Sending Emails</h3>

<p>Rails also offer <code>ActionMailer</code> for sending emails.</p>

<ul>
<li>create files in <code>app/mailers/app_mailer.rb</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class AppMailer &lt; ActionMailer::Base
</span><span class='line'>
</span><span class='line'>  def send_welcome_email(user)
</span><span class='line'>    @user = user
</span><span class='line'>    mail to: user.email, from: 'info@myflix.com', subject: 'Welcome to Myflix'
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>View</code> template in <code>app/views/app_mailers/send_welcome_email</code>:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%html(lang='en-US')
</span><span class='line'>  %body
</span><span class='line'>    %p Welcome to MyFlix, #{@user.full_name}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Config for <code>config/environments/development.rb</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.action_mailer.delivery_method = :letter_opener</span></code></pre></td></tr></table></div></figure>


<p>And</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group :development do
</span><span class='line'>  gem 'letter-opener'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This is only for <code>development</code> setting, we also need to set for <code>test</code> and <code>production</code> independent</p></blockquote>

<h3>Handling Sensitive Account Info</h3>

<p>It&rsquo;s dangerous to upload config setting file to github or other public storage, there is someone update AWS key to GitHub and got a unbelievable credit bill.</p>

<p>Use <code>ENV</code> to protect secret data, we can use gem <code>Figaro</code>.
<a href="https://github.com/laserlemon/figaro">Figara</a> is the simplest way to keep our key value safe.</p>

<p>There are two posts talking about this topic:</p>

<ol>
<li><a href="http://railsapps.github.io/rails-environment-variables.html">Rails Environment Variables</a></li>
<li><a href="https://devcenter.heroku.com/articles/config-vars">Configuration and config Vars</a></li>
</ol>


<blockquote><p>Update: Tealeaf also have a post about <a href="http://www.gotealeaf.com/blog/managing-environment-configuration-variables-in-rails">Managing Environment Configuration Variables in Rails</a></p></blockquote>

<h3>Test Email sending</h3>

<p>Remember to clear email deliveries before test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>before { ActionMailer::Base.deliveries.clear }
</span></code></pre></td></tr></table></div></figure>


<p>Then we can validate email in the test by this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post :create
</span><span class='line'>expect(ActionMailer::Base.deliveries.last.to).to eq([user_attributes["email"]])
</span><span class='line'># expect(ActionMailer::Base.deliveries.last.body).to include(user_attributes["full_name"])</span></code></pre></td></tr></table></div></figure>


<h3>Update database, use rake tasks</h3>

<p>An advice from TA Tomtomecek, I update existing data in model User, and he suggest me to use <a href="http://guides.rubyonrails.org/command_line.html#custom-rake-tasks">custom rake tasks</a> to do that. I&rsquo;ve not taste that yet, just leave a memo here to remember.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week3]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/17/reflection-to-tealeaf-course3-week3/"/>
    <updated>2015-03-17T09:41:26+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/17/reflection-to-tealeaf-course3-week3</id>
    <content type="html"><![CDATA[<p><a href="http://www.tomohung.com/blog/2015/03/11/reflection-to-tealeaf-course3-week2/">In week 2</a>, Tealeaf talked about how to test controller, and this week, I got a more comprehensive test consideration for controller and user interaction.</p>

<h3>For Controller Test</h3>

<ul>
<li>Everytime add a function feature, also need to add a test for it.</li>
<li>Everytime find a bug, also add a test for it.</li>
</ul>


<h3>DRY</h3>

<p>RSpec also offer two ways to DRY code.</p>

<h4>- Macro</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir spec/support
</span><span class='line'>$ touch macros.rb</span></code></pre></td></tr></table></div></figure>


<p>And we can move repeatedly code into here, for example, we usually need to set a login user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def set_current_user(user = nil)
</span><span class='line'>  session[:user_id] = (user || Fabricate(:user)).id
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>and find user</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def current_user
</span><span class='line'>  User.find(session[:user_id])
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>- Shared Examples</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ touch spec/support/share_examples.rb</span></code></pre></td></tr></table></div></figure>


<p>A test method may be called through different controllers:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shared_examples 'requre_sign_in' do
</span><span class='line'>  it 'redirects to the root page'
</span><span class='line'>    action
</span><span class='line'>    expect(response).to redirect_to root_path
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Be careful: <code>action</code> is a <strong>variable</strong>, then when using it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>it_behaves_like 'require_sign_in' do
</span><span class='line'>  let(:action) { get :index }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>Feature Specs</h3>

<p>There are two methods to test user interactions, one is <code>request spec</code> and this is deprecated by <strong>Capybara</strong>. The other one is <code>feature specs</code>, recommended by <strong>Capybara</strong>.</p>

<p><strong>Capybara</strong> offer functions that we can click link/button, fill text field&hellip;etc, to interactive with UI.</p>

<h4>- Install Capybara gem</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group :test
</span><span class='line'>  gem 'capybara'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Also add this line to test helper file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>requrire 'capybara/rails'</span></code></pre></td></tr></table></div></figure>


<p>And</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$mkdir spec/features
</span><span class='line'>$touch user_signs_in_spec.rb</span></code></pre></td></tr></table></div></figure>


<h4>- A sample for user operation:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>feature 'user interacts with the queue' do 
</span><span class='line'>
</span><span class='line'>  scenario 'user adds and reorder videos in the queue' do
</span><span class='line'>    category    = Fabricate(:category)
</span><span class='line'>    monk        = Fabricate(:video, title: 'monk', category: category)
</span><span class='line'>    futurama    = Fabricate(:video, title: 'futurama', category: category)
</span><span class='line'>    south_park  = Fabricate(:video, title: 'south park', category: category)
</span><span class='line'>
</span><span class='line'>    sign_in
</span><span class='line'>    expect(page).to have_content 'You have signed in.'
</span><span class='line'>
</span><span class='line'>    add_video_to_queue(monk)
</span><span class='line'>    expect(page).to have_content(monk.title)
</span><span class='line'>
</span><span class='line'>    visit video_path(monk)
</span><span class='line'>    expect(page).not_to have_content('+ My Queue')
</span><span class='line'>
</span><span class='line'>    add_video_to_queue(futurama)
</span><span class='line'>    add_video_to_queue(south_park)
</span><span class='line'>
</span><span class='line'>    set_video_order(monk, 3)
</span><span class='line'>    set_video_order(futurama, 1)
</span><span class='line'>    set_video_order(south_park, 2)
</span><span class='line'>
</span><span class='line'>    expect_video_order(monk, 3)
</span><span class='line'>    expect_video_order(futurama, 1)
</span><span class='line'>    expect_video_order(south_park, 2)
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def add_video_to_queue(video)
</span><span class='line'>  visit home_path
</span><span class='line'>  find("a[href='/videos/#{video.id}']").click
</span><span class='line'>  expect(page).to have_content(video.title)
</span><span class='line'>  click_link '+ My Queue'
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def set_video_order(video, order)
</span><span class='line'>  within(:xpath, "//tr[contains(.,'#{video.title}')]") do
</span><span class='line'>    fill_in 'queue_items[][position]', with: order
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def expect_video_order(video, order)
</span><span class='line'>  expect(find(:xpath, "//tr[contains(.,'#{video.title}')]//input[@type='text']").value).to eq(order.to_s)
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>here I choose to use <code>:xpath</code>.</p>

<h4>- One level for scenario</h4>

<p>In above sample, I extract methods <code>add_video_to_queue</code>, <code>set_video_order</code>, and <code>expect_video_order</code>. This is we want to keep a principle <code>Abstract one level for scenario</code>. Encapsulating logic code and keep main code readable on the same abstract level can help reader to review.</p>

<h3>Rails Conventions</h3>

<h4>- Merge Params</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>= form_tag update_queue_path do
</span><span class='line'>  ...
</span><span class='line'>  %td= text_field_tag 'queue_items[][position]', queue_item.position
</span><span class='line'>  =hidden_field_tag 'queue_items[][id]', queue_item.id
</span><span class='line'>
</span><span class='line'>  =submit_tag 'Update'</span></code></pre></td></tr></table></div></figure>


<p>Then we will get a hash value <code>params[queue_items] = {position: xxx, id: xxx}</code></p>

<h4>- select_tag</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%td= select_tag 'queue_items[][rating]', options_for_video_reviews(queue_item.rating), include_blank: true</span></code></pre></td></tr></table></div></figure>


<p>And <code>options_for_video_reviews</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def options_for_video_reviews(selected = nil)
</span><span class='line'>  options_for_select((1..5).map { |num| [pluralize(num, 'Star'), num]}, selected)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Be careful that <code>[pluralize(num, 'Star'), num]</code> is a pair value.</p>

<h4>- ActiveRecord Transactions</h4>

<p>A sample from Rails Tutorial</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveRecord::Base.transaction do
</span><span class='line'>  david.withdrawal(100)
</span><span class='line'>  mary.deposit(100)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>If any one of <code>david.withdrawl</code> or <code>mary.deposit</code> raise an exception(<strong>Be careful: there must be a raising error to trigger transaction</strong>), all database record in this action will be rollback. It deal with batch action with database. So I have to care about what functions will raise an exception when fail. Ex. <code>update</code> return a fail, and <code>update!</code> raise an exception.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week2]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/11/reflection-to-tealeaf-course3-week2/"/>
    <updated>2015-03-11T11:21:17+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/11/reflection-to-tealeaf-course3-week2</id>
    <content type="html"><![CDATA[<p>There are 3 kinds of test: <code>Unit</code>, <code>Functional</code>, <code>Integration</code>. In <a href="http://www.tomohung.com/blog/2015/03/06/reflection-to-tealeaf-course3-week1/">week 1</a>, we test <strong>Model</strong>, this should belong to <code>Unit test</code> . And this week we test <strong>Controller</strong>, this should belong to <code>Functional test</code>. I guess it should be <code>Integration test</code> when we move into part of <strong>View</strong> test.</p>

<p>I have to heavily rely on solution videos, there are two main reasons:</p>

<ol>
<li><p>I&rsquo;m not familiar with <code>what to test</code>, because I&rsquo;m a starter for TDD. It&rsquo;s a big conversion <strong>from test laster to test driven</strong>.</p></li>
<li><p>I&rsquo;m not familiar with <code>RSpec</code>. There are some tricks for test controllers when using RSpec.</p></li>
</ol>


<p>For example, when we test `QueueItemsController#create&#8217;, there are 7 tests:</p>

<ul>
<li>it &lsquo;redirects to my queue page&rsquo;</li>
<li>it &lsquo;creates a queue item&rsquo;</li>
<li>it &lsquo;creates the queue item associated with video&rsquo;</li>
<li>it &lsquo;creates the queue item associated with current user&rsquo;</li>
<li>it &lsquo;puts the video as the last one in the queue&rsquo;</li>
<li>it &lsquo;does not add the video in the queue if already existed in the queue&rsquo;</li>
<li>it &lsquo;redirects to sign in page if unauthenticated&rsquo;</li>
</ul>


<p>A simple action needs to do such lots of tests!!</p>

<p>Or here is for <strong>Model</strong> methods: <code>search_by_title</code>:</p>

<ul>
<li>it &lsquo;returns empty array if no match&rsquo;</li>
<li>it &lsquo;returns an array if one video&rsquo;</li>
<li>it &lsquo;returns an array if partial match&rsquo;</li>
<li>it &lsquo;returns an array of all matches ordered by DESC&rsquo;</li>
<li>it &lsquo;returns an empty array for search an empty string&rsquo;</li>
</ul>


<p>To test every possible situations is not an easy work.</p>

<p>Brandon also metioned me that care about using <code>let</code> and <code>before</code>. Because of lots of tests in spec files, we may miss some pre-declare vars by using <code>let</code> or <code>before</code>. Sometimes, it may be better do not clean duplicated codes for code readability.</p>

<p>Second, extract methods into <strong>Model</strong>. ex:</p>

<figure class='code'><figcaption><span>user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">queue_include?</span><span class="p">(</span><span class="n">video</span><span class="p">)</span>
</span><span class='line'>    <span class="n">queue_items</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:video</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">video</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>then, I can use this method everywhere in my app.</p>

<h3>Conclusion</h3>

<p>Still on the way to be more familiar to do TDD. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week1]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/06/reflection-to-tealeaf-course3-week1/"/>
    <updated>2015-03-06T08:40:32+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/06/reflection-to-tealeaf-course3-week1</id>
    <content type="html"><![CDATA[<p>In Course3 week1, Kevin give me a schema of what should developper do from beginning.</p>

<p>There are so many subjects I&rsquo;ve heard but not ever practicing in action, like: TDD, git flow(github flow), why test&hellip;etc.</p>

<p>I like the concept Red-Green-Refactor, it forced developper thinking about what you should do first. This may be argued by some experienced engineer, because they can do these works naturally.</p>

<p>But followed by Red-Green-Refactor, seeing green light really makes me feel comfortable. I can&rsquo;t stop thinking about how it&rsquo;d become easier if I could use this method when developping AI for TicTacToe. Testing game logic in TicTacToe manually costs me lots of time.</p>

<p>Git flow/ GitHub flow is also my first time to taste. I think this should be fun to start communicate with other programmers through pull request. Glad that Tealeaf built an environment to let us feel like we are really in work.</p>

<p>Matthew also metioned about this I should care about: <a href="http://stackoverflow.com/questions/729692/why-should-files-end-with-a-newline">Why should files end with a newline</a>.
<br/></p>

<p>I also find a blog post talking about <a href="http://www.jamesshore.com/Blog/Red-Green-Refactor.html">Red-Green-Refactor</a>, the author split the process into 5 steps: <strong>Think, Red, Green, Refactor, Repeat</strong>, and called this <code>code design process</code>. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titan's Tic Tac Toe]]></title>
    <link href="http://www.tomohung.com/blog/2015/03/03/titans-tic-tac-toe/"/>
    <updated>2015-03-03T09:11:10+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/03/03/titans-tic-tac-toe</id>
    <content type="html"><![CDATA[<p><img src="http://i.minus.com/i2XJ0y9E48CHg.png"></p>

<h3>Prelude</h3>

<p>This is a blog entry for record my first personal project for Rails, and focus on what&rsquo;s are first time if starting a new project <code>From Zero To One</code>.</p>

<p><code>Titan's Tic Tac Toe</code> is my first personal app for Rails.</p>

<p>Website: <a href="https://tomo-tictactoe.herokuapp.com/">https://tomo-tictactoe.herokuapp.com/</a></p>

<p>GitHub repo: <a href="https://github.com/tomohung/tictactoe-rails">https://github.com/tomohung/tictactoe-rails</a></p>

<p>This project is activated by Tealeaf Course 2(Rapid Prototyping with Ruby on Rails), we are asked to do a personal project by ourself. In course 1(Introduction to Ruby and Web Development), we have an optional assignment to build a game <code>Tic Tac Toe</code> engine by Object-Oriented, that is, to give this game AI. I spent a lot of time to design logic, and I believe I have a good job for this. This is why I choose this subject for my personal project. And reuse my code is also a kind of <code>DRY</code> way.</p>

<!--more-->


<p><strong>Warning</strong></p>

<p>I have to admit that I make a big mistake, because I am using a class variable to control <strong>Game Board</strong> status. This work when only me to play with it, but after deployment it will become disaster when multiple player play together. Player share the same game status and sometimes it look weird.</p>

<p>I should use sessions or database to store game status, and extract methods from class GameBoard to controller. I won&rsquo;t fix this problem but writing this blog entry to record this.</p>

<p><strong>Do no use <code>class vars</code> and <code>global vars</code> in Rails.</strong></p>

<h3>Concepts</h3>

<p>Before implementation, I need to split works into pieces.</p>

<ol>
<li>Game enegine.</li>
<li>Game board implementation.</li>
<li>Ladder for record user&rsquo;s game result.</li>
<li>User&rsquo;s register system and Login/out.</li>
</ol>


<h3>Update Environment</h3>

<p>RVM and rbenv are two popular Ruby version manager. I choose RVM, but rbenv is also a good choice.
It makes me easy to switch different versions Ruby between different projects.
I use <code>Ruby version 2.2.0</code>, and <code>Rails 4.2.0</code> for this new project.</p>

<p>Then create a new Rails project</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails new project_name</span></code></pre></td></tr></table></div></figure>


<p>Specify version in GemFile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails', '4.2.0'
</span><span class='line'>ruby "2.2.0"
</span><span class='line'>
</span><span class='line'>gem 'bootstrap-sass', '~&gt; 3.3.3'</span></code></pre></td></tr></table></div></figure>


<h3>Game Engine</h3>

<p>The game engine is already done in Course 1, so I just modified some codes to fit web process.
GitHub repo: <a href="https://github.com/tomohung/tictactoe-rails/blob/master/lib/oo_tic_tac_toe.rb">https://github.com/tomohung/tictactoe-rails/blob/master/lib/oo_tic_tac_toe.rb</a></p>

<h3>Game Board</h3>

<p>  I&rsquo;m a newbie for HTML &amp; CSS, so Bootstrap will be my best choice. It offer lots of template with high quality, and mobile first.</p>

<p>  I choose <a href="http://getbootstrap.com/examples/cover/">template-cover</a> for my project, it looks clean and suit for my application.</p>

<h4>Bootstrap</h4>

<ol>
<li> Download Bootstrap, unzip it, then find source code in <code>/docs/examples/cover</code>.</li>
<li> I got two files, <code>index.html</code> and <code>cover.css</code>.</li>
<li> combine <code>index.html</code> into Rails <code>views/layout/application.html.erb</code>.</li>
</ol>


<p>  It may looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Tic Tac Toe<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= stylesheet_link_tag    &#39;application&#39;, media: &#39;all&#39;, &#39;data-turbolinks-track&#39; =&gt; true %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39; =&gt; true %&gt;
</span><span class='line'>  <span class="err">&lt;</span>%= csrf_meta_tags %&gt;
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;site-wrapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;site-wrapper-inner&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;cover-container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="err">&lt;</span>%= render &#39;layouts/navigator&#39; %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= render &#39;layouts/messages&#39; %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= yield %&gt;
</span><span class='line'>        <span class="err">&lt;</span>%= render &#39;layouts/footer&#39; %&gt;
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  I use partial <code>layouts/navigator</code> and <code>layouts/footer</code> to clean the code.</p>

<h4>CSS for cover.css</h4>

<p>  The page looks not good, because CSS is not included. Copy <code>cover.css</code> to <code>/assets/stylesheets</code>. Rails will automatically include CSS files in this directory.</p>

<p>  So far is good, but something wrong when I want to use other bootstrap components.
  After google that, this is because I haven&rsquo;t import bootstrap!! I&rsquo;m using just cover.css for this template.</p>

<p>  Changing file name <code>assets/applications.css</code> to <code>asstes/application.scss</code>, and add this code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  @import &quot;bootstrap-sprockets&quot;;
</span><span class='line'>  @import &quot;bootstrap&quot;;
</span></code></pre></td></tr></table></div></figure>


<p>  <code>bootstrap-sprockets</code> has to be imported otherwise <strong>icon</strong> can&rsquo;t be displayed.</p>

<p>  Well, bootstrap components works, but ruin all my template.</p>

<p>  After trial and error, I merge <code>cover.css</code> code into <code>application.scss</code>, and put behind <code>@import "bootstrap"</code>. Rails may load other css files in <code>assets</code> directory, then application.scss import bootstrap, overwrite those class attributes.</p>

<p>  After these setting, now my cover template works well with Bootstrap. I aslo test on my iPhone, it shows pretty good, Bootstrap is awesome!!</p>

<h4>CSS for GameBoard</h4>

<p>  The hardest part for me is to build a game board. I search from web and get some solution, but there&rsquo;s no better solution to draw a symbol <code>X</code>, I decide to display it by another style circle. One more thing, I add the feature when mouse <code>hover</code> on choosen square, it will render a temparary fake circle. This makes game much friendly. Here is the css file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.doughnut</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">10px</span> <span class="k">solid</span> <span class="m">#f00</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.host_doughnut</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">5px</span> <span class="k">solid</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.unpicked</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">dashed</span> <span class="m">#444</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.unpicked</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">10px</span> <span class="k">solid</span> <span class="m">#f66</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Ajax</h4>

<p>  Everytime player choose the square, the whole page will reload again. This is not good for a modern web app. Using Ajax to improve it.</p>

<p>  The keyword is add a ID for picked squre.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">id</span> <span class="o">=</span> <span class="s1">&#39;pick_&lt;%= number %&gt;&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  in <code>GameController</code>, we use <code>respond_to</code> to trigger js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">game_path</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">js</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">host_pick</span>
</span><span class='line'>      <span class="n">winner</span> <span class="o">=</span> <span class="vi">@board</span><span class="o">.</span><span class="n">game_is_over?</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">winner</span>
</span><span class='line'>        <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;OH NO!! You are DEAD!&#39;</span> <span class="k">if</span> <span class="n">winner</span> <span class="o">==</span> <span class="vi">@host</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">:js</span> <span class="o">=&gt;</span> <span class="s2">&quot;window.location = &#39;/game/over&#39;&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note: I use <code>render :js =&gt; "window.location = '/game/over'"</code> to render page /game/over if game is over.</p></blockquote>

<p>  and <code>game.create.js</code> file looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">&lt;</span><span class="sx">% (1..9).each </span><span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;% if @player_picked_numbers.include? number %&gt;</span>
</span><span class='line'>      <span class="err">$</span><span class="p">(</span><span class="s1">&#39;#pick_&lt;%= number %&gt;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="s2">&quot;&lt;div class=&#39;doughnut&#39;&gt;&lt;/div&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% elsif </span><span class="vi">@host_picked_numbers</span><span class="o">.</span><span class="n">include?</span> <span class="n">number</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">      $(&#39;#pick_&lt;%= number %&gt;</span><span class="s1">&#39;).html(&quot;&lt;div class=&#39;</span><span class="n">host_doughnut</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt;&quot;)</span>
</span><span class='line'><span class="sr">    &lt;% end %&gt;</span>
</span><span class='line'><span class="sr">  &lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  Ajax make this game vivid!!</p>

<h3>User&rsquo;s Register</h3>

<p>Since I need to store game record, I have to add User&rsquo;s Register, this is not a difficult stuff if you had gone through course 2. Here is a simple ERD:</p>

<ul>
<li>User: username, digest_password, timestamps, has_many :game_records</li>
<li>GameRecord: user_id, game_result, attack_times</li>
</ul>


<p>User and GameRecord is a one-to-many assocaition.</p>

<p>Create routes, model, controller, and views follow what we learned in course 2.</p>

<h3>Login/out</h3>

<p>  Create a SessionController to manager user login/logout.
  Use session[:user_id] to store data in cookie.</p>

<ul>
<li>def <code>new</code> to render login page.</li>
<li>def <code>create</code> for login.</li>
<li>def <code>destroy</code> for logout.</li>
</ul>


<blockquote><p>Don&rsquo;t forget to add feature: auto login after user register.</p></blockquote>

<h3>Ladder</h3>

<p>I will show three kinds of game result: Keeper, Winner, Loser.
And I need tab navigation here, still copy from Bootstrap:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">ul</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;nav nav-tabs&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% params[:tab] </span><span class="o">=</span> <span class="s1">&#39;WIN&#39;</span> <span class="k">if</span> <span class="o">!</span><span class="n">params</span><span class="o">[</span><span class="ss">:tab</span><span class="o">]</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    &lt;li class=&quot;&lt;%= &#39;active&#39; if params[:tab] == &#39;TIE&#39; %&gt;</span><span class="s2">&quot;&gt;&lt;a href=&quot;</span><span class="c1">#TIE&quot; data-toggle=&quot;tab&quot;&gt;Keepers&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= &#39;active&#39; if params[:tab] == &#39;WIN&#39; %&gt;&quot;</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;#WIN&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">toggle</span><span class="o">=</span><span class="s2">&quot;tab&quot;</span><span class="o">&gt;</span><span class="no">Heroes</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">li</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= &#39;active&#39; if params[:tab] == &#39;LOSE&#39; %&gt;&quot;</span><span class="o">&gt;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;#LOSE&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">toggle</span><span class="o">=</span><span class="s2">&quot;tab&quot;</span><span class="o">&gt;</span><span class="no">Loser</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;div class=&quot;tab-content&quot;&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= render &#39;column_title&#39; %&gt;  </span>
</span><span class='line'><span class="sr">  &lt;div class=&quot;&lt;%= if (params[:tab] == &#39;TIE&#39; || !params[:tab]) then &#39;tab-pane active&#39;  else &#39;tab-pane&#39; end%&gt;&quot; id=&quot;TIE&quot;&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= render @game_records.where(status: &#39;TIE&#39;) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;&lt;%= if params[:tab] == &#39;WIN&#39; then &#39;tab-pane active&#39;  else &#39;tab-pane&#39; end%&gt;&quot;</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;WIN&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= render @game_records.where(status: &#39;WIN&#39;) %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;&lt;%= if params[:tab] == &#39;LOSE&#39; then &#39;tab-pane active&#39;  else &#39;tab-pane&#39; end%&gt;&quot;</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;LOSE&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;%=</span> <span class="n">render</span> <span class="vi">@game_records</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">status</span><span class="p">:</span> <span class="s1">&#39;LOSE&#39;</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tabs do not work? This is because I haven&rsquo;t include javascript for Bootstrap.</p>

<p>Add this line in <code>/assets/javascripts/application.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">bootstrap</span><span class="o">-</span><span class="n">sprockets</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, it works now!!</p>

<p>Then, I found Kevin(Tealeaf Instructor) also write a blog for <a href="http://www.gotealeaf.com/blog/integrating-rails-and-bootstrap-part-1">integrating rails and bootstrap</a>.</p>

<h3>Deploy to Heroku</h3>

<p>Finally, functions all work and ready to deploy to <a href="heroku.com">Heroku</a>. And follow by Heroku instruction, push code, then&hellip;<code>Fail</code>.</p>

<p>Check the log and find something wrong about <code>gem pg</code>. pg is <code>Postgres</code> used by Heroku. Rails default setting is using <code>sqlite3</code>, so I need to do some work in Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails_12factor&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add this code to Gemfile for config :production using Postgres. Run <code>bundle install</code> and git push again, it should work!!</p>

<h3>Conclusion</h3>

<p>In Course 2, we have lots assignments from a prepared template. If I don&rsquo;t start a new project, I will never knew there are lots of minor things I should know. After this project, I have chance to be more familiar with Ruby language, Rails routes, CRUD&hellip;etc.</p>

<h3>Compliment from others</h3>

<p>Record these just for encourage myself to keep going on.</p>

<p>Albert Agram (TA):</p>

<blockquote><p>Hey Tomo, nicely done! I played a few rounds and am impressed. Good job :)
<br/></p></blockquote>

<p>Chris Lee (Tealeaf Instructor):</p>

<blockquote><p>This is incredibly awesome!
<br/>
This type of app doesn&rsquo;t lend itself well to Rails, because it&rsquo;s not
really &ldquo;page oriented&rdquo;. Rails tends to be a better fit for apps like
social networks, or things like that where you have CRUD actions on some
resources.
<br/></p></blockquote>

<p>Brandon Conway (TA):</p>

<blockquote><p>This game is awesome! I really like the ladder implementation.
<br/></p></blockquote>

<p>Eugene Chang:</p>

<blockquote><p>This is a really nice app! After seeing it, I had to constantly resist the temptation of spending more time trying to make my UI look better. Great job!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course2 Lesson4]]></title>
    <link href="http://www.tomohung.com/blog/2015/02/22/reflection-to-tealeaf-course2-lesson4/"/>
    <updated>2015-02-22T21:22:10+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/02/22/reflection-to-tealeaf-course2-lesson4</id>
    <content type="html"><![CDATA[<p>In Course2(Rapid Prototyping with Ruby on Rails), <a href="http://www.tomohung.com/blog/2015/02/02/reflection-to-tealeaf-course-2-lesson-1/">first week</a> I learned about <code>Models and database</code>, <a href="http://www.tomohung.com/blog/2015/02/10/reflection-to-tealeaf-course2-lesson2/">second week</a> I learned about <code>Controllers and Views</code>. The <a href="http://www.tomohung.com/blog/2015/02/16/reflection-to-tealeaf-course2-lesson3/">third week</a> I learned to add <code>Authentication</code> and <code>Polymorphic table</code>.</p>

<p>And this week, also the last week, I completed all basic functions I need to know. Including Ajax for voting, extract methods into gem, build and publish gem, display time info considering user&rsquo;s timezone.</p>

<!--more-->


<h3>Ajax for voting</h3>

<p>Ajax is a clean way to change View template that is necessary changed, and we don&rsquo;t need to redirect and render full page. Rails offer a way to achieve this.</p>

<ul>
<li>in Controller</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="ss">:back</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>in View</li>
</ul>


<p><code>format.js</code> will lead to the class#action View file, for example: <code>/votes/create.js.erb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="s2">&quot;#voteable_&lt;%= @vote.voteable_type %&gt;_&lt;%= @vote.voteable_id %&gt;&quot;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>  <span class="n">html</span><span class="p">(</span><span class="s2">&quot;&lt;%= j render &#39;shared/show_dislike_link&#39;, vote: @vote %&gt;&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>notice that in <code>js.erb</code> file, render should specify format by using <code>j render</code>.</p>

<ul>
<li>HTML ID</li>
</ul>


<p>ID is the key to do Ajax.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">span</span> <span class="nb">id</span> <span class="o">=</span> <span class="s1">&#39;vote_&lt;%=vote.id%&gt;&#39;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= link_to vote_path(vote), remote: true, method: :delete do %&gt;</span>
</span><span class='line'><span class="sx">    &lt;i class=</span><span class="s1">&#39;icon-thumbs-up&#39;</span><span class="o">&gt;&lt;</span><span class="sr">/i&gt;</span>
</span><span class='line'><span class="sr">    Cancel</span>
</span><span class='line'><span class="sr">  &lt;% end %&gt;</span>
</span><span class='line'><span class="sr">&lt;/s</span><span class="n">pan</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add <code>id</code> for Ajax, and add <code>remote: true</code> for activate Ajax.</p>

<h3>Extract methods</h3>

<p>Using <code>ActiveSupport::Concern</code> to manage module, info from Rails API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">scope</span> <span class="ss">:disabled</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">disabled</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">class_methods</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I using for vote methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Voteable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:votes</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:voteable</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">like_votes</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">votes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or Sluggable.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Sluggable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before_save</span> <span class="ss">:generate_slug</span>
</span><span class='line'>    <span class="n">class_attribute</span> <span class="ss">:slug_column</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_param</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">slug</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">generate_slug</span>
</span><span class='line'>    <span class="c1"># ignore...</span>
</span><span class='line'>    <span class="c1"># self.send(self.class.slug_column)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sluggable_column</span><span class="p">(</span><span class="n">noun</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">slug_column</span> <span class="o">=</span> <span class="n">noun</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that using <code>class_attribute</code> to connect different class symbol. Setting <code>sluggable_column</code> in <code>Models</code>.</p>

<p>Also notice that <code>slug_column</code> is a class methods and return a symbol, in order to get instance&rsquo;s value, use <code>self.send(self.class.slug_column)</code>.</p>

<h3>Slug</h3>

<p>There are two purpose using slug:</p>

<ul>
<li>Don&rsquo;t expose database information.</li>
<li>URL for SEO friendly</li>
</ul>


<p>The concepts to generate slug are:</p>

<ol>
<li>add a slug column to store slug value</li>
<li>substitute key word like <code>name</code> into slug, avoid some keywords for HTTP like <code>@&amp;``'</code> etc.</li>
<li>check slug exsited or not, otherwise add a number for avoiding the same name.</li>
</ol>


<h3>Using Gems</h3>

<p>Gem is a very convenient way to use the same methods between two different projects.</p>

<ol>
<li>build a gem spec file.</li>
<li>copy exsited module codes into gem specify path.</li>
<li>build the gem</li>
<li>publish the gem</li>
<li>add gem to Gemfile, then <code>bundle install</code>.</li>
</ol>


<h3>Time Zone</h3>

<p>Rails offer time zone methods to do this.</p>

<ul>
<li>in model backed form</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">time_zone_select</span> <span class="ss">:time_zone</span><span class="p">,</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TimeZone</span><span class="o">.</span><span class="n">us_zones</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>in View template</li>
</ul>


<p>changing time zone by (if time zone is &lsquo;Arizona&rsquo;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">datetime</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">in_time_zone</span><span class="p">(</span><span class="s2">&quot;Arizona&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>Using gem is a way for Rails how to DRY our codes. Rails flavored Ajax is also antoher way to do that. Exciting to know these.</p>

<p>Finally, the last week is coming to the end. The final project <code>Postit</code> seems become into reality app we daily use. And rails pieces are making together and show me how to build a basic function app.</p>

<p>After these two course, I think now I have confidence to read through other Rails introducion books I used to not understand.About Course 3, there is no reason I do NOT keep going since I decide to make a career change. Glad that I survived through the first two courses, and I think I&rsquo;m ready for the course 3 challenge.</p>
]]></content>
  </entry>
  
</feed>
