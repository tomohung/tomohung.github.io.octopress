<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Life Alchemist]]></title>
  <link href="http://www.tomohung.com/atom.xml" rel="self"/>
  <link href="http://www.tomohung.com/"/>
  <updated>2016-06-24T22:29:41+08:00</updated>
  <id>http://www.tomohung.com/</id>
  <author>
    <name><![CDATA[Tomo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phoenix With Bootstrap]]></title>
    <link href="http://www.tomohung.com/blog/2016/06/24/phoenix-with-bootstrap/"/>
    <updated>2016-06-24T21:50:28+08:00</updated>
    <id>http://www.tomohung.com/blog/2016/06/24/phoenix-with-bootstrap</id>
    <content type="html"><![CDATA[<p>最近終於真正開始用Phoenix來開發，對於一個前端近乎白痴的人來說，起手式當然要來個匯入Bootstrap才行。</p>

<p>原本以為Phoenix內建就有引入Bootstrap，但使用後才發現原來它只匯入了css，javascript和icon都必需另外處理。找了網路上相關的文章好像都弄的有一點複雜，但經過試誤法後其實蠻簡單的，記錄一下。</p>

<hr />

<p>建立新專案</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mix phoenix.new bootstrap_example
</span><span class='line'>$ mix deps.get
</span><span class='line'>$ mix phoenix.server</span></code></pre></td></tr></table></div></figure>


<p>打開網頁到<code>localhost:4000</code>看看結果，很好，預設的首頁出來了。</p>

<p>再來就是測試javascript相關的原件</p>

<p>修改<code>web/template/page/index.html.eex</code></p>

<p>貼上Bootstrap官網的範例,順便把內容加上icon可以一起測試</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div&gt;
</span><span class='line'>  &lt;!-- Nav tabs --&gt;
</span><span class='line'>  &lt;ul class="nav nav-tabs" role="tablist"&gt;
</span><span class='line'>    &lt;li role="presentation" class="active"&gt;&lt;a href="#home" aria-controls="home" role="tab" data-toggle="tab"&gt;Home&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>    &lt;li role="presentation"&gt;&lt;a href="#profile" aria-controls="profile" role="tab" data-toggle="tab"&gt;Profile&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>    &lt;li role="presentation"&gt;&lt;a href="#messages" aria-controls="messages" role="tab" data-toggle="tab"&gt;Messages&lt;/a&gt;&lt;/li&gt;
</span><span class='line'>  &lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>  &lt;!-- Tab panes --&gt;
</span><span class='line'>  &lt;div class="tab-content"&gt;
</span><span class='line'>    &lt;div role="tabpanel" class="tab-pane active" id="home"&gt;&lt;span class="glyphicon glyphicon-home"&gt;&lt;/span&gt;&lt;/div&gt;
</span><span class='line'>      &lt;div role="tabpanel" class="tab-pane" id="profile"&gt;&lt;span class="glyphicon glyphicon-th-list"&gt;&lt;/span&gt;&lt;/div&gt;
</span><span class='line'>      &lt;div role="tabpanel" class="tab-pane" id="messages"&gt;&lt;span class="glyphicon glyphicon-file"&gt;&lt;/span&gt;&lt;/div&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>
</span><span class='line'>&lt;/div&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Phoenix會自動幫我們更新內容
更新一下瀏覽器，會看到tab list，但是點了之後下方內容不會更新，因為javascript並沒有匯入。</p>

<p>其實Phoenix已經幫我們鋪好路了，來看看設定檔<code>brunch.config.js</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exports.config = {
</span><span class='line'>  // See http://brunch.io/#documentation for docs.
</span><span class='line'>  files: {
</span><span class='line'>    javascripts: {
</span><span class='line'>      joinTo: "js/app.js",
</span><span class='line'>
</span><span class='line'>      //
</span><span class='line'>      // To change the order of concatenation of files, explicitly mention here
</span><span class='line'>      // https://github.com/brunch/brunch/tree/master/docs#concatenation
</span><span class='line'>      //  order: {
</span><span class='line'>      //    before: [
</span><span class='line'>      //     "web/static/vendor/js/jquery-2.1.1.js",
</span><span class='line'>      //     "web/static/vendor/js/bootstrap.min.js"
</span><span class='line'>      //   ]
</span><span class='line'>      // }
</span><span class='line'>    },
</span><span class='line'>........</span></code></pre></td></tr></table></div></figure>


<p>把</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  order: {
</span><span class='line'>    before: [
</span><span class='line'>       "web/static/vendor/js/jquery-2.1.1.js",
</span><span class='line'>       "web/static/vendor/js/bootstrap.min.js"
</span><span class='line'>    ]
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>解除掉,記得前一行的<code>joinTo: "js/app.js",</code>要加上逗號</p>

<p>好，這樣只是設定好要放的路徑，因為bootstrap.min.js相依jquery，所以要下載</p>

<p>既然我們已經用npm來管理套件了，用npm安裝最快囉</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install bootstrap</span></code></pre></td></tr></table></div></figure>


<p>jQuery是相依套件npm會一起裝</p>

<p>copy jQuery library</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir -p web/static/vendor/js/
</span><span class='line'>$ cp  node_modules/jquery/dist/jquery.min.js web/static/vendor/js/jquery-2.1.1.js</span></code></pre></td></tr></table></div></figure>


<p>copy Bootstrap library</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cp node_modules/bootstrap/dist/bootstrap.min.js web/static/vendor/js/bootstrap.min.js</span></code></pre></td></tr></table></div></figure>


<p>順便連icon也一起處理</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir web/static/assets/fonts
</span><span class='line'>$ cp node_modules/bootstrap/dist/fonts/* web/static/assets/fonts/</span></code></pre></td></tr></table></div></figure>


<p>大功告成！！！
回去瀏覽器看結果，切換不同的tab都會顯示不同的icon！！</p>

<p>Happy Phoenix!!</p>

<p>Demo: <a href="https://github.com/tomohung/phoenix_bootstrap_example">https://github.com/tomohung/phoenix_bootstrap_example</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Ways of Learning Elixir Programming Language]]></title>
    <link href="http://www.tomohung.com/blog/2015/12/18/good-ways-of-learning-elixir-programming-language/"/>
    <updated>2015-12-18T16:32:43+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/12/18/good-ways-of-learning-elixir-programming-language</id>
    <content type="html"><![CDATA[<p>因為最近被壞同事推坑，開始對Elixir這個Functional Program產生了興趣。目前還在官網的getting started奮鬥中，但已經可以感受到一些function program和一般OOP的語言所帶來不同的樂趣和不同的思考方式。</p>

<p>網路上的學習資源跟Ruby比起來還差了一大截，剛好在Quora上看到一篇建議的文章就順手翻譯了一下來灌個水。</p>

<p>Quora原文出處<a href="https://www.quora.com/What-are-some-good-ways-of-learning-the-Elixir-programming-language">link</a></p>

<p>我是如何學習Elixir的：
Here&rsquo;s how I learned Elixir:</p>

<ol>
<li>從elixir-lang.org的getting started開始</li>
<li>Learn Elixir with a Pro<a href="http://elixirsips.com/">link</a>，很有幫助的教學，可以了解Elixir很多函式庫和語言特徵</li>
<li>The Pragmatic Bookshefl | Programming Elixir</li>
<li>大量讀其它Elixir的程式碼，我建議讀Elixir的函式庫，因為你每天都在用。對我而言主要就是phoenix framwork/phoenix和Elixir-lang/plug</li>
<li>動手寫一些程式碼！我做了Programming Elixir書上的習慣，還有一些OSS的貢獻。我也用Phoenix建一些應用。</li>
<li>學習Erlang！ The Progmatic Bookshelf | Programming Erlang</li>
</ol>


<p>The Programming Elixir有很多的習題可以讓你很快上手</p>

<p>看完書後，你會發現有很多不清楚的地方，這是因為你得學Erlang（譯：這不是個好消息）。學習Erlang變的很簡單因為Elixir本來就有很多承襲Erlang的地方。</p>

<p>累的時候就看一些screencast，和讀書交換著做。</p>

<p>Github上有很多Elixir的程式碼可以讀，可以看看那些由Elixir核心成員寫的code，看他們是怎麼寫的。
如果還是不知道要寫什麼，你可以試著貢獻那些你喜歡的函式庫。這幫助你讀的更多，也更能理解你常用的工具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Review After Tealeaf]]></title>
    <link href="http://www.tomohung.com/blog/2015/07/26/interview-review-after-tealeaf/"/>
    <updated>2015-07-26T07:07:25+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/07/26/interview-review-after-tealeaf</id>
    <content type="html"><![CDATA[<p>It&rsquo;s a late post since I got a Rails job for 2 month. I&rsquo;ll share my background and my interview experience, hope it will be helpful if you have the similar background like me.</p>

<p>Background:</p>

<ul>
<li>From Taiwan</li>
<li>Have 8 years for vision inspection machine development, it needs some of coding work by using C++.</li>
<li>But with NO any experience for web development.</li>
<li>Seek for a career change from a local-based develop a machine for manufacture industry to a cloud-based develop a user experience service.</li>
<li>Start Tealeaf course from last December Christmas and finish it in the early May. ( finish the course on schedule)</li>
<li>Start a Rails working on June.</li>
</ul>


<p>First, let me show the conclusion first:</p>

<ul>
<li>Join Tealeaf Academy is definitely worthy.</li>
<li>Finish the Interview Prep is definitely worthy.</li>
<li>Write blog for this course is definitely worthy.</li>
</ul>


<hr />

<p>Unfortunately, there&rsquo;re not too much job opportunities in Taiwan. This is true, but on the other hand, there are also not too much people really good at Rails. I mean, Rails is popular and well-known, but most people just finish some tutorials from free course like code school or some one day workshop like Rails girls. What we different is &ndash; this is a great opportunity to show your ambitious why you want to &ldquo;PAY&rdquo; for Tealeaf to upgrade your Rails skill. This is always the first question when I talk with interview officer.</p>

<p>I only got 4 interview chances in two month, two of them on April after finishing course 2 and the other two on May after finishing course 3. The Interview Prep is very very very helpful because I am asked for the exactly same questions from there!! Something like security probelm: csrf, authenticity token, or Rails architecture: MVC, OR Mapping, Ruby: polymorphism&hellip;etc. Even that example for association of person and children and grandson :-)</p>

<p>Doing Interview Prep is also a good chance to review what I knew and what I don&rsquo;t know. For example: n + 1 queries and eager loading.</p>

<p>Since I&rsquo;m not a native in English, so choosing a English-based course is also an impressing action. Same for writing blogs what I learned from Tealeaf course. I got an unexpecting interview chance from a foreigner company which offer higher payment than others, just because my blog is impressing to them.</p>

<hr />

<p>Hope these will be helpful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生產效率]]></title>
    <link href="http://www.tomohung.com/blog/2015/06/28/sheng-chan-xiao-lu/"/>
    <updated>2015-06-28T10:01:38+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/06/28/sheng-chan-xiao-lu</id>
    <content type="html"><![CDATA[<p>新公司到職也快一個月了，這禮拜看到同事們排排坐在辦公室裡認真的coding，心裡突然有個莫名的聯想</p>

<hr />

<p>在亞當史密斯的『國富論』中，有一段是在描述人類工業化後，分工所產生的效率革命：</p>

<blockquote><p>「……一個沒有受過專業訓練的工人，也不曉得如何運用機器……即使盡最大的努力，一天也未必能做得出一根針來。……」但是，經由分工的辦法，將整個製造程序「分別為十八他階段。每一個階段都雇用技藝熟練的好手……我曾看到一家很小的工廠中，一共祇雇了十個工人，但每天可以生產四萬八千根針。」他指出，「這是由於正確的分工和將他們困難的作業適當編組起來的結果。」</p></blockquote>

<p>於是乎，分工所造成的效率革命對於原本人類的生活造成了重大的影響，人們可以用更便宜的價格享受到更好的生活物質。</p>

<p>這是以製造業來說，那軟體業呢？</p>

<p>這些年來，重心也慢慢從程式的執行效率，一部份轉移到程式的開發效率上。所以有更高層的語言被發明出來，像是Python, Ruby等。更多的framework為了解決特定目的，像是Qt, Ruby on Rails。物件導向Object Oriented也是，把抽象化的性質和方法包裝起來，其它的使用者在大部份情況下，只要知道interface如何使用就可以了，大幅減化實作和維護的時間。</p>

<p>然後從單純程式的開發效率上轉移到行為的自動化上，所以又有了自動化測試，自動化部署。</p>

<hr />

<p>所以一個軟體專案的分工流程大概可以分成這樣：</p>

<ul>
<li>業務接洽：決定專案目的和目標</li>
<li>技術評估：決定技術架構</li>
<li>專案管理：功能開發時間安排</li>
<li>開發團隊：實現功能細節</li>
<li>測試，佈署</li>
</ul>


<p>一層又一層的抽象和分工，讓每個環節的人都能專注的自己的分工上面，這是不是也很像在製造業的工廠分工呢？</p>

<p>再深一層想，所以這個專案能不能成功，其實在前面兩個環節就已經幾乎確定了，後面的工作只要有一個運轉良好的團隊，就能順利產出。這也是為什麼總是聽到無數的管理者強調人的重要性。</p>

<hr />

<p>回到文章一開頭，看到同事們排排坐在辦公室裡認真的coding，彷彿聽到機器的運轉聲軋軋作響</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Many to Many Association by One Join Tabel With 3 Foreign Keys]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/26/many-to-many-association-by-one-join-tabel-wiwith-3-foreign-keys/"/>
    <updated>2015-05-26T14:35:28+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/26/many-to-many-association-by-one-join-tabel-wiwith-3-foreign-keys</id>
    <content type="html"><![CDATA[<p>延續<a href="http://www.tomohung.com/blog/2015/05/25/many-to-many-association-with-two-join-tables/">上一篇問題</a></p>

<p>建立滿足以下關係的Table Associations</p>

<ol>
<li>User can create a tag for a book.</li>
<li>According to a given tag, return book list.</li>
<li>According to a given book, return tag list.</li>
</ol>


<hr />

<p>這次只用一個Join Table但包含了3個FK來實作</p>

<p>建立4個Table</p>

<figure class='code'><figcaption><span>schema</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">create_table</span> <span class="s2">&quot;books&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="ss">:cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="s2">&quot;title&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">create_table</span> <span class="s2">&quot;tags&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="ss">:cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="s2">&quot;label&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">create_table</span> <span class="s2">&quot;user_book_tags&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="ss">:cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="s2">&quot;user_id&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="s2">&quot;book_id&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="s2">&quot;tag_id&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">create_table</span> <span class="s2">&quot;users&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="ss">:cascade</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="s2">&quot;name&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中user_book_tags包含了<code>user_id</code>, <code>book_id</code>, <code>tag_id</code>，3個Foreign key</p>

<p>設定Model Associations</p>

<figure class='code'><figcaption><span>User</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_book_tags</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:user_book_tags</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Book</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_book_tags</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:user_book_tags</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Tag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_book_tags</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:user_book_tags</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:books</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:user_book_tags</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>UserBookTag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserBookTag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:book</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:tag</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>再來是在Rails Console裡測試</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># create data</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Tomo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Tag</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">label</span><span class="p">:</span> <span class="s2">&quot;good book&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">UserBookTag</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">user</span><span class="p">:</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="p">,</span> <span class="ss">book</span><span class="p">:</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span><span class="p">,</span> <span class="ss">tag</span><span class="p">:</span> <span class="no">Tag</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># test associations</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">tags</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">tags</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Tag</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">users</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Tag</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">books</span>
</span></code></pre></td></tr></table></div></figure>


<p>與<a href="http://www.tomohung.com/blog/2015/05/25/many-to-many-association-with-two-join-tables/">上一次的方法</a>相比，少建立一個Table。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Many to Many Association With Two Join Tables]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/25/many-to-many-association-with-two-join-tables/"/>
    <updated>2015-05-25T21:37:28+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/25/many-to-many-association-with-two-join-tables</id>
    <content type="html"><![CDATA[<p>今天被問了一個問題當場答不出來，記錄起來，回家後試著實作看看</p>

<p>建立滿足以下關係的Table Associations</p>

<ol>
<li>User can create a tag for a book.</li>
<li>According to a given tag, return book list.</li>
<li>According to a given book, return tag list.</li>
</ol>


<p>提示：需要用到2個Join Table</p>

<p>以下作法不確定是否正確，閱讀時請斟酌</p>

<p>需要建立5個Table</p>

<figure class='code'><figcaption><span>Users</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateUsers</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:users</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamp</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Books</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateBooks</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:books</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:title</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Tags</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateTags</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:tags</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:label</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>UserTags</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateUserTags</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:user_tags</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:user_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:tag_id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>BookTags</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateBookTags</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:book_tags</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:book_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:tag_id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著是Model設定</p>

<figure class='code'><figcaption><span>User</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_tags</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:user_tags</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Book</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:book_tags</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:book_tags</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Tag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:user_tags</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:user_tags</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:book_tags</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:books</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:book_tags</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>UserTag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserTag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:tag</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>BookTag</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BookTag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:book</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:tag</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然後在Rails Console下測試</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Create data</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Tomo&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Ruby&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Tag</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">label</span><span class="p">:</span> <span class="s2">&quot;good book&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">tags</span> <span class="o">&lt;&lt;</span> <span class="no">Tag</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">tags</span> <span class="o">&lt;&lt;</span> <span class="no">Tag</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Test associations</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">tags</span> <span class="c1"># return tags belong to user</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Book</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">tags</span> <span class="c1"># return tags belong to book</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Tag</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">users</span> <span class="c1"># return tag&#39;s users</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">Tag</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">books</span> <span class="c1"># return tag&#39;s books</span>
</span></code></pre></td></tr></table></div></figure>


<p>看起來都有正常連結，這個作法的缺點應該是在user_tags和book_tags都有記錄tag_id這個橍位，在空間上的利用效率較差。不過目前我也沒想到其它的方法就是了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -9 [Write Specs!]]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/19/eloquent-ruby-9/"/>
    <updated>2015-05-19T09:11:44+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/19/eloquent-ruby-9</id>
    <content type="html"><![CDATA[<h1>Chapter 9 - Write Specs!</h1>

<h2>Don&rsquo;t test it, Spec it!</h2>

<p>雖然內建MiniTest，但實際上寫測試的思維可以像是在定義規格，這也是<code>RSpec</code>的出發點。</p>

<p>在描述上更接近口語的方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>doc.words.include?('blog') == true
</span><span class='line'>
</span><span class='line'>#==&gt; RSpec
</span><span class='line'>doc.words should include('blog')</span></code></pre></td></tr></table></div></figure>


<h2>Easy Stubs</h2>

<p>理想上最好測試一次只測一個類別，但實際上很困難，所以可以利用stub來隔開同時間操作不同的類別。
概念上就是如果需要呼叫外部其它的類別時，賦值給其呼叫的函數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stub_outputer = stub :available? =&gt; true, :render =&gt; nil</span></code></pre></td></tr></table></div></figure>


<p>如此當stub_outputer.availabe? 回傳true, stub_outputer.render回傳nil。</p>

<h2>Easy Mocks</h2>

<p>不同於Stubs，我們希望在測試的函數中，有呼叫到另一個函數，在這裡不用考慮這個函數是否運作正常（這個動作應該在該類別中測試），所以我們期望在這個函數中有呼叫即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s1">&#39;should know how to output&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">mock_outputer</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s1">&#39;Printer&#39;</span><span class="p">)</span> <span class="c1"># &lt;== mock objects</span>
</span><span class='line'>  <span class="n">mock_outputer</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:available?</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>  <span class="c1"># &lt;== expectation call</span>
</span><span class='line'>  <span class="vi">@doc</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="n">mock_outputer</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;Done&#39;</span> <span class="c1"># &lt;== :avaliable? should be called in output method.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -8 [Embrance Dynamic Typing]]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/19/eloquent-ruby-8/"/>
    <updated>2015-05-19T08:56:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/19/eloquent-ruby-8</id>
    <content type="html"><![CDATA[<h1>Chapter 8 - Embrance Dynamic Typing</h1>

<h2>不需要抽象類別</h2>

<p>在C++中，通常會先定義一個抽象類別讓其它類別來繼承並實現其中的Virtual Function，但是在Ruby中這個動作是多餘的。只要類別中有同名的method即可。</p>

<p>例如有二個類別<code>Document</code>, <code>LazyDocument</code>，其中<code>Document</code>的method <code>title</code>是回傳宣告時的值，而<code>LazyDocument</code>是回傳宣告時讀入檔案的值。我們不需要另外定義一個<code>BaseDocument</code>，其中還定義了<code>title</code>這個virtual method，這是一個多餘的動作。</p>

<p>所以有人說對Ruby來說，只要這個類別會像鴨子一樣呱呱叫（譬如就是有<code>make_sound</code>這個method），就可以把它當作鴨子。缺點就是如果沒注意的話，很容易在runtime時期遇到<code>undefined method</code>的問題。</p>

<h2>總結</h2>

<p>這章大部份都是舉例，總結最後</p>

<ul>
<li>只實作你需要的方法</li>
<li>利用命名來documentation</li>
<li>記得要寫test</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week8 (2/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/07/reflection-to-tealeaf-course3-week8-2/"/>
    <updated>2015-05-07T15:43:10+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/07/reflection-to-tealeaf-course3-week8-2</id>
    <content type="html"><![CDATA[<h1>Handle Payments Failures</h1>

<p>Here we review what Jason Fried said in <a href="https://signalvnoise.com/posts/753-ask-37signals-how-do-you-process-credit-cards">How Do You Process Credit Card</a>:</p>

<blockquote><p>The one thing we’re often surprised by is how many accounts have charge issues so it’s important to really think about the error handling and customer experience issues related to declined cards.</p></blockquote>

<p>So there are thousands of reasons a credit card may become declined after user register our website. It&rsquo;s important to handle these payment failures.</p>

<p>Stripe also provide the test situation for us.</p>

<blockquote><p>Card Number: <code>4000000000000341</code><br/>
Description: <code>Attaching this card to a Customer object will succeed, but attempts to charge the customer will fail.</code></p></blockquote>

<p>This special card number will create a customer but charge will fail.</p>

<p>We may produce failed webhook event by Stripe Dashboard.</p>

<p>Open <code>Payments</code> on dashboard and click <code>Create Payment</code>, input the above invalid Card Number info and click Done. Then we can find a failure charge in <code>Events &amp; Webhooks</code>.</p>

<p>As the previous post, we can get failed data as <code>:event_data</code> for test:</p>

<figure class='code'><figcaption><span>spec/requests/deactivate_user_with_payment_failure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;customer on failed charge&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:event_data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;evt_15ycOeLCTUylKIRlJom1jayI&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;created&quot;</span> <span class="o">=&gt;</span> <span class="mi">1430718340</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;livemode&quot;</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;charge.failed&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;data&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;object&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;id&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;ch_15ycOdLCTUylKIRlq8G764Gc&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;object&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;charge&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;created&quot;</span> <span class="o">=&gt;</span> <span class="mi">1430718339</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;livemode&quot;</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;paid&quot;</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;status&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;failed&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="c1"># .......</span>
</span><span class='line'>          <span class="s2">&quot;application_fee&quot;</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;refunds&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;object&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;list&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;total_count&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;has_more&quot;</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;url&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;/v1/charges/ch_15ycOdLCTUylKIRlq8G764Gc/refunds&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;data&quot;</span> <span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;object&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;event&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;pending_webhooks&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;request&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;iar_6AyLkbPGvZltpn&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;api_version&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2015-04-07&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that <code>:event_data</code> type is <code>charge.failed</code>.</p>

<p>Then we add event <code>charge.failed</code> in <code>strip.rb</code></p>

<figure class='code'><figcaption><span>config/initializers/stripe.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">StripeEvent</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">events</span><span class="o">|</span>
</span><span class='line'>  <span class="n">events</span><span class="o">.</span><span class="n">subscribe</span> <span class="s1">&#39;charge.failed&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">customer_token</span><span class="p">:</span> <span class="n">event</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">deactivate!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We simplpy deactivate user here, usually, it should send a warning mail to the user.</p>

<p>Here is the request test:</p>

<figure class='code'><figcaption><span>spec/requests/deactivate_user_with_payment_failure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s1">&#39;customer on failed charge&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:event_data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1">#...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;deactivates a user with the webhook data from stripe for charge failed&#39;</span><span class="p">,</span> <span class="ss">vcr</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">customer_token</span><span class="p">:</span> <span class="s2">&quot;cus_6Awy7ItkTK5HCv&quot;</span><span class="p">,</span> <span class="ss">active</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;/stripe_events&#39;</span><span class="p">,</span> <span class="n">event_data</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">reload</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_active</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to add column <code>active</code> for <code>User</code> to store the status.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:active</span><span class="p">,</span> <span class="ss">:boolean</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make the <code>active</code> column default is true, otherwise Rails will set <code>false</code> for default value.</p>

<h1>A Short Conclusion for Stripe</h1>

<p>We cover Stripe for last three weeks.</p>

<ul>
<li><p>In week 6, we introduce Stripe for charge. How to build a custom form to charge. And test by using <code>vcr</code> for replay response.</p></li>
<li><p>In week 7, we refactor code into <code>UserSignup</code>, as an <code>Service Object</code> of OOP concept. And we need to use javascript driver <code>webkit</code> and <code>selenium</code> in RSpec because of Stripe api.</p></li>
<li><p>In week 8, we use <code>Subscription</code> to charge monthly instead of charge once. And we handle events by <code>Webhook</code>, to deal with <code>charge.succeeded</code> and <code>charge.failed</code> events.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week8 (1/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/07/reflection-to-tealeaf-course3-week8-1/"/>
    <updated>2015-05-07T10:40:17+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/07/reflection-to-tealeaf-course3-week8-1</id>
    <content type="html"><![CDATA[<h1>Subscription</h1>

<p>This week it&rsquo;s still about Stripe. Last week, we use Stripe to charge once, and Stripe also offer us to charge  monthly. This is called <code>Subscription</code>.</p>

<p>First following the <a href="https://stripe.com/docs/subscriptions">instruction here</a> to set Plan.</p>

<p>Then write the test for <code>customer charge</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">StripeWrapper</span><span class="p">,</span> <span class="ss">vcr</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;StripeWrapper::customer&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;create a customer with valid card&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="no">StripeWrapper</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">customer</span><span class="p">(</span><span class="ss">source</span><span class="p">:</span> <span class="n">valid_token</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">charge</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_success</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;does not create a customer with declined card&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="no">StripeWrapper</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">customer</span><span class="p">(</span><span class="ss">source</span><span class="p">:</span> <span class="n">invalid_token</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">charge</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_success</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;return error message with declined card&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="no">StripeWrapper</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">customer</span><span class="p">(</span><span class="ss">source</span><span class="p">:</span> <span class="n">invalid_token</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">charge</span><span class="o">.</span><span class="n">error_message</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_present</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns the customer token for a valid card&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="no">StripeWrapper</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">customer</span><span class="p">(</span><span class="ss">source</span><span class="p">:</span> <span class="n">valid_token</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">charge</span><span class="o">.</span><span class="n">customer_token</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_present</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>StripeWrapper::Charge.customer</code> is written like this:</p>

<figure class='code'><figcaption><span>models/stripe_wrapper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">StripeWrapper</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Charge</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:response</span><span class="p">,</span> <span class="ss">:status</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">customer</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="k">begin</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="no">Stripe</span><span class="o">::</span><span class="no">Customer</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>          <span class="ss">source</span><span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:source</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">plan</span><span class="p">:</span> <span class="s2">&quot;BASE&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">email</span><span class="p">:</span> <span class="n">options</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="kp">new</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="ss">:success</span><span class="p">)</span>
</span><span class='line'>      <span class="k">rescue</span> <span class="no">Stripe</span><span class="o">::</span><span class="no">CardError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>        <span class="kp">new</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="ss">:error</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a tip, in Week7, since we merge code into <code>UserSignup</code> service object, although we change behavior from <code>charge</code> to <code>customer</code>, it&rsquo;s unrelated to <code>UsersControler#create</code> code.</p>

<figure class='code'><figcaption><span>users_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">#some code...</span>
</span><span class='line'>  <span class="n">user_signup_service</span> <span class="o">=</span> <span class="no">UserSignup</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">user_signup_service</span><span class="o">.</span><span class="n">sign_up</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:stripeToken</span><span class="o">]</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:token</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We only need to modified code in <code>UserSignup.sign_up</code>.</p>

<figure class='code'><figcaption><span>services/user_signup.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">sign_up</span><span class="p">(</span><span class="n">stripe_token</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">invitation_token</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="n">customer_charge_user_with_stripe</span><span class="p">(</span><span class="n">stripe_token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">charge</span><span class="o">.</span><span class="n">success?</span>
</span><span class='line'>        <span class="c1">#do something...</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c1">#do something...</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1">#do something...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">customer_charge_user_with_stripe</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
</span><span class='line'>    <span class="no">StripeWrapper</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">customer</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">source</span><span class="p">:</span> <span class="n">token</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">email</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Stripe Webhooks</h1>

<p>We can review Stripe payments on Stripe&rsquo;s dashboard, but what if we want to track and save these records in our website?</p>

<p>Here we instroduce <a href="https://stripe.com/docs/webhooks">Webhook</a></p>

<p>We need Stripe to trigger an event for our server, then we can hold response from Stripe into our database.</p>

<ol>
<li>Go <code>Account setting</code>-><code>Webhooks</code>-><code>Add endpoint...</code></li>
<li>Input your website url. &lt;- explain it later</li>
<li>Select test mode, and press Done</li>
<li>Click <code>Send test webhook</code></li>
</ol>


<p>For developement, we use <a href="http://requestb.in/">RequestBin</a> here to inspect HTTP requests.</p>

<p>Create a RequestBin Url for Stripe endpoint, from the link above, and input the url to Step 2. Click <code>Send test webhook</code> and go back refresh RequestBin page, you will see the response.</p>

<p>Instead of this, we also can review the response from Stripe <code>dashboard</code>-><code>Events &amp; Webhooks</code>, select one of record and check the <code>Webhook Details</code>.</p>

<p>Why we want to check response here? It&rsquo;s just prepared for test data.</p>

<p>For example, create a RSpec file for <code>succeeded payment</code>, and convert response to a fake data <code>:event_data</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;Create payment on successful charge&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:event_data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;id&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;evt_15yYzgLCTUylKIRln74HkdCq&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;created&quot;</span><span class="o">=&gt;</span> <span class="mi">1430705260</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;livemode&quot;</span><span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;charge.succeeded&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;data&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;object&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;id&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;ch_15yYzgLCTUylKIRlP66CKpX5&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;object&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;charge&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;created&quot;</span><span class="o">=&gt;</span> <span class="mi">1430705260</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;livemode&quot;</span><span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;paid&quot;</span><span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;status&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;succeeded&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;amount&quot;</span><span class="o">=&gt;</span> <span class="mi">99</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;currency&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;usd&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;refunded&quot;</span><span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;source&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;id&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;card_15yYzeLCTUylKIRll7zhkfMs&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;object&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;card&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">#.........</span>
</span><span class='line'>            <span class="s2">&quot;dynamic_last4&quot;</span><span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;metadata&quot;</span><span class="o">=&gt;</span> <span class="p">{},</span>
</span><span class='line'>            <span class="s2">&quot;customer&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;cus_6Aupm1THLvHTnO&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="s2">&quot;captured&quot;</span><span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;balance_transaction&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;txn_15yYzgLCTUylKIRluBT7Obmz&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;failure_message&quot;</span><span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;failure_code&quot;</span><span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;amount_refunded&quot;</span><span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;customer&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;cus_6Aupm1THLvHTnO&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;invoice&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;in_15yYzgLCTUylKIRlcnjWhIBb&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;application_fee&quot;</span><span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>          <span class="c1">#..............</span>
</span><span class='line'>          <span class="s2">&quot;refunds&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;object&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;list&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;total_count&quot;</span><span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;has_more&quot;</span><span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;url&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;/v1/charges/ch_15yYzgLCTUylKIRlP66CKpX5/refunds&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;data&quot;</span><span class="o">=&gt;</span> <span class="o">[]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;object&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;event&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;pending_webhooks&quot;</span><span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;request&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;iar_6AupyN8zrE6fF4&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;api_version&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;2015-04-07&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#some spec here...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>According to the data, the event type is <code>charge.succeeded</code>.</p>

<p>In order to receive Stripe Webhook event, we need the gem <code>stripe_event</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;stripe_event&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In config/routes.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mount</span> <span class="no">StripeEvent</span><span class="o">::</span><span class="no">Engine</span><span class="p">,</span> <span class="ss">at</span><span class="p">:</span> <span class="s1">&#39;/stripe_events&#39;</span> <span class="c1"># provide a custom path</span>
</span></code></pre></td></tr></table></div></figure>


<p>Get mark here for the path <code>/stripe_events</code>, because it&rsquo;s the endpoint for setting webhook in Stripe&rsquo;s account setting. Create a webhook on Stripe, for example, my website is <code>https://tomo-myflix.herokuapp.com</code>, then endpoint url is <code>https://tomo-myflix.herokuapp.com/stripe_events</code></p>

<p>Then Stripe_Event help us to deal with stripe events here:</p>

<figure class='code'><figcaption><span>config/initializers/stripe.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">StripeEvent</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">events</span><span class="o">|</span>
</span><span class='line'>  <span class="n">events</span><span class="o">.</span><span class="n">subscribe</span> <span class="s1">&#39;charge.succeeded&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">customer_token</span><span class="p">:</span> <span class="n">event</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">customer</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Payment</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">user</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span> <span class="ss">amount</span><span class="p">:</span> <span class="n">event</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">amount</span><span class="p">,</span> <span class="ss">reference_id</span><span class="p">:</span> <span class="n">event</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>customer_token</code> is created when creating <code>User</code>. Add this column in <code>User</code> to track Stripe record. And code this in service object <code>UserSignup.sign_up</code>:</p>

<figure class='code'><figcaption><span>models/user_signup.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#....</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_up</span><span class="p">(</span><span class="n">stripe_token</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">invitation_token</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="n">customer_charge_user_with_stripe</span><span class="p">(</span><span class="n">stripe_token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">charge</span><span class="o">.</span><span class="n">success?</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">customer_token</span> <span class="o">=</span> <span class="n">charge</span><span class="o">.</span><span class="n">customer_token</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="c1"># ....</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>customer_token</code> and <code>amount</code> can get from response <code>event.data.object</code>.</p>

<p>If your development follow the TDD process, here should code the test first like this</p>

<figure class='code'><figcaption><span>spec/requests/create_payment_on_successful_charge_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;Create payment on successful charge&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:event_data</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># setting in above, ignore here.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;creates a payment with webhood from stripe for charge succeed&#39;</span><span class="p">,</span> <span class="ss">vcr</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;/stripe_events&#39;</span><span class="p">,</span> <span class="n">event_data</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="no">Payment</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># other tests....</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that we use <code>post '/stripe_events', event_data</code> to simulate Stripe emit a post to our server. So this is only for test to trigger StripeEvent in <code>initializers/stripe.rb</code>.</p>

<p>So far, we can create <code>Payment</code> by Stripe Webhook.</p>

<h1>ngrok for local test</h1>

<p>When we run the server on localhost, there is no way to let Stripe directly emit the post to our local machine. And we can use <code>ngrok</code> to do the response transfer.</p>

<p>Download <a href="https://ngrok.com/">ngrok</a> and install.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$ngrok</span> <span class="mi">3000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Get an URL from ngrok, and set this url to Stripe Webhook endpoint. Run the rails server, and operate app by manual to check if payment record be saved.</p>

<p>Just a memo here, becuase I can&rsquo;t use ngrok on my Mac(looks like security problem). but it&rsquo;s ok because I test successful on Heroku.</p>

<p>The most important here is to set the app stirpe events URL in Stripe, for example my end point is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">tomo</span><span class="o">-</span><span class="n">myflix</span><span class="o">.</span><span class="n">herokuapp</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">stripe_events</span>
</span></code></pre></td></tr></table></div></figure>


<h1>ATDD for payment view</h1>

<p>The process for <code>admin views payment</code> is not very complex, so we can just write the spec outside-in, some also call this <code>ATDD</code>.</p>

<p>Here is a post talking about the <a href="http://gaboesquivel.com/blog/2014/differences-between-tdd-atdd-and-bdd/">differences between TDD, ATDD, BDD</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;Admin sees payments&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;admin can see payments&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">payment</span> <span class="o">=</span> <span class="no">Payment</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">user</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span> <span class="ss">reference_id</span><span class="p">:</span> <span class="s1">&#39;fake_reference_id&#39;</span><span class="p">,</span> <span class="ss">amount</span><span class="p">:</span> <span class="mi">99</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sign_in</span><span class="p">(</span><span class="no">Fabricate</span><span class="p">(</span><span class="ss">:admin</span><span class="p">))</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">admin_payments_path</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;$0.99&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">full_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s1">&#39;fake_reference_id&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;user cannot see payments&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">sign_in</span><span class="p">(</span><span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">))</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">admin_payments_path</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;You do not have access right.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week7 (3/3)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-3-slash-3/"/>
    <updated>2015-05-06T17:22:47+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-3-slash-3</id>
    <content type="html"><![CDATA[<h1>Messsage Expectation</h1>

<p>We has metioned <a href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-1/">Test Double at post (1/3)</a>, and here is another kind of Test Double, called <code>Mock Objects</code>.</p>

<blockquote><p>Assert communication, not response</p></blockquote>

<p>In previous post, we have moved the code into <code>UserSignup</code> services obejct and test it. And here all we need to test is ensure that <code>:sign_up</code> method is called in <code>UsersController#create</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe UsersController do
</span><span class='line'>  describe 'POST create' do
</span><span class='line'>    context 'with valid input' do
</span><span class='line'>
</span><span class='line'>      it 'should logged_in if create user' do
</span><span class='line'>        result = double(:sign_up, successful?: true)
</span><span class='line'>        expect_any_instance_of(UserSignup).to receive(:sign_up).and_return(result)
</span><span class='line'>        expect_any_instance_of(User).to receive(:id).and_return(1)
</span><span class='line'>        post :create, user: Fabricate.attributes_for(:user)
</span><span class='line'>        expect(session[:user_id]).to eq(1)
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>expect_any_instance_of(UserSignup).to receive(:sign_up).and_return(result)</code> is called <code>Message Expectation</code> in RSpec, a kind of <code>Mock Object</code>.</p>

<p>Refer to RSpec, it defines</p>

<blockquote><h3>Mock Objects and Test Stubs</h3>

<p>The names Mock Object and Test Stub suggest specialized Test Doubles. i.e. a Test Stub is a Test Double that only supports method stubs, and a Mock Object is a Test Double that supports message expectations and method stubs.</p>

<p>There is a lot of overlapping nomenclature here, and there are many variations of these patterns (fakes, spies, etc). Keep in mind that most of the time we&rsquo;re talking about method-level concepts that are variations of method stubs and message expectations, and we&rsquo;re applying to them to one generic kind of object: a Test Double.</p></blockquote>

<h1>Test Minimalist</h1>

<p>Here we got 3 resources of discussion test.</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=R9FOchgTtLM">Why you don&rsquo;t get mock objects</a> by Gregory</li>
<li><a href="http://martinfowler.com/articles/mocksArentStubs.html">Mock Aren&rsquo;t Stub</a> by Mark Folwer</li>
<li><a href="https://www.youtube.com/watch?v=URSWYvyc42M">The Magic tricks of Testing</a> by Sandi Mets</li>
</ul>


<p>Summary for these three resources.</p>

<p>I use Sandi&rsquo;s picture for the start:</p>

<p><img src="http://jnoconor.github.io/images/unit-testing-chart-sandi-metz.png"></p>

<p>Use this week assignment, class <code>UserSignup</code> for example:</p>

<ul>
<li><p>Incoming Query: We test UserSignup method <code>sign_up</code>, and expect it returns an successful object with valid info. This spec is testing this object state.</p></li>
<li><p>Incoming Command: We also test UserSignup method <code>sign_up</code>, and expect it should create an user with valid info. This is what Sandi said: side effects for outside.</p></li>
</ul>


<blockquote><p>Incoming Command and Incoming Query are all what Mark Folwer said State or Stub or Classical.</p></blockquote>

<ul>
<li><p>Sent to Self: According to Sandi&rsquo;s opinion, it&rsquo;s not necessary to test all private methods in class. Maybe for the complex method, we should think if we can abstract some logic into a new class, and give that class another tests if we need it.</p></li>
<li><p>Outgoing Query: Sandi ignore this, I guess she means that once the object send a new query to the other object, all we need to do is make sure that the other object works fine. And this should be test on that object, so we don&rsquo;t need to test outgoing query.</p></li>
<li><p>Outgoing Command: Once we let an object send a message to the other object do some side effects, all we need to do is make sure that this object do send a message. And this is method message expectation in RSpec, also Mark Folwer said behavior or Mockist or &lsquo;Mock&rsquo;.</p></li>
</ul>


<p>Gregory and Sandi all said that Mock Object can loose each objects association when testing. Once we are testing behavior( or maybe I can say testing interface), we don&rsquo;t need to bind the test and method with specific variable, but bind with an interface. It looks like apply OO concept on testing - try to loose connection with each objects, also loose each object&rsquo;s tests.</p>

<p>Kevin also metions this:</p>

<blockquote><p>a pure &ldquo;mockist&rdquo; way of doing test can be difficult in Rails apps, because in rails apps persistence is handled by the framework and for small apps most of object collaboration / message sending are about persistence. If you mock those interfaces, you end up mocking the guts of rails and that typically doesn&rsquo;t end up well.  this is also why we only touch this topic in the context of non rails objects like service objects.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week7 (2/3)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-2/"/>
    <updated>2015-05-06T15:42:37+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-2</id>
    <content type="html"><![CDATA[<h1>Beyond MVC</h1>

<p>Rails built on MVC (Model / View / Controller) structure. And something get complex if we got more code and logic. This is why we need design patterns.</p>

<h2>Decorators</h2>

<p>Some tips from gem <code>Draper</code>:</p>

<blockquote><p>Without Draper, this functionality might have been tangled up in procedural helpers or adding bulk to your models. With Draper decorators, you can wrap your models with presentation-related logic to organise - and test - this layer of your app much more effectively.</p></blockquote>

<p>Or</p>

<blockquote><p>Decorators are the ideal place to:</p>

<ul>
<li>format complex data for user display</li>
<li>define commonly-used representations of an object, like a <code>name</code> method that combine <code>first_name</code> and <code>last_name</code> attributes.</li>
<li>mark up attributes with a little semantic HTML, like turning a url fiedl into a hyperlink.</li>
</ul>
</blockquote>

<p>First, install gem</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'draper'</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/decorator/video_decorator.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">VideoDecorator</span> <span class="o">&lt;</span> <span class="no">Draper</span><span class="o">::</span><span class="no">Decorator</span>
</span><span class='line'>  <span class="n">delegate_all</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rating</span>
</span><span class='line'>    <span class="s2">&quot;Rating: &quot;</span> <span class="o">+</span> <span class="p">(</span><span class="n">object</span><span class="o">.</span><span class="n">rating</span><span class="o">.</span><span class="n">present?</span> <span class="p">?</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">rating</span><span class="si">}</span><span class="s2">/5.0&quot;</span> <span class="p">:</span> <span class="s2">&quot;NA&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And use it in controller</p>

<figure class='code'><figcaption><span>videos_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@video</span> <span class="o">=</span> <span class="no">VideoDecorator</span><span class="o">.</span><span class="n">decorate</span><span class="p">(</span><span class="no">Vidoe</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>  <span class="n">dne</span>
</span></code></pre></td></tr></table></div></figure>


<p>In view, just a clear line code.</p>

<figure class='code'><figcaption><span>app/views/videos/show.html.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">=</span> <span class="vi">@video</span><span class="o">.</span><span class="n">rating</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key point here is that we have a model data (rating) associated with view, it&rsquo;s not suitable to put to <code>view helper</code> (some logic with model). That&rsquo;s why here using decorator to encapsulate presentation logic.</p>

<h2>Policy Objects</h2>

<p>Define what is premium user:</p>

<figure class='code'><figcaption><span>models/user_level_policy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserLevelPolicy</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">premium?</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">created_at</span> <span class="o">&lt;</span> <span class="no">Date</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2010</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="n">user</span><span class="o">.</span><span class="n">plan</span><span class="o">.</span><span class="n">premium?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Controller</p>

<figure class='code'><figcaption><span>todo_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">###some code</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">UserLevelPolicy</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span><span class="o">.</span><span class="n">premium?</span>
</span><span class='line'>    <span class="c1">#do something</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1">#do another thing</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Different with Decorators, Policy Ojbects only concern judgement logic into one place, without presentation concerned.</p>

<h2>Domain Objects</h2>

<p>if <code>User</code> has an attribute <code>credit_balance</code>. Then merge those code relative to <code>credit</code> into Domain Object.</p>

<figure class='code'><figcaption><span>models/credit.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Credit</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:credit_balance</span><span class="p">,</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@credit_balance</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">current_credit_balance</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">-</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>    <span class="n">credit_balance</span> <span class="o">=</span> <span class="n">credit_balance</span> <span class="o">-</span> <span class="n">number</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">current_credit_balance</span> <span class="o">=</span> <span class="n">credit_balance</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">depleted?</span>
</span><span class='line'>    <span class="n">credit_balance</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">low_balance?</span>
</span><span class='line'>    <span class="n">credit_balance</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus <code>Credit.new(current_user)</code> can call methods about credit, and don&rsquo;t need to put these code in model <code>User</code>, or <code>UsersController</code>.</p>

<h2>Service Objects</h2>

<p>We abstract an action as <code>sign up</code> in <code>UsersController#create</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_signup_service</span> <span class="o">=</span> <span class="no">UserSignup</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">user_signup_service</span><span class="o">.</span><span class="n">sign_up</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:stripeToken</span><span class="o">]</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:token</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">successful?</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">home_path</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">.</span><span class="n">now</span><span class="o">[</span><span class="ss">:danger</span><span class="o">]</span> <span class="o">=</span>  <span class="n">user_signup_service</span><span class="o">.</span><span class="n">error_message</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create an service object <code>UserSignup</code> to handle this.</p>

<figure class='code'><figcaption><span>app/service/user_signup.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSignup</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:error_message</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sign_up</span><span class="p">(</span><span class="n">stripe_token</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">invitation_token</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="n">customer_charge_user_with_stripe</span><span class="p">(</span><span class="n">stripe_token</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">charge</span><span class="o">.</span><span class="n">success?</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">customer_token</span> <span class="o">=</span> <span class="n">charge</span><span class="o">.</span><span class="n">customer_token</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="n">set_invitation_following_relationship</span><span class="p">(</span><span class="n">invitation_token</span><span class="p">)</span>
</span><span class='line'>        <span class="no">AppMailer</span><span class="o">.</span><span class="n">delay</span><span class="o">.</span><span class="n">send_welcome_email</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:success</span>
</span><span class='line'>        <span class="nb">self</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:failed</span>
</span><span class='line'>        <span class="vi">@error_message</span> <span class="o">=</span> <span class="n">charge</span><span class="o">.</span><span class="n">error_message</span>
</span><span class='line'>        <span class="nb">self</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@status</span> <span class="o">=</span> <span class="ss">:failed</span>
</span><span class='line'>      <span class="vi">@error_message</span> <span class="o">=</span> <span class="s2">&quot;User info is invalid.&quot;</span>
</span><span class='line'>      <span class="nb">self</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">successful?</span>
</span><span class='line'>    <span class="vi">@status</span> <span class="o">==</span> <span class="ss">:success</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is an article from Code Climate <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a></p>

<p>As it metion when to use Service Object:</p>

<ul>
<li>The action is complex (e.g. closing the books at the end of an accounting period)</li>
<li>The action reaches across multiple models (e.g. an e-commerce purchase using Order, CreditCard and Customer objects)</li>
<li>The action interacts with an external service (e.g. posting to social networks)</li>
<li>The action is not a core concern of the underlying model (e.g. sweeping up outdated data after a certain time period).</li>
<li>There are multiple ways of performing the action (e.g. authenticating with an access token or password). This is the Gang of Four Strategy pattern.</li>
</ul>


<h2>Some Concept for Object Oriented Design</h2>

<ul>
<li><p><code>Fat model, skinny controllers</code> makes model uncontrollrable. That&rsquo;s why we need Object Oriented Design</p></li>
<li><p>YAGNI</p></li>
</ul>


<p>YAGNI means <code>You Aren't Gonna Need It!</code></p>

<p>Don&rsquo;t write the code you haven&rsquo;t need it.</p>

<p>Here is aother post talking about <code>YAGNI</code>, <code>KISS</code>, <code>DRY</code>.
<a href="http://www.itexico.com/blog/bid/99765/Software-Development-KISS-YAGNI-DRY-3-Principles-to-simplify-your-life">Software Development: KISS, YAGNI &amp; DRY. 3 Principles to simplify your life.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week7 (1/3)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-1/"/>
    <updated>2015-05-06T14:20:15+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week7-1</id>
    <content type="html"><![CDATA[<p>Last week, we use Stripe for charge in UsersController#create, it&rsquo;s a bit little complex code here. We need to wrap it.</p>

<p>Why we need to wrap it into a class:</p>

<ol>
<li><p>Easy to maintain code, isolate controller&rsquo;s and business logic. Remember we knew that <code>fat models, thin controllers</code>, here is a step further concept, we encapsulate code into <code>models/stripe_wrapper.rb</code></p></li>
<li><p>Easy to test, isolate test between different object is always a good idea.</p></li>
</ol>


<h1>How to Wrap</h1>

<p>For <code>module StripeWrapper</code> is just a namespace. Then we sort the code in UsersController#create,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module StripeWrapper
</span><span class='line'>  class Charge
</span><span class='line'>    attr_reader :response, :status
</span><span class='line'>    
</span><span class='line'>    def initialize(response, status)
</span><span class='line'>      @response = response
</span><span class='line'>      @status = status
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def self.create(options = {})      
</span><span class='line'>      begin
</span><span class='line'>        response = Stripe::Charge.create(
</span><span class='line'>          amount: options[:amount], # amount in cents, again
</span><span class='line'>          currency: "usd",
</span><span class='line'>          source: options[:source],
</span><span class='line'>          description: options[:description]
</span><span class='line'>        )
</span><span class='line'>        new(response, :success)
</span><span class='line'>      rescue Stripe::CardError =&gt; e
</span><span class='line'>        new(e, :error)
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def success?
</span><span class='line'>      status == :success
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def error_message
</span><span class='line'>      response.message
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.set_api_key
</span><span class='line'>    Stripe.api_key = ENV["STRIPE_SECRET_KEY"]
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then we can call method <code>StripeWrapper::Charge(options)</code>.</p>

<p><code>new(repose, :sucess)</code> and <code>new(e, :error)</code> return an <code>StripeWrapper::Charge</code> object result.</p>

<h1>How to Test StripeWrapper</h1>

<p>Test return object <code>charge</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe StripeWrapper do
</span><span class='line'>  describe StripeWrapper::Charge do
</span><span class='line'>    it 'makes successful charge' do
</span><span class='line'>      charge = StripeWrapper::Charge.create(amount: 100, source: valid_token)
</span><span class='line'>      expect(charge.response.amount).to eq(100)
</span><span class='line'>      expect(charge.response.currency).to eq('usd')
</span><span class='line'>      expect(charge).to be_success
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>But there is a problem, everytime we test, it will send a request to Stripe server. We don&rsquo;t want to do this and want to reduce test consumer time, use gem <code>vcr</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install vcr
</span><span class='line'>$ gem install webmock</span></code></pre></td></tr></table></div></figure>


<p>Then add <code>vcr: true</code> to spec</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>it 'make successful charge', vcr: true do
</span><span class='line'>  #something
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>vcr will record the reponse in <code>spec/cassettes</code>, when next time it find that test emit the same request again, it will not send the request outside to the server, but replaying saved response.</p>

<p>Here is vcr setting:</p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;vcr&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">VCR</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">cassette_library_dir</span> <span class="o">=</span> <span class="s1">&#39;spec/cassettes&#39;</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">hook_into</span> <span class="ss">:webmock</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">configure_rspec_metadata!</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">ignore_localhost</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>How to test Controller#create</h1>

<p>Since we have test StripeWrapper, we don&rsquo;t want to test it again in Controller, or hit the Stripe server again. Use <a href="http://en.wikipedia.org/wiki/Test_double">Test Double</a> <code>stub</code> here.</p>

<p>For example, if we have a <code>PaymentController</code>:</p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">PaymentController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;POST create&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;sets the flash success message&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">charge</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s2">&quot;charge&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">charge</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:successful?</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="no">StripeWrapper</span><span class="o">::</span><span class="no">Charge</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">charge</span><span class="p">)</span>
</span><span class='line'>      <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">token</span><span class="p">:</span> <span class="s2">&quot;fake_token&quot;</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_present</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Create a test stub <code>charge</code>, and stub a method <code>successful?</code> and return <code>true</code>.</li>
<li>stub <code>:create</code> method to <code>StripeWrapper::Charge</code> and return <code>charge</code>.</li>
</ol>


<p>Now we strike <code>post :create</code>, in PaymentController#create when running to code StripeWrapper::Charge, it will return a result <code>charge</code> with <code>charge.successful?</code> is <code>true</code>.</p>

<p>We do this is because make this controller#create test itself independently, and all we need to do is set StripeWrapper return successful.</p>

<blockquote><p>StripeWrapper will make a HTTP request, we can use <code>vcr</code> to record this, but it&rsquo;s not necessary becuase this test is already done in stripe_wrapper_spec. So here we choose to use <code>stub</code>.</p></blockquote>

<h1>How to do Feature Test with JavaScript</h1>

<p>Since we use javascript in view form, we need to turn on <code>:js</code></p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;visitor make payment&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;with valid card number&#39;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">new_payment_path</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;Credit Card Number&quot;</span><span class="p">,</span> <span class="n">with</span> <span class="s2">&quot;424242424242424242&quot;</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s2">&quot;Security Code&quot;</span><span class="p">,</span> <span class="n">with</span> <span class="s2">&quot;123&quot;</span>
</span><span class='line'>    <span class="nb">select</span> <span class="s2">&quot;3 - March&quot;</span><span class="p">,</span> <span class="ss">form</span><span class="p">:</span> <span class="s2">&quot;date_month&quot;</span>
</span><span class='line'>    <span class="nb">select</span> <span class="s2">&quot;2015&quot;</span><span class="p">,</span> <span class="ss">from</span><span class="p">:</span> <span class="s2">&quot;date_year&quot;</span>
</span><span class='line'>    <span class="n">click_button</span> <span class="s2">&quot;Submit Payment&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span> <span class="s2">&quot;Successful charge.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install gem</p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;selenium-webdriver&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capybara-webkit&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And set in <code>spec_helper.rb</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:webkit</span> <span class="c1"># For default javascript server</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">server_port</span> <span class="o">=</span> <span class="mi">52662</span> <span class="c1"># For Selenium</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>webkit</code> is offered by <code>Qt</code> framework, it&rsquo;s faster than <code>Selenium</code> and invisible. <code>Selenium</code> process is visible, so it&rsquo;s suit for debug.</p>

<p>Careful when test in Email Invitation, I need to use <code>Selenium</code> instead of <code>webkit</code>, otherwise the test will be failed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scenario</span> <span class="s1">&#39;User successfully invites friend and invitation is accepted&#39;</span><span class="p">,</span> <span class="p">{</span><span class="ss">js</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">vcr</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">driver</span><span class="p">:</span> <span class="ss">:selenium</span><span class="p">}</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Setting <a href="https://github.com/DatabaseCleaner/database_cleaner">database_cleaner</a></h2>

<p>It will lead a problem when we run javascript test, refer from RSpec doc:</p>

<blockquote><p>drivers which run the server in a different thread may not share the same transaction as your tests, causing data not to be shared between your test and test server.</p></blockquote>

<p>The problem is when running javascript, activerecord may delete database before javascript test finish.</p>

<p>We can use <code>database_cleaner</code> to do <code>truncation</code> instead of <code>transaction</code>. Manual create and destroy records.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean_with</span><span class="p">(</span><span class="ss">:truncation</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:transaction</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">:js</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week6 (2/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6-2-slash-2/"/>
    <updated>2015-05-06T09:50:50+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6-2-slash-2</id>
    <content type="html"><![CDATA[<p>These week we have two main part: <a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> for uploading images as an admin, <a href="http://stripe.com">Stripe</a> for payments</p>

<p>The first part about CarrierWave for uploading images as an Admin is <a href="http://tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6/">here</a>.</p>

<h1>Stripe for Payments</h1>

<p>Two articles about payments:</p>

<ul>
<li><a href="https://signalvnoise.com/posts/753-ask-37signals-how-do-you-process-credit-cards">How Do You Process Credit Card</a> by Jason Fried</li>
</ul>


<blockquote><p>The one thing we’re often surprised by is how many accounts have charge issues so it’s important to really think about the error handling and customer experience issues related to declined cards.</p></blockquote>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard">Payment Card Industry Data Security Standard by wiki</a></li>
</ul>


<h3>Stripe &amp; Figaro</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'stripe'
</span><span class='line'>gem 'figaro'</span></code></pre></td></tr></table></div></figure>


<p><code>$ figaro install</code></p>

<p>Use Figaro to set Environment variables, Do Not hard code it!!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#config/application.yaml
</span><span class='line'>test:
</span><span class='line'>  STRIPE_SECRET_KEY: sk_test_xxxxxxxxx
</span><span class='line'>  STRIPE_PUBLISHABLE_KEY: pk_test_xxxxxxxxxx
</span><span class='line'>
</span><span class='line'>development:
</span><span class='line'>  STRIPE_SECRET_KEY: sk_test_xxxxxxx
</span><span class='line'>  STRIPE_PUBLISHABLE_KEY: pk_test_xxxxxxx
</span><span class='line'>
</span><span class='line'>production:
</span><span class='line'>  STRIPE_SECRET_KEY: sk_live_xxxxxx
</span><span class='line'>  STRIPE_PUBLISHABLE_KEY: pk_live_xxxxxxxx
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>If Stripe account doesn&rsquo;t activate, we only can use test key <code>sk_test_xxxxxxx</code> even ENV = production</p></blockquote>

<p>I also add this file <code>config/initailizers/figaro.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Figaro.require_keys("STRIPE_SECRET_KEY", "STRIPE_PUBLISHABLE_KEY")</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s convenient to check if you forget to set Environment variables on deploy machine(ex. Circle CI or Heroku).</p>

<p>Figaro also provide a way to set Heroku ENV.</p>

<p><code>$ figaro heroku:set -e production</code></p>

<h3>Stripe Custom Form</h3>

<ol>
<li>Setting form view</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/javascript" src="https://js.stripe.com/v2/"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;script type="text/javascript"&gt;
</span><span class='line'>Stripe.setPublishableKey("#{ENV['STRIPE_PUBLISHABLE_KEY']}");
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>= javascript_include_tag 'payment'
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>When deploy to Heroku, I got this error <code>Failed to load resource: the server responded with a status of 404 (Not Found)</code></p>

<p>This is becuase assets pipeline, add this to the file</p></blockquote>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="o">[</span><span class="s1">&#39;payment.js&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Key Points:</p>

<ul>
<li>use <code>id: 'payment-form'</code> in form_form, this is corespond to <code>assets/javascripts/payment.js</code> content.</li>
<li>use <code>for</code> and <code>id</code> to connect label and input</li>
<li><code>data-stripe = "number"</code> and <code>data-stripe="cvc"</code></li>
<li><code>data: { stripe: "exp-yaer"}</code> and <code>data: { stripe: "exp-month"}</code></li>
</ul>


<p>Attributes of <code>data-stripe</code> is for Stripe to know credit infomation.</p>

<p>Then in our custom form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%section</span><span class="nc">.register.container</span>
</span><span class='line'>  <span class="nc">.row</span>
</span><span class='line'>    <span class="nc">.col-sm-10.col-sm-offset-1</span>
</span><span class='line'>      <span class="p">=</span> <span class="n">bootstrap_form_for</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">layout</span><span class="p">:</span> <span class="ss">:horizontal</span><span class="p">,</span> <span class="ss">html</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;payment-form&#39;</span><span class="p">}</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>        <span class="nt">%header</span>
</span><span class='line'>          <span class="nt">%h1</span> Register
</span><span class='line'>        <span class="nt">%fieldset</span>
</span><span class='line'>          <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s2">&quot;Email Address&quot;</span>
</span><span class='line'>          <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:password</span>
</span><span class='line'>          <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:full_name</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Full Name&#39;</span>
</span><span class='line'>          <span class="p">=</span> <span class="n">hidden_field_tag</span> <span class="ss">:token</span><span class="p">,</span> <span class="vi">@invitation_token</span>
</span><span class='line'>        <span class="nt">%fieldset</span><span class="nc">.credit_card</span>
</span><span class='line'>          <span class="nt">%span</span><span class="nc">.payment-errors</span>
</span><span class='line'>          <span class="nc">.form-group</span>
</span><span class='line'>            <span class="nt">%label</span><span class="nc">.control-label.col-sm-2</span>(<span class="na">for=</span><span class="s">&quot;credit_card_number&quot;</span>) Credit Card Number
</span><span class='line'>            <span class="nc">.col-sm-6</span>
</span><span class='line'>              <span class="nt">%input</span><span class="nc">.form-control</span>(<span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-stripe=</span><span class="s">&quot;number&quot;</span> <span class="na">id=</span><span class="s">&quot;credit_card_number&quot;</span>)
</span><span class='line'>          <span class="nc">.form-group</span>
</span><span class='line'>            <span class="nt">%label</span><span class="nc">.control-label.col-sm-2</span>(<span class="na">for=</span><span class="s">&quot;security_code&quot;</span>) Security Code
</span><span class='line'>            <span class="nc">.col-sm-6</span>
</span><span class='line'>              <span class="nt">%input</span><span class="nc">.form-control</span>(<span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">data-stripe=</span><span class="s">&quot;cvc&quot;</span> <span class="na">id=</span><span class="s">&quot;security_code&quot;</span>)
</span><span class='line'>          <span class="nc">.form-group</span>
</span><span class='line'>            <span class="nt">%label</span><span class="nc">.control-label.col-sm-2</span> Expiration
</span><span class='line'>            <span class="nc">.col-sm-3</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">select_month</span><span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">,</span> <span class="p">{</span><span class="ss">add_month_numbers</span><span class="p">:</span> <span class="kp">true</span><span class="p">},</span>  <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">stripe</span><span class="p">:</span> <span class="s2">&quot;exp-month&quot;</span><span class="p">})</span>
</span><span class='line'>            <span class="nc">.col-sm-2</span>
</span><span class='line'>              <span class="p">=</span> <span class="n">select_year</span><span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">year</span><span class="p">,</span> <span class="p">{</span><span class="ss">start_year</span><span class="p">:</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">year</span><span class="p">,</span> <span class="ss">end_year</span><span class="p">:</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="o">.</span><span class="n">year</span> <span class="o">+</span> <span class="mi">4</span><span class="p">},</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;form-control&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">stripe</span><span class="p">:</span> <span class="s2">&quot;exp-year&quot;</span><span class="p">}</span> <span class="p">)</span>
</span><span class='line'>        <span class="nt">%fieldset</span><span class="nc">.actions.control-group.col-sm-offset-2</span>
</span><span class='line'>          <span class="nc">.controls</span>
</span><span class='line'>            <span class="nt">%input</span>(<span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Sign Up&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span>)
</span></code></pre></td></tr></table></div></figure>


<h3>Setting in Controller Action</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'># Set your secret key: remember to change this to your live secret key in production
</span><span class='line'># See your keys here https://dashboard.stripe.com/account/apikeys
</span><span class='line'>Stripe.api_key = &quot;sk_test_yNosIrCvrAuVttjO60dxy7zy&quot;
</span><span class='line'>
</span><span class='line'># Get the credit card details submitted by the form
</span><span class='line'>token = params[:stripeToken]
</span><span class='line'>
</span><span class='line'># Create the charge on Stripe&#39;s servers - this will charge the user&#39;s card
</span><span class='line'>begin
</span><span class='line'>  charge = Stripe::Charge.create(
</span><span class='line'>    <span class="nd">:amount =&gt; 1000, # amount in cents, again</span>
</span><span class='line'>    <span class="nd">:currency =&gt; &quot;usd&quot;,</span>
</span><span class='line'>    <span class="nd">:source =&gt; token,</span>
</span><span class='line'>    <span class="nd">:description =&gt; &quot;Example charge&quot;</span>
</span><span class='line'>  )
</span><span class='line'>rescue Stripe::CardError =&gt; e
</span><span class='line'>  # The card has been declined
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>Now we click submit button, charge will be deliever to Stripe.</p>

<blockquote><p>Notice again, don&rsquo;t foget to set ENV on Circle CI or Heroku if you deploy code to there.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflection to Tealeaf Course3 Week6 (1/2)]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6/"/>
    <updated>2015-05-06T08:57:30+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/06/reflection-to-tealeaf-course3-week6</id>
    <content type="html"><![CDATA[<p>These week we have two main part: <a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> for uploading images as an admin, <a href="http://stripe.com">Stripe</a> for payments</p>

<h1>CarrierWave for uploading images as an Admin</h1>

<h3>Admin</h3>

<p>In order to controll user is a admin or not, the best practice is to build a admin its own self routes and controllers.</p>

<p>In <code>routes.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>namespace :admin do
</span><span class='line'>  resources :todos, only: [:index, :destroy]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then <code>rake routes</code>, we got</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>admin_todos  admin/todos  admin/todos#index</span></code></pre></td></tr></table></div></figure>


<p>Build the controller file in the path: <code>/controllers/admin/todos_controller.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Admin::TodosController &lt; ApplicationController
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<blockquote><p>It&rsquo;s aother rails convention for the path <code>/controllers/admin/</code> and class name <code>Admin::</code>.</p></blockquote>

<p>Then add <code>admin</code> column to migration</p>

<p><code>$ rails g migration add_admin_to_users</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add_column :users, :admin, :boolean</span></code></pre></td></tr></table></div></figure>


<p>Rails will create a method for all boolean attributes: <code>admin?</code></p>

<h3>Secure Access for different roles</h3>

<p>Next, we can create a <code>AdminController</code> for all other controllers belongs to Admin.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class AdminController &lt; ApplicationController
</span><span class='line'>  before_filter :ensure_admin
</span><span class='line'>
</span><span class='line'>  def ensure_admin
</span><span class='line'>    if !current_user.admin?
</span><span class='line'>      #do something
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Then other controllers belong to Admin could be like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Admin::TodoController &lt; AdminController
</span><span class='line'>  def index
</span><span class='line'>    @todo = Todo.all
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>CarrierWave upload images to AWS S3</h3>

<p>Install gem</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'carrierwave'
</span><span class='line'>gem 'mini_magick'</span></code></pre></td></tr></table></div></figure>


<p>Add column to stored migration, for example: videos</p>

<p><code>$rails migration add_large_cover_to_videos</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>add_column :videos, :large_cover, :string</span></code></pre></td></tr></table></div></figure>


<p>In <code>models/video.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mount_uploader :large_cover, LargeCoverUploader</span></code></pre></td></tr></table></div></figure>


<p>Create <code>app/uploaders/large_cover_uploader.rb</code>, and use <code>mini_magick to resize image</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class LargeCoverUploader &lt; CarrierWave::Uploader::Base
</span><span class='line'>  include CarrierWave::MiniMagick
</span><span class='line'>  process :resize_to_fill =&gt; [665, 375]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Finally, set CarrierWave for AWS S3, in <code>initializers/carrier_wave.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CarrierWave.configure do |config|
</span><span class='line'>  config.fog_provider = 'fog/aws'                        # required
</span><span class='line'>  config.fog_credentials = {
</span><span class='line'>    provider:              'AWS',                        # required
</span><span class='line'>    aws_access_key_id:     'xxx',                        # required
</span><span class='line'>    aws_secret_access_key: 'yyy',                        # required
</span><span class='line'>    region:                'eu-west-1',                  # optional, defaults to 'us-east-1'
</span><span class='line'>    host:                  's3.example.com',             # optional, defaults to nil
</span><span class='line'>    endpoint:              'https://s3.example.com:8080' # optional, defaults to nil
</span><span class='line'>  }
</span><span class='line'>  config.fog_directory  = 'name_of_directory'                          # required
</span><span class='line'>  config.fog_public     = false                                        # optional, defaults to true
</span><span class='line'>  config.fog_attributes = { 'Cache-Control' =&gt; "max-age=#{365.day.to_i}" } # optional, defaults to {}
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, my AWS account has been suspended, so I change the code to store at local</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CarrierWave.configure do |config|
</span><span class='line'>  if Rails.env.staging? || Rails.env.production?
</span><span class='line'>    config.storage = :file
</span><span class='line'>    config.enable_processing = true
</span><span class='line'>  else
</span><span class='line'>    config.storage = :file
</span><span class='line'>    config.enable_processing = Rails.env.development?
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>This code also show that if you want to deal with different environment for <code>product</code> or <code>development</code></p>

<blockquote><p>Usually, only upload small size files direct through web page, we can use other AWS S3 client to upload big file.</p></blockquote>

<p>Another tip here, don&rsquo;t forget to add new attributes to <code>params.require</code>, otherwise upload will be failed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>params.require(:video).permit(:title, :description, :category_id, :large_cover, :small_cover, :video_url)</span></code></pre></td></tr></table></div></figure>


<h3>RSpec Feature Test</h3>

<p>Key Points:</p>

<ul>
<li>attach_file</li>
<li>have_selector</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>feature 'Admin adds new video' do
</span><span class='line'>  scenario 'Admin successfully adds a new video' do
</span><span class='line'>    admin = Fabricate(:admin)
</span><span class='line'>    dramas = Fabricate(:category, title: 'Dramas')
</span><span class='line'>
</span><span class='line'>    sign_in(admin)
</span><span class='line'>    visit new_admin_video_path
</span><span class='line'>
</span><span class='line'>    fill_in 'Title', with: 'Monk'
</span><span class='line'>    select 'Dramas', from: 'Category'
</span><span class='line'>    fill_in 'Description', with: 'SF detective'
</span><span class='line'>    attach_file 'Large cover', 'spec/support/uploads/monk_large.jpg'
</span><span class='line'>    attach_file 'Small cover', 'spec/support/uploads/monk.jpg'
</span><span class='line'>    fill_in 'Video URL', with: 'http://www.example.com/video.mp4'
</span><span class='line'>    click_button 'Add Video'
</span><span class='line'>
</span><span class='line'>    sign_out
</span><span class='line'>    sign_in
</span><span class='line'>
</span><span class='line'>    visit video_path(Video.first)
</span><span class='line'>    expect(page).to have_selector("img[src='/uploads/monk_large.jpg']")
</span><span class='line'>    expect(page).to have_selector("a[href='http://www.example.com/video.mp4']")
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -7 [Treat Everything Like an Object—Because Everything Is]]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/04/eloquent-ruby-7/"/>
    <updated>2015-05-04T06:19:26+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/04/eloquent-ruby-7</id>
    <content type="html"><![CDATA[<h1>Chapter 7 - Treat Everything Like an Object—Because Everything Is</h1>

<h2>Classes, Instances, Methods</h2>

<ul>
<li><p>Class就像是容器，可以裝很多Method。Class也像是工廠，製造出很多副本Instances</p></li>
<li><p>如果沒有指定superclass時，<code>Object</code>為預設繼承的類別。<code>Object</code>也是繼承了<code>BasicObject</code></p></li>
</ul>


<h2>Objects</h2>

<ul>
<li>反正什麼東西在Ruby裡面都是Object，可以測試這些</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-1.class
</span><span class='line'>true.class
</span><span class='line'>nil.class
</span><span class='line'>/regex/.class</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果puts出來，預設會用<code>to_s</code>轉換</li>
</ul>


<h2>eval</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cmd = 'gets'
</span><span class='line'>puts eval(cmd)</span></code></pre></td></tr></table></div></figure>


<p><code>eval</code>可以像irb執行字串所代表的程式，這也是由Object繼承而來的函數</p>

<h2>public, private, protected</h2>

<p>三種屬性來控制method的曝露性</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Method
</span><span class='line'>  def public_method
</span><span class='line'>    #預設為public，所有public method都可以呼叫
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  private # 在此之後方法都是private，只有在該instance內可以呼叫
</span><span class='line'>  def private_method
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>也可以這樣寫，不過我還沒看過實際有人這樣寫</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Method
</span><span class='line'>  def private_method
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  private :prviate_method #在這指定private_method屬性是private</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>private內的方法繼承到subclass後，<strong>同樣可以呼叫</strong>，這跟在C++中不一樣</p></li>
<li><p>protected有夠難理解，原文是這樣的</p></li>
</ul>


<blockquote><p>Any instance of a class can call a protected method on any other instance of the class</p></blockquote>

<p>我是參考高見龍<a href="http://blog.eddie.com.tw/2011/07/26/public-protected-and-private-method-in-ruby/">這篇文章</a>才比較理解為什麼</p>

<p>可以在irb這樣測試</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Base
</span><span class='line'>  private 
</span><span class='line'>  def private_show
</span><span class='line'>    puts self.class
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  protected
</span><span class='line'>  def protected_show
</span><span class='line'>    puts self.class
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>然後</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class SubBase &lt; Base
</span><span class='line'>  def use_private
</span><span class='line'>    private_show # 如果寫成self.private_show，會產生錯誤
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def use_protected
</span><span class='line'>    self.protected_show # 可以指定在self這個instance上
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>原生Ruby source code中，20萬行的程式碼，大約有1000個private methods, protected methods只有50幾個。意思就是用到的機會也不多啦。</p></li>
<li><p>另外Ruby也有個設計，如果你實在想突破限制使用class內的方法，可以用<code>send</code></p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sub_base.send(:private_show)</span></code></pre></td></tr></table></div></figure>


<p>不過一般的作法大概都是另外寫一個public method把private method包起來給外部呼叫。</p>

<ul>
<li>public, private, protected並不是什麼特別的Ruby Magic，其實他們都是methods，呼叫後面帶參數</li>
</ul>


<p>相同的還有<code>require</code>載入檔案</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rails_spec'</span></code></pre></td></tr></table></div></figure>


<p>或者是<code>attr_accessor</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>attr_accessor :name</span></code></pre></td></tr></table></div></figure>


<p>然後我們就可以有<code>name</code>的getter和setter方法</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -6 [Use Symbols to Stand for Something]]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-6/"/>
    <updated>2015-05-03T22:06:44+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-6</id>
    <content type="html"><![CDATA[<h1>Chapter 6 - Use Symbols to Stand for Something</h1>

<p>String和Symbol很類似，都可以用來代表程式中的某個事物，但字串還多了可以被用來處理得到額外資訊，如果我們單純只是想要用來代表程式中的某個事物，用Symbol就可以了。</p>

<p>－ 同一個symbol永遠指著同一個物件，如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = :sym 
</span><span class='line'>b= a
</span><span class='line'>c = :sym</span></code></pre></td></tr></table></div></figure>


<p>a, b, c都是相同的物件</p>

<p>但如果是string</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = "sym"
</span><span class='line'>b = "sym"</span></code></pre></td></tr></table></div></figure>


<p><code>a.equal? b</code> 會回傳false</p>

<ul>
<li>所有Ruby的物件都有一個<code>public_methods</code>的函數，會回傳一個Array of symbols</li>
</ul>


<hr />

<p>簡單總結這章，Symbol因為有著unique, immutable這兩個特性，在用來當作代表性詞時就很實用，尤其是在應用hash時。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -5 [Find the Right String With Regular Expressions]]]></title>
    <link href="http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-5/"/>
    <updated>2015-05-03T20:38:53+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/05/03/eloquent-ruby-5</id>
    <content type="html"><![CDATA[<h1>Chapter 5 - Find the Right String with Regular Expressions</h1>

<h2>Match One Character</h2>

<ul>
<li><p><code>.</code>可以match任何單一字元(except new line)</p></li>
<li><p>如果想match <code>.</code>本身，可以用<code>\</code>，如<code>3\.14</code></p></li>
<li><p>再譬如<code>.r\.</code>，可以match <code>Mr.</code> or <code>Dr.</code></p></li>
</ul>


<h2>Sets, Range, Alternatives</h2>

<h3>Sets</h3>

<ul>
<li><p>例如<code>[0123456789]</code>可以match任何一個數字字元</p></li>
<li><p><code>[pPaA][Mm]</code>可以match <code>Am</code> or <code>pm</code>.</p></li>
</ul>


<h3>Range</h3>

<ul>
<li><p><code>[0-9a-f]</code>可以match任何一個16進位的字元</p></li>
<li><p><code>\d</code>可以match任何一個數字字元，<code>\d\d</code>可以match 連續2個數字字元</p></li>
<li><p><code>\w</code>可以match任何一個字元，包含數字、底線等</p></li>
<li><p><code>\s</code>可以match任何一個空白字元，包含space, tab, new line.</p></li>
</ul>


<h3>Alternatives</h3>

<ul>
<li><p><code>|</code>是替換符號</p></li>
<li><p><code>A\.M\.|AM|P\.M\.|PM</code> 可以match <code>A.M.</code> or <code>AM</code>, or <code>P.M.</code> or <code>PM</code></p></li>
<li><p>處理時間格式可以用 <code>\d\d:\d\d (AM|PM)</code></p></li>
</ul>


<h2>Asterist <code>*</code></h2>

<ul>
<li><p>*星號可以表示在星號前的字元有任意個，包含零個。</p></li>
<li><p><code>AB*</code>，可以match <code>AB</code>, <code>A</code>, or <code>ABBBB</code></p></li>
<li><p>所以可以用 <code>[0–9]*</code>，match任何長度的數字</p></li>
</ul>


<h2>Regular Expression in Ruby</h2>

<ul>
<li><p>Format regex by slash: <code>/\d\d:\d\d (AM|PM)/</code></p></li>
<li><p>use operator <code>=~</code></p></li>
<li><p>所以在irb中跑這段</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/\d\d:\d\d (AM|PM)/ =~ '10:24 PM'</span></code></pre></td></tr></table></div></figure>


<p>回傳<code>0</code>，這表示字串有符合，從index = 0的位置開始。</p>

<ul>
<li><p>如果沒有符合，回傳<code>nil</code></p></li>
<li><p>可以變成case insensitive，加上i，如：<code>/AM/i =~ 'am'</code></p></li>
<li><p>也可以當參數傳入gsub來用</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>time_string.gsub!( /\d\d:\d\d (AM|PM)/, '**:** **' )</span></code></pre></td></tr></table></div></figure>


<h2>Beginning and Ending</h2>

<ul>
<li><p>如果想要match字串的開頭用指定的文字，可以加入<code>\A</code>，如<code>\AIn the Beginning</code>，可以match字串前面為<code>In the Beginning</code></p></li>
<li><p>反過來如果想要match字串結尾用指定的文字，可以在尾巴加入<code>\z</code></p></li>
<li><p>如果想要match字串中<code>任何一行的開頭</code>有滿足，可以在條件字串前面加上<code>^</code></p></li>
<li><p>如果想要match字串中<code>任何一行的結尾</code>有滿足，可以在條件字串尾巴加上<code>$</code></p></li>
<li><p>如果想要進階同時match開頭跟結尾</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^Once upon a time.*happily ever after\.$/</span></code></pre></td></tr></table></div></figure>


<p>這樣會失敗，因為<code>.</code>配合<code>*</code>雖然可以取代中間的任意數量的字元，但<code>.</code>不包含new line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/^Once upon a time.*happily ever after\.$/m</span></code></pre></td></tr></table></div></figure>


<p>在結尾加上<code>m</code>可以關閉<code>.</code>這個特性。</p>

<ul>
<li><code>?</code>的作用和<code>*</code>類似</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -4 [Take Advantage of Ruby’s Smart Strings]]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/26/eloquent-ruby-4/"/>
    <updated>2015-04-26T21:25:50+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/26/eloquent-ruby-4</id>
    <content type="html"><![CDATA[<h1>Chapter 4 - Take Advantage of Ruby’s Smart Strings</h1>

<p>string也和array, hash一樣有豐富的函式庫</p>

<p><a href="http://ruby-doc.org/core-2.2.2/String.html">http://ruby-doc.org/core-2.2.2/String.html</a></p>

<p>本章的結論就有Ruby提供的string非常好用，但壞處就是你要熟讀它。</p>

<hr />

<ul>
<li>double quoted string <code>"</code>, 比<code>'</code>還多了點用途</li>
</ul>


<p>像是在字串中加入變數時<code>#{}</code>，我常忘了用<code>'</code>就沒有這個效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"Hi, #{user.name}."</span></code></pre></td></tr></table></div></figure>


<ul>
<li>遇到很煩的字串含有一堆單引號雙引號，可以用</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%q{"Oh No", "I can't tell what's the difference between 's' and "s"."}</span></code></pre></td></tr></table></div></figure>


<p>像上面的小寫q，也有對應用大寫Q的，效果就是像要加入變數時用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%Q{ "Hi, I'm #{user.name}."}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可以隨意斷行</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>multi_line_string = '你抓
</span><span class='line'>不到我
</span><span class='line'>'
</span><span class='line'>
</span><span class='line'>another_multi_line_string = %q{ 你抓
</span><span class='line'>不到我 }
</span></code></pre></td></tr></table></div></figure>


<p>如果不想有new line，可以用back slash</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>multi_line_with_no_new_line = '你抓\
</span><span class='line'>不到我'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>超長文字可以這樣寫</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>really_long_string = &lt;&lt;EOF
</span><span class='line'>這是開頭
</span><span class='line'>...
</span><span class='line'>這是結尾
</span><span class='line'>EOF</span></code></pre></td></tr></table></div></figure>


<ul>
<li>chop &amp; chomp</li>
</ul>


<p>長的很像的兩個函數，用法天差地遠</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"a string with new line\n".chomp</span></code></pre></td></tr></table></div></figure>


<p>會回傳 <code>a string with new line</code>，尾巴的new line會截掉。注意如果結尾含有多個new line，它只會截掉一個。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"a string".chop</span></code></pre></td></tr></table></div></figure>


<p>會回傳&#8221;a strin&#8221;，回傳截掉最後一個字的結果。</p>

<ul>
<li>sub &amp; gsub</li>
</ul>


<p>替換字串內容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts 'good good'.sub( 'good', 'bad' )
</span><span class='line'>puts 'good good'.gsub( 'good', 'bad' )</span></code></pre></td></tr></table></div></figure>


<p>得到的結果是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'bad good'
</span><span class='line'>'bad bad'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>split 分割字串</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"one two three four five".split</span></code></pre></td></tr></table></div></figure>


<p>回傳一個矩陣</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>["one", "two", "three", "four", "five"]</span></code></pre></td></tr></table></div></figure>


<p>或是分割參數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"one;two;three;four;five".split(";")</span></code></pre></td></tr></table></div></figure>


<p>回傳結果同上</p>

<ul>
<li>index 搜尋字串位置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"actions speak louder than words".index("speak") # return 8</span></code></pre></td></tr></table></div></figure>


<ul>
<li>each_char, each_byte, each_line</li>
</ul>


<p>分別用迴圈回傳字元，位元數，每一行</p>

<ul>
<li>Ruby string is mutable</li>
</ul>


<p>mutable雖然翻譯是可變異，但我覺得它的意義和指標有點類似</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>street_name = 'taiwan street'
</span><span class='line'>road_name = street_name
</span><span class='line'>street_name.upcase!</span></code></pre></td></tr></table></div></figure>


<p>結果road_name = ?</p>

<p>注意像帶有!的函數常會有mutate的作用，所以上述結果road_name = &lsquo;TAIWAN STREET&rsquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eloquent Ruby -3 [Take Advantage of Ruby’s Smart Collections]]]></title>
    <link href="http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-3/"/>
    <updated>2015-04-24T16:33:18+08:00</updated>
    <id>http://www.tomohung.com/blog/2015/04/24/eloquent-ruby-3</id>
    <content type="html"><![CDATA[<h1>Chapter 3 - Take Advantage of Ruby’s Smart Collections</h1>

<p>直接結論，Ruby的Array跟Hash提供很多方便的函數可用，可以參考</p>

<p><a href="http://ruby-doc.org/core-2.2.0/Array.html">Array</a>
<a href="http://ruby-doc.org/core-2.2.0/Hash.html">Hash</a></p>

<p>以下才是正文開始</p>

<hr />

<ul>
<li>如果是要初始化一個給值的陣列，如</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>love_words = ["Nancy", "I", "love", "you"]</span></code></pre></td></tr></table></div></figure>


<p>也可以這樣產生</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>love_words = %w{ Nancy I love you }</span></code></pre></td></tr></table></div></figure>


<p>－ Ruby沒有指標，但是也有個類似指標的用法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def echo_all( *args )
</span><span class='line'>  args.each { |arg| puts arg }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>*暗示arg其實是個陣列值，可以遞進來做陣列處理。</p>

<ul>
<li>對於hash，可以這樣用</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run( {speed: :fast, tools: :train} )</span></code></pre></td></tr></table></div></figure>


<p>也可以不要大括號，這樣寫</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run( speed: :fast, tools: :train )</span></code></pre></td></tr></table></div></figure>


<p>甚至</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run speed: :fast, tools: :train</span></code></pre></td></tr></table></div></figure>


<p>不過在參數只傳遞一個hash時，這樣寫蠻清爽的，如果是像form_for中要傳html_options時還這樣寫，簡直是個閱讀災難，我被誤導了好久。</p>

<p>－ 雖然array和hash都有提供each這個method，不過hash在使用上有些不一樣的地方</p>

<p>只給定一個參數的話</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hash_value = { one: 1, two: 2, three: 3 }
</span><span class='line'>
</span><span class='line'>hash_value.each do |value|
</span><span class='line'>  #something for value
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>value其實是個矩陣，如[:one, 1], [:two, 2], [:three, 3]。</p>

<p>也可以給2個參數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hash_value.each do |key, value|
</span><span class='line'>  #something for value
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>key和value就分別對應到hash值上，這就不用多說了。</p>

<ul>
<li>另外有個<code>inject</code> method可以幫助加總所有元素</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def average_word_length
</span><span class='line'>  total = words.inject(0.0){ |result, word| word.size + result}
</span><span class='line'>  total / word_count
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>－ 不要再each裡面操作delete的動作，如果需要的話可以用<code>array.delete_if</code> method。</p>

<p>－ 如果只是要檢查某個元素有沒有已經存在陣列中，可以考慮改用<code>Set</code>這個class，而不是用Array。
<a href="http://ruby-doc.org/stdlib-2.2.2/libdoc/set/rdoc/Set.html">http://ruby-doc.org/stdlib-2.2.2/libdoc/set/rdoc/Set.html</a></p>

<p>它在檢查效率上比較好。</p>
]]></content>
  </entry>
  
</feed>
